/**
 * Prisma Zod Generator - Single File (inlined)
 * Auto-generated. Do not edit.
 */

import { z } from 'zod';
import type { Prisma } from '@prisma/client';

// File: TransactionIsolationLevel.schema.ts

export const TransactionIsolationLevelSchema = z.enum(['ReadUncommitted', 'ReadCommitted', 'RepeatableRead', 'Serializable'])

// File: UserScalarFieldEnum.schema.ts

export const UserScalarFieldEnumSchema = z.enum(['id', 'name', 'email', 'emailVerified', 'image', 'createdAt', 'updatedAt', 'username', 'role', 'banned', 'banReason', 'banExpires', 'onboardingComplete', 'paymentsCustomerId', 'locale', 'twoFactorEnabled'])

// File: SessionScalarFieldEnum.schema.ts

export const SessionScalarFieldEnumSchema = z.enum(['id', 'expiresAt', 'ipAddress', 'userAgent', 'userId', 'impersonatedBy', 'activeOrganizationId', 'token', 'createdAt', 'updatedAt'])

// File: AccountScalarFieldEnum.schema.ts

export const AccountScalarFieldEnumSchema = z.enum(['id', 'accountId', 'providerId', 'userId', 'accessToken', 'refreshToken', 'idToken', 'expiresAt', 'password', 'accessTokenExpiresAt', 'refreshTokenExpiresAt', 'scope', 'createdAt', 'updatedAt'])

// File: VerificationScalarFieldEnum.schema.ts

export const VerificationScalarFieldEnumSchema = z.enum(['id', 'identifier', 'value', 'expiresAt', 'createdAt', 'updatedAt'])

// File: PasskeyScalarFieldEnum.schema.ts

export const PasskeyScalarFieldEnumSchema = z.enum(['id', 'name', 'publicKey', 'userId', 'credentialID', 'counter', 'deviceType', 'backedUp', 'transports', 'createdAt'])

// File: TwoFactorScalarFieldEnum.schema.ts

export const TwoFactorScalarFieldEnumSchema = z.enum(['id', 'secret', 'backupCodes', 'userId'])

// File: OrganizationScalarFieldEnum.schema.ts

export const OrganizationScalarFieldEnumSchema = z.enum(['id', 'name', 'slug', 'logo', 'createdAt', 'metadata', 'paymentsCustomerId'])

// File: MemberScalarFieldEnum.schema.ts

export const MemberScalarFieldEnumSchema = z.enum(['id', 'organizationId', 'userId', 'role', 'createdAt'])

// File: InvitationScalarFieldEnum.schema.ts

export const InvitationScalarFieldEnumSchema = z.enum(['id', 'organizationId', 'email', 'role', 'status', 'expiresAt', 'inviterId'])

// File: PurchaseScalarFieldEnum.schema.ts

export const PurchaseScalarFieldEnumSchema = z.enum(['id', 'organizationId', 'userId', 'type', 'customerId', 'subscriptionId', 'productId', 'status', 'createdAt', 'updatedAt'])

// File: AiChatScalarFieldEnum.schema.ts

export const AiChatScalarFieldEnumSchema = z.enum(['id', 'organizationId', 'userId', 'title', 'messages', 'createdAt', 'updatedAt'])

// File: SortOrder.schema.ts

export const SortOrderSchema = z.enum(['asc', 'desc'])

// File: JsonNullValueInput.schema.ts

export const JsonNullValueInputSchema = z.enum(['JsonNull'])

// File: QueryMode.schema.ts

export const QueryModeSchema = z.enum(['default', 'insensitive'])

// File: NullsOrder.schema.ts

export const NullsOrderSchema = z.enum(['first', 'last'])

// File: JsonNullValueFilter.schema.ts

export const JsonNullValueFilterSchema = z.enum(['DbNull', 'JsonNull', 'AnyNull'])

// File: PurchaseType.schema.ts

export const PurchaseTypeSchema = z.enum(['SUBSCRIPTION', 'ONE_TIME'])

// File: UserWhereInput.schema.ts

export const UserWhereInputObjectSchema: z.ZodType<Prisma.UserWhereInput, Prisma.UserWhereInput> = z.object({
  AND: z.union([z.lazy(() => UserWhereInputObjectSchema), z.lazy(() => UserWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => UserWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => UserWhereInputObjectSchema), z.lazy(() => UserWhereInputObjectSchema).array()]).optional(),
  name: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  email: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  emailVerified: z.union([z.lazy(() => BoolFilterObjectSchema), z.boolean()]).optional(),
  image: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  username: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  role: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  banned: z.union([z.lazy(() => BoolNullableFilterObjectSchema), z.boolean()]).optional().nullable(),
  banReason: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  banExpires: z.union([z.lazy(() => DateTimeNullableFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional().nullable(),
  onboardingComplete: z.union([z.lazy(() => BoolFilterObjectSchema), z.boolean()]).optional(),
  paymentsCustomerId: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  locale: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  twoFactorEnabled: z.union([z.lazy(() => BoolNullableFilterObjectSchema), z.boolean()]).optional().nullable(),
  sessions: z.lazy(() => SessionListRelationFilterObjectSchema).optional(),
  accounts: z.lazy(() => AccountListRelationFilterObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyListRelationFilterObjectSchema).optional(),
  invitations: z.lazy(() => InvitationListRelationFilterObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseListRelationFilterObjectSchema).optional(),
  members: z.lazy(() => MemberListRelationFilterObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorListRelationFilterObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatListRelationFilterObjectSchema).optional()
}).strict();
export const UserWhereInputObjectZodSchema = z.object({
  AND: z.union([z.lazy(() => UserWhereInputObjectSchema), z.lazy(() => UserWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => UserWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => UserWhereInputObjectSchema), z.lazy(() => UserWhereInputObjectSchema).array()]).optional(),
  name: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  email: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  emailVerified: z.union([z.lazy(() => BoolFilterObjectSchema), z.boolean()]).optional(),
  image: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  username: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  role: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  banned: z.union([z.lazy(() => BoolNullableFilterObjectSchema), z.boolean()]).optional().nullable(),
  banReason: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  banExpires: z.union([z.lazy(() => DateTimeNullableFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional().nullable(),
  onboardingComplete: z.union([z.lazy(() => BoolFilterObjectSchema), z.boolean()]).optional(),
  paymentsCustomerId: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  locale: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  twoFactorEnabled: z.union([z.lazy(() => BoolNullableFilterObjectSchema), z.boolean()]).optional().nullable(),
  sessions: z.lazy(() => SessionListRelationFilterObjectSchema).optional(),
  accounts: z.lazy(() => AccountListRelationFilterObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyListRelationFilterObjectSchema).optional(),
  invitations: z.lazy(() => InvitationListRelationFilterObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseListRelationFilterObjectSchema).optional(),
  members: z.lazy(() => MemberListRelationFilterObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorListRelationFilterObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatListRelationFilterObjectSchema).optional()
}).strict();


// File: UserOrderByWithRelationInput.schema.ts

export const UserOrderByWithRelationInputObjectSchema: z.ZodType<Prisma.UserOrderByWithRelationInput, Prisma.UserOrderByWithRelationInput> = z.object({
  id: SortOrderSchema.optional(),
  name: SortOrderSchema.optional(),
  email: SortOrderSchema.optional(),
  emailVerified: SortOrderSchema.optional(),
  image: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional(),
  username: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  role: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  banned: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  banReason: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  banExpires: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  onboardingComplete: SortOrderSchema.optional(),
  paymentsCustomerId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  locale: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  twoFactorEnabled: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  sessions: z.lazy(() => SessionOrderByRelationAggregateInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountOrderByRelationAggregateInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyOrderByRelationAggregateInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationOrderByRelationAggregateInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseOrderByRelationAggregateInputObjectSchema).optional(),
  members: z.lazy(() => MemberOrderByRelationAggregateInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorOrderByRelationAggregateInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatOrderByRelationAggregateInputObjectSchema).optional()
}).strict();
export const UserOrderByWithRelationInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  name: SortOrderSchema.optional(),
  email: SortOrderSchema.optional(),
  emailVerified: SortOrderSchema.optional(),
  image: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional(),
  username: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  role: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  banned: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  banReason: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  banExpires: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  onboardingComplete: SortOrderSchema.optional(),
  paymentsCustomerId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  locale: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  twoFactorEnabled: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  sessions: z.lazy(() => SessionOrderByRelationAggregateInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountOrderByRelationAggregateInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyOrderByRelationAggregateInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationOrderByRelationAggregateInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseOrderByRelationAggregateInputObjectSchema).optional(),
  members: z.lazy(() => MemberOrderByRelationAggregateInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorOrderByRelationAggregateInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatOrderByRelationAggregateInputObjectSchema).optional()
}).strict();


// File: UserWhereUniqueInput.schema.ts


export const UserWhereUniqueInputObjectSchema: z.ZodType<Prisma.UserWhereUniqueInput, Prisma.UserWhereUniqueInput> = z.object({
  id: z.string(),
  email: z.string(),
  username: z.string()
}).strict();
export const UserWhereUniqueInputObjectZodSchema = z.object({
  id: z.string(),
  email: z.string(),
  username: z.string()
}).strict();


// File: UserOrderByWithAggregationInput.schema.ts

export const UserOrderByWithAggregationInputObjectSchema: z.ZodType<Prisma.UserOrderByWithAggregationInput, Prisma.UserOrderByWithAggregationInput> = z.object({
  id: SortOrderSchema.optional(),
  name: SortOrderSchema.optional(),
  email: SortOrderSchema.optional(),
  emailVerified: SortOrderSchema.optional(),
  image: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional(),
  username: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  role: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  banned: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  banReason: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  banExpires: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  onboardingComplete: SortOrderSchema.optional(),
  paymentsCustomerId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  locale: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  twoFactorEnabled: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  _count: z.lazy(() => UserCountOrderByAggregateInputObjectSchema).optional(),
  _max: z.lazy(() => UserMaxOrderByAggregateInputObjectSchema).optional(),
  _min: z.lazy(() => UserMinOrderByAggregateInputObjectSchema).optional()
}).strict();
export const UserOrderByWithAggregationInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  name: SortOrderSchema.optional(),
  email: SortOrderSchema.optional(),
  emailVerified: SortOrderSchema.optional(),
  image: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional(),
  username: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  role: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  banned: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  banReason: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  banExpires: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  onboardingComplete: SortOrderSchema.optional(),
  paymentsCustomerId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  locale: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  twoFactorEnabled: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  _count: z.lazy(() => UserCountOrderByAggregateInputObjectSchema).optional(),
  _max: z.lazy(() => UserMaxOrderByAggregateInputObjectSchema).optional(),
  _min: z.lazy(() => UserMinOrderByAggregateInputObjectSchema).optional()
}).strict();


// File: UserScalarWhereWithAggregatesInput.schema.ts

export const UserScalarWhereWithAggregatesInputObjectSchema: z.ZodType<Prisma.UserScalarWhereWithAggregatesInput, Prisma.UserScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([z.lazy(() => UserScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => UserScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => UserScalarWhereWithAggregatesInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => UserScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => UserScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  name: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  email: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  emailVerified: z.union([z.lazy(() => BoolWithAggregatesFilterObjectSchema), z.boolean()]).optional(),
  image: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  username: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  role: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  banned: z.union([z.lazy(() => BoolNullableWithAggregatesFilterObjectSchema), z.boolean()]).optional().nullable(),
  banReason: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  banExpires: z.union([z.lazy(() => DateTimeNullableWithAggregatesFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional().nullable(),
  onboardingComplete: z.union([z.lazy(() => BoolWithAggregatesFilterObjectSchema), z.boolean()]).optional(),
  paymentsCustomerId: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  locale: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  twoFactorEnabled: z.union([z.lazy(() => BoolNullableWithAggregatesFilterObjectSchema), z.boolean()]).optional().nullable()
}).strict();
export const UserScalarWhereWithAggregatesInputObjectZodSchema = z.object({
  AND: z.union([z.lazy(() => UserScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => UserScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => UserScalarWhereWithAggregatesInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => UserScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => UserScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  name: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  email: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  emailVerified: z.union([z.lazy(() => BoolWithAggregatesFilterObjectSchema), z.boolean()]).optional(),
  image: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  username: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  role: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  banned: z.union([z.lazy(() => BoolNullableWithAggregatesFilterObjectSchema), z.boolean()]).optional().nullable(),
  banReason: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  banExpires: z.union([z.lazy(() => DateTimeNullableWithAggregatesFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional().nullable(),
  onboardingComplete: z.union([z.lazy(() => BoolWithAggregatesFilterObjectSchema), z.boolean()]).optional(),
  paymentsCustomerId: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  locale: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  twoFactorEnabled: z.union([z.lazy(() => BoolNullableWithAggregatesFilterObjectSchema), z.boolean()]).optional().nullable()
}).strict();


// File: SessionWhereInput.schema.ts

export const SessionWhereInputObjectSchema: z.ZodType<Prisma.SessionWhereInput, Prisma.SessionWhereInput> = z.object({
  AND: z.union([z.lazy(() => SessionWhereInputObjectSchema), z.lazy(() => SessionWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => SessionWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => SessionWhereInputObjectSchema), z.lazy(() => SessionWhereInputObjectSchema).array()]).optional(),
  expiresAt: z.union([z.lazy(() => DateTimeFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional(),
  ipAddress: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  userAgent: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  userId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  impersonatedBy: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  activeOrganizationId: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  token: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  user: z.union([z.lazy(() => UserScalarRelationFilterObjectSchema), z.lazy(() => UserWhereInputObjectSchema)]).optional()
}).strict();
export const SessionWhereInputObjectZodSchema = z.object({
  AND: z.union([z.lazy(() => SessionWhereInputObjectSchema), z.lazy(() => SessionWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => SessionWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => SessionWhereInputObjectSchema), z.lazy(() => SessionWhereInputObjectSchema).array()]).optional(),
  expiresAt: z.union([z.lazy(() => DateTimeFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional(),
  ipAddress: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  userAgent: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  userId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  impersonatedBy: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  activeOrganizationId: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  token: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  user: z.union([z.lazy(() => UserScalarRelationFilterObjectSchema), z.lazy(() => UserWhereInputObjectSchema)]).optional()
}).strict();


// File: SessionOrderByWithRelationInput.schema.ts

export const SessionOrderByWithRelationInputObjectSchema: z.ZodType<Prisma.SessionOrderByWithRelationInput, Prisma.SessionOrderByWithRelationInput> = z.object({
  id: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  ipAddress: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  userAgent: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  userId: SortOrderSchema.optional(),
  impersonatedBy: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  activeOrganizationId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  token: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional(),
  user: z.lazy(() => UserOrderByWithRelationInputObjectSchema).optional()
}).strict();
export const SessionOrderByWithRelationInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  ipAddress: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  userAgent: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  userId: SortOrderSchema.optional(),
  impersonatedBy: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  activeOrganizationId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  token: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional(),
  user: z.lazy(() => UserOrderByWithRelationInputObjectSchema).optional()
}).strict();


// File: SessionWhereUniqueInput.schema.ts


export const SessionWhereUniqueInputObjectSchema: z.ZodType<Prisma.SessionWhereUniqueInput, Prisma.SessionWhereUniqueInput> = z.object({
  id: z.string(),
  token: z.string()
}).strict();
export const SessionWhereUniqueInputObjectZodSchema = z.object({
  id: z.string(),
  token: z.string()
}).strict();


// File: SessionOrderByWithAggregationInput.schema.ts

export const SessionOrderByWithAggregationInputObjectSchema: z.ZodType<Prisma.SessionOrderByWithAggregationInput, Prisma.SessionOrderByWithAggregationInput> = z.object({
  id: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  ipAddress: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  userAgent: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  userId: SortOrderSchema.optional(),
  impersonatedBy: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  activeOrganizationId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  token: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional(),
  _count: z.lazy(() => SessionCountOrderByAggregateInputObjectSchema).optional(),
  _max: z.lazy(() => SessionMaxOrderByAggregateInputObjectSchema).optional(),
  _min: z.lazy(() => SessionMinOrderByAggregateInputObjectSchema).optional()
}).strict();
export const SessionOrderByWithAggregationInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  ipAddress: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  userAgent: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  userId: SortOrderSchema.optional(),
  impersonatedBy: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  activeOrganizationId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  token: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional(),
  _count: z.lazy(() => SessionCountOrderByAggregateInputObjectSchema).optional(),
  _max: z.lazy(() => SessionMaxOrderByAggregateInputObjectSchema).optional(),
  _min: z.lazy(() => SessionMinOrderByAggregateInputObjectSchema).optional()
}).strict();


// File: SessionScalarWhereWithAggregatesInput.schema.ts

export const SessionScalarWhereWithAggregatesInputObjectSchema: z.ZodType<Prisma.SessionScalarWhereWithAggregatesInput, Prisma.SessionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([z.lazy(() => SessionScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => SessionScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => SessionScalarWhereWithAggregatesInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => SessionScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => SessionScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  expiresAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional(),
  ipAddress: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  userAgent: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  userId: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  impersonatedBy: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  activeOrganizationId: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  token: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional()
}).strict();
export const SessionScalarWhereWithAggregatesInputObjectZodSchema = z.object({
  AND: z.union([z.lazy(() => SessionScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => SessionScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => SessionScalarWhereWithAggregatesInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => SessionScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => SessionScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  expiresAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional(),
  ipAddress: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  userAgent: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  userId: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  impersonatedBy: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  activeOrganizationId: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  token: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional()
}).strict();


// File: AccountWhereInput.schema.ts

export const AccountWhereInputObjectSchema: z.ZodType<Prisma.AccountWhereInput, Prisma.AccountWhereInput> = z.object({
  AND: z.union([z.lazy(() => AccountWhereInputObjectSchema), z.lazy(() => AccountWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => AccountWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => AccountWhereInputObjectSchema), z.lazy(() => AccountWhereInputObjectSchema).array()]).optional(),
  accountId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  providerId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  accessToken: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  refreshToken: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  idToken: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  expiresAt: z.union([z.lazy(() => DateTimeNullableFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional().nullable(),
  password: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.lazy(() => DateTimeNullableFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.lazy(() => DateTimeNullableFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional().nullable(),
  scope: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  user: z.union([z.lazy(() => UserScalarRelationFilterObjectSchema), z.lazy(() => UserWhereInputObjectSchema)]).optional()
}).strict();
export const AccountWhereInputObjectZodSchema = z.object({
  AND: z.union([z.lazy(() => AccountWhereInputObjectSchema), z.lazy(() => AccountWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => AccountWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => AccountWhereInputObjectSchema), z.lazy(() => AccountWhereInputObjectSchema).array()]).optional(),
  accountId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  providerId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  accessToken: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  refreshToken: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  idToken: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  expiresAt: z.union([z.lazy(() => DateTimeNullableFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional().nullable(),
  password: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.lazy(() => DateTimeNullableFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.lazy(() => DateTimeNullableFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional().nullable(),
  scope: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  user: z.union([z.lazy(() => UserScalarRelationFilterObjectSchema), z.lazy(() => UserWhereInputObjectSchema)]).optional()
}).strict();


// File: AccountOrderByWithRelationInput.schema.ts

export const AccountOrderByWithRelationInputObjectSchema: z.ZodType<Prisma.AccountOrderByWithRelationInput, Prisma.AccountOrderByWithRelationInput> = z.object({
  id: SortOrderSchema.optional(),
  accountId: SortOrderSchema.optional(),
  providerId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  accessToken: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  refreshToken: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  idToken: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  expiresAt: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  password: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  accessTokenExpiresAt: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  refreshTokenExpiresAt: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  scope: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional(),
  user: z.lazy(() => UserOrderByWithRelationInputObjectSchema).optional()
}).strict();
export const AccountOrderByWithRelationInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  accountId: SortOrderSchema.optional(),
  providerId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  accessToken: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  refreshToken: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  idToken: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  expiresAt: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  password: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  accessTokenExpiresAt: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  refreshTokenExpiresAt: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  scope: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional(),
  user: z.lazy(() => UserOrderByWithRelationInputObjectSchema).optional()
}).strict();


// File: AccountWhereUniqueInput.schema.ts


export const AccountWhereUniqueInputObjectSchema: z.ZodType<Prisma.AccountWhereUniqueInput, Prisma.AccountWhereUniqueInput> = z.object({
  id: z.string()
}).strict();
export const AccountWhereUniqueInputObjectZodSchema = z.object({
  id: z.string()
}).strict();


// File: AccountOrderByWithAggregationInput.schema.ts

export const AccountOrderByWithAggregationInputObjectSchema: z.ZodType<Prisma.AccountOrderByWithAggregationInput, Prisma.AccountOrderByWithAggregationInput> = z.object({
  id: SortOrderSchema.optional(),
  accountId: SortOrderSchema.optional(),
  providerId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  accessToken: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  refreshToken: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  idToken: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  expiresAt: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  password: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  accessTokenExpiresAt: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  refreshTokenExpiresAt: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  scope: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional(),
  _count: z.lazy(() => AccountCountOrderByAggregateInputObjectSchema).optional(),
  _max: z.lazy(() => AccountMaxOrderByAggregateInputObjectSchema).optional(),
  _min: z.lazy(() => AccountMinOrderByAggregateInputObjectSchema).optional()
}).strict();
export const AccountOrderByWithAggregationInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  accountId: SortOrderSchema.optional(),
  providerId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  accessToken: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  refreshToken: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  idToken: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  expiresAt: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  password: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  accessTokenExpiresAt: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  refreshTokenExpiresAt: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  scope: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional(),
  _count: z.lazy(() => AccountCountOrderByAggregateInputObjectSchema).optional(),
  _max: z.lazy(() => AccountMaxOrderByAggregateInputObjectSchema).optional(),
  _min: z.lazy(() => AccountMinOrderByAggregateInputObjectSchema).optional()
}).strict();


// File: AccountScalarWhereWithAggregatesInput.schema.ts

export const AccountScalarWhereWithAggregatesInputObjectSchema: z.ZodType<Prisma.AccountScalarWhereWithAggregatesInput, Prisma.AccountScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([z.lazy(() => AccountScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => AccountScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => AccountScalarWhereWithAggregatesInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => AccountScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => AccountScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  accountId: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  providerId: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  accessToken: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  refreshToken: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  idToken: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  expiresAt: z.union([z.lazy(() => DateTimeNullableWithAggregatesFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional().nullable(),
  password: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.lazy(() => DateTimeNullableWithAggregatesFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.lazy(() => DateTimeNullableWithAggregatesFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional().nullable(),
  scope: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable()
}).strict();
export const AccountScalarWhereWithAggregatesInputObjectZodSchema = z.object({
  AND: z.union([z.lazy(() => AccountScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => AccountScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => AccountScalarWhereWithAggregatesInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => AccountScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => AccountScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  accountId: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  providerId: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  accessToken: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  refreshToken: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  idToken: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  expiresAt: z.union([z.lazy(() => DateTimeNullableWithAggregatesFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional().nullable(),
  password: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.lazy(() => DateTimeNullableWithAggregatesFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.lazy(() => DateTimeNullableWithAggregatesFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional().nullable(),
  scope: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable()
}).strict();


// File: VerificationWhereInput.schema.ts

export const VerificationWhereInputObjectSchema: z.ZodType<Prisma.VerificationWhereInput, Prisma.VerificationWhereInput> = z.object({
  AND: z.union([z.lazy(() => VerificationWhereInputObjectSchema), z.lazy(() => VerificationWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => VerificationWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => VerificationWhereInputObjectSchema), z.lazy(() => VerificationWhereInputObjectSchema).array()]).optional(),
  identifier: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  value: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  expiresAt: z.union([z.lazy(() => DateTimeFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional()
}).strict();
export const VerificationWhereInputObjectZodSchema = z.object({
  AND: z.union([z.lazy(() => VerificationWhereInputObjectSchema), z.lazy(() => VerificationWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => VerificationWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => VerificationWhereInputObjectSchema), z.lazy(() => VerificationWhereInputObjectSchema).array()]).optional(),
  identifier: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  value: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  expiresAt: z.union([z.lazy(() => DateTimeFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional()
}).strict();


// File: VerificationOrderByWithRelationInput.schema.ts

export const VerificationOrderByWithRelationInputObjectSchema: z.ZodType<Prisma.VerificationOrderByWithRelationInput, Prisma.VerificationOrderByWithRelationInput> = z.object({
  id: SortOrderSchema.optional(),
  identifier: SortOrderSchema.optional(),
  value: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  createdAt: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  updatedAt: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional()
}).strict();
export const VerificationOrderByWithRelationInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  identifier: SortOrderSchema.optional(),
  value: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  createdAt: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  updatedAt: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional()
}).strict();


// File: VerificationWhereUniqueInput.schema.ts


export const VerificationWhereUniqueInputObjectSchema: z.ZodType<Prisma.VerificationWhereUniqueInput, Prisma.VerificationWhereUniqueInput> = z.object({
  id: z.string()
}).strict();
export const VerificationWhereUniqueInputObjectZodSchema = z.object({
  id: z.string()
}).strict();


// File: VerificationOrderByWithAggregationInput.schema.ts

export const VerificationOrderByWithAggregationInputObjectSchema: z.ZodType<Prisma.VerificationOrderByWithAggregationInput, Prisma.VerificationOrderByWithAggregationInput> = z.object({
  id: SortOrderSchema.optional(),
  identifier: SortOrderSchema.optional(),
  value: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  createdAt: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  updatedAt: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  _count: z.lazy(() => VerificationCountOrderByAggregateInputObjectSchema).optional(),
  _max: z.lazy(() => VerificationMaxOrderByAggregateInputObjectSchema).optional(),
  _min: z.lazy(() => VerificationMinOrderByAggregateInputObjectSchema).optional()
}).strict();
export const VerificationOrderByWithAggregationInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  identifier: SortOrderSchema.optional(),
  value: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  createdAt: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  updatedAt: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  _count: z.lazy(() => VerificationCountOrderByAggregateInputObjectSchema).optional(),
  _max: z.lazy(() => VerificationMaxOrderByAggregateInputObjectSchema).optional(),
  _min: z.lazy(() => VerificationMinOrderByAggregateInputObjectSchema).optional()
}).strict();


// File: VerificationScalarWhereWithAggregatesInput.schema.ts

export const VerificationScalarWhereWithAggregatesInputObjectSchema: z.ZodType<Prisma.VerificationScalarWhereWithAggregatesInput, Prisma.VerificationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([z.lazy(() => VerificationScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => VerificationScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => VerificationScalarWhereWithAggregatesInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => VerificationScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => VerificationScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  identifier: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  value: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  expiresAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional()
}).strict();
export const VerificationScalarWhereWithAggregatesInputObjectZodSchema = z.object({
  AND: z.union([z.lazy(() => VerificationScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => VerificationScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => VerificationScalarWhereWithAggregatesInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => VerificationScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => VerificationScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  identifier: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  value: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  expiresAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional()
}).strict();


// File: PasskeyWhereInput.schema.ts

export const PasskeyWhereInputObjectSchema: z.ZodType<Prisma.PasskeyWhereInput, Prisma.PasskeyWhereInput> = z.object({
  AND: z.union([z.lazy(() => PasskeyWhereInputObjectSchema), z.lazy(() => PasskeyWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => PasskeyWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => PasskeyWhereInputObjectSchema), z.lazy(() => PasskeyWhereInputObjectSchema).array()]).optional(),
  name: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  publicKey: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  credentialID: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  counter: z.union([z.lazy(() => IntFilterObjectSchema), z.number().int()]).optional(),
  deviceType: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  backedUp: z.union([z.lazy(() => BoolFilterObjectSchema), z.boolean()]).optional(),
  transports: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  user: z.union([z.lazy(() => UserScalarRelationFilterObjectSchema), z.lazy(() => UserWhereInputObjectSchema)]).optional()
}).strict();
export const PasskeyWhereInputObjectZodSchema = z.object({
  AND: z.union([z.lazy(() => PasskeyWhereInputObjectSchema), z.lazy(() => PasskeyWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => PasskeyWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => PasskeyWhereInputObjectSchema), z.lazy(() => PasskeyWhereInputObjectSchema).array()]).optional(),
  name: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  publicKey: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  credentialID: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  counter: z.union([z.lazy(() => IntFilterObjectSchema), z.number().int()]).optional(),
  deviceType: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  backedUp: z.union([z.lazy(() => BoolFilterObjectSchema), z.boolean()]).optional(),
  transports: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  user: z.union([z.lazy(() => UserScalarRelationFilterObjectSchema), z.lazy(() => UserWhereInputObjectSchema)]).optional()
}).strict();


// File: PasskeyOrderByWithRelationInput.schema.ts

export const PasskeyOrderByWithRelationInputObjectSchema: z.ZodType<Prisma.PasskeyOrderByWithRelationInput, Prisma.PasskeyOrderByWithRelationInput> = z.object({
  id: SortOrderSchema.optional(),
  name: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  publicKey: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  credentialID: SortOrderSchema.optional(),
  counter: SortOrderSchema.optional(),
  deviceType: SortOrderSchema.optional(),
  backedUp: SortOrderSchema.optional(),
  transports: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  createdAt: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputObjectSchema).optional()
}).strict();
export const PasskeyOrderByWithRelationInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  name: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  publicKey: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  credentialID: SortOrderSchema.optional(),
  counter: SortOrderSchema.optional(),
  deviceType: SortOrderSchema.optional(),
  backedUp: SortOrderSchema.optional(),
  transports: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  createdAt: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputObjectSchema).optional()
}).strict();


// File: PasskeyWhereUniqueInput.schema.ts


export const PasskeyWhereUniqueInputObjectSchema: z.ZodType<Prisma.PasskeyWhereUniqueInput, Prisma.PasskeyWhereUniqueInput> = z.object({
  id: z.string()
}).strict();
export const PasskeyWhereUniqueInputObjectZodSchema = z.object({
  id: z.string()
}).strict();


// File: PasskeyOrderByWithAggregationInput.schema.ts

export const PasskeyOrderByWithAggregationInputObjectSchema: z.ZodType<Prisma.PasskeyOrderByWithAggregationInput, Prisma.PasskeyOrderByWithAggregationInput> = z.object({
  id: SortOrderSchema.optional(),
  name: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  publicKey: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  credentialID: SortOrderSchema.optional(),
  counter: SortOrderSchema.optional(),
  deviceType: SortOrderSchema.optional(),
  backedUp: SortOrderSchema.optional(),
  transports: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  createdAt: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  _count: z.lazy(() => PasskeyCountOrderByAggregateInputObjectSchema).optional(),
  _avg: z.lazy(() => PasskeyAvgOrderByAggregateInputObjectSchema).optional(),
  _max: z.lazy(() => PasskeyMaxOrderByAggregateInputObjectSchema).optional(),
  _min: z.lazy(() => PasskeyMinOrderByAggregateInputObjectSchema).optional(),
  _sum: z.lazy(() => PasskeySumOrderByAggregateInputObjectSchema).optional()
}).strict();
export const PasskeyOrderByWithAggregationInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  name: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  publicKey: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  credentialID: SortOrderSchema.optional(),
  counter: SortOrderSchema.optional(),
  deviceType: SortOrderSchema.optional(),
  backedUp: SortOrderSchema.optional(),
  transports: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  createdAt: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  _count: z.lazy(() => PasskeyCountOrderByAggregateInputObjectSchema).optional(),
  _avg: z.lazy(() => PasskeyAvgOrderByAggregateInputObjectSchema).optional(),
  _max: z.lazy(() => PasskeyMaxOrderByAggregateInputObjectSchema).optional(),
  _min: z.lazy(() => PasskeyMinOrderByAggregateInputObjectSchema).optional(),
  _sum: z.lazy(() => PasskeySumOrderByAggregateInputObjectSchema).optional()
}).strict();


// File: PasskeyScalarWhereWithAggregatesInput.schema.ts

export const PasskeyScalarWhereWithAggregatesInputObjectSchema: z.ZodType<Prisma.PasskeyScalarWhereWithAggregatesInput, Prisma.PasskeyScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([z.lazy(() => PasskeyScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => PasskeyScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => PasskeyScalarWhereWithAggregatesInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => PasskeyScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => PasskeyScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  name: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  publicKey: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  credentialID: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  counter: z.union([z.lazy(() => IntWithAggregatesFilterObjectSchema), z.number().int()]).optional(),
  deviceType: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  backedUp: z.union([z.lazy(() => BoolWithAggregatesFilterObjectSchema), z.boolean()]).optional(),
  transports: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable()
}).strict();
export const PasskeyScalarWhereWithAggregatesInputObjectZodSchema = z.object({
  AND: z.union([z.lazy(() => PasskeyScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => PasskeyScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => PasskeyScalarWhereWithAggregatesInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => PasskeyScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => PasskeyScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  name: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  publicKey: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  credentialID: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  counter: z.union([z.lazy(() => IntWithAggregatesFilterObjectSchema), z.number().int()]).optional(),
  deviceType: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  backedUp: z.union([z.lazy(() => BoolWithAggregatesFilterObjectSchema), z.boolean()]).optional(),
  transports: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable()
}).strict();


// File: TwoFactorWhereInput.schema.ts

export const TwoFactorWhereInputObjectSchema: z.ZodType<Prisma.TwoFactorWhereInput, Prisma.TwoFactorWhereInput> = z.object({
  AND: z.union([z.lazy(() => TwoFactorWhereInputObjectSchema), z.lazy(() => TwoFactorWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => TwoFactorWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => TwoFactorWhereInputObjectSchema), z.lazy(() => TwoFactorWhereInputObjectSchema).array()]).optional(),
  secret: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  backupCodes: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  user: z.union([z.lazy(() => UserScalarRelationFilterObjectSchema), z.lazy(() => UserWhereInputObjectSchema)]).optional()
}).strict();
export const TwoFactorWhereInputObjectZodSchema = z.object({
  AND: z.union([z.lazy(() => TwoFactorWhereInputObjectSchema), z.lazy(() => TwoFactorWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => TwoFactorWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => TwoFactorWhereInputObjectSchema), z.lazy(() => TwoFactorWhereInputObjectSchema).array()]).optional(),
  secret: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  backupCodes: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  user: z.union([z.lazy(() => UserScalarRelationFilterObjectSchema), z.lazy(() => UserWhereInputObjectSchema)]).optional()
}).strict();


// File: TwoFactorOrderByWithRelationInput.schema.ts

export const TwoFactorOrderByWithRelationInputObjectSchema: z.ZodType<Prisma.TwoFactorOrderByWithRelationInput, Prisma.TwoFactorOrderByWithRelationInput> = z.object({
  id: SortOrderSchema.optional(),
  secret: SortOrderSchema.optional(),
  backupCodes: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  user: z.lazy(() => UserOrderByWithRelationInputObjectSchema).optional()
}).strict();
export const TwoFactorOrderByWithRelationInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  secret: SortOrderSchema.optional(),
  backupCodes: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  user: z.lazy(() => UserOrderByWithRelationInputObjectSchema).optional()
}).strict();


// File: TwoFactorWhereUniqueInput.schema.ts


export const TwoFactorWhereUniqueInputObjectSchema: z.ZodType<Prisma.TwoFactorWhereUniqueInput, Prisma.TwoFactorWhereUniqueInput> = z.object({
  id: z.string()
}).strict();
export const TwoFactorWhereUniqueInputObjectZodSchema = z.object({
  id: z.string()
}).strict();


// File: TwoFactorOrderByWithAggregationInput.schema.ts

export const TwoFactorOrderByWithAggregationInputObjectSchema: z.ZodType<Prisma.TwoFactorOrderByWithAggregationInput, Prisma.TwoFactorOrderByWithAggregationInput> = z.object({
  id: SortOrderSchema.optional(),
  secret: SortOrderSchema.optional(),
  backupCodes: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  _count: z.lazy(() => TwoFactorCountOrderByAggregateInputObjectSchema).optional(),
  _max: z.lazy(() => TwoFactorMaxOrderByAggregateInputObjectSchema).optional(),
  _min: z.lazy(() => TwoFactorMinOrderByAggregateInputObjectSchema).optional()
}).strict();
export const TwoFactorOrderByWithAggregationInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  secret: SortOrderSchema.optional(),
  backupCodes: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  _count: z.lazy(() => TwoFactorCountOrderByAggregateInputObjectSchema).optional(),
  _max: z.lazy(() => TwoFactorMaxOrderByAggregateInputObjectSchema).optional(),
  _min: z.lazy(() => TwoFactorMinOrderByAggregateInputObjectSchema).optional()
}).strict();


// File: TwoFactorScalarWhereWithAggregatesInput.schema.ts

export const TwoFactorScalarWhereWithAggregatesInputObjectSchema: z.ZodType<Prisma.TwoFactorScalarWhereWithAggregatesInput, Prisma.TwoFactorScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([z.lazy(() => TwoFactorScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => TwoFactorScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => TwoFactorScalarWhereWithAggregatesInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => TwoFactorScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => TwoFactorScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  secret: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  backupCodes: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional()
}).strict();
export const TwoFactorScalarWhereWithAggregatesInputObjectZodSchema = z.object({
  AND: z.union([z.lazy(() => TwoFactorScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => TwoFactorScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => TwoFactorScalarWhereWithAggregatesInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => TwoFactorScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => TwoFactorScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  secret: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  backupCodes: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional()
}).strict();


// File: OrganizationWhereInput.schema.ts

export const OrganizationWhereInputObjectSchema: z.ZodType<Prisma.OrganizationWhereInput, Prisma.OrganizationWhereInput> = z.object({
  AND: z.union([z.lazy(() => OrganizationWhereInputObjectSchema), z.lazy(() => OrganizationWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => OrganizationWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => OrganizationWhereInputObjectSchema), z.lazy(() => OrganizationWhereInputObjectSchema).array()]).optional(),
  name: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  slug: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  logo: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  metadata: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  paymentsCustomerId: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  members: z.lazy(() => MemberListRelationFilterObjectSchema).optional(),
  invitations: z.lazy(() => InvitationListRelationFilterObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseListRelationFilterObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatListRelationFilterObjectSchema).optional()
}).strict();
export const OrganizationWhereInputObjectZodSchema = z.object({
  AND: z.union([z.lazy(() => OrganizationWhereInputObjectSchema), z.lazy(() => OrganizationWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => OrganizationWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => OrganizationWhereInputObjectSchema), z.lazy(() => OrganizationWhereInputObjectSchema).array()]).optional(),
  name: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  slug: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  logo: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  metadata: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  paymentsCustomerId: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  members: z.lazy(() => MemberListRelationFilterObjectSchema).optional(),
  invitations: z.lazy(() => InvitationListRelationFilterObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseListRelationFilterObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatListRelationFilterObjectSchema).optional()
}).strict();


// File: OrganizationOrderByWithRelationInput.schema.ts

export const OrganizationOrderByWithRelationInputObjectSchema: z.ZodType<Prisma.OrganizationOrderByWithRelationInput, Prisma.OrganizationOrderByWithRelationInput> = z.object({
  id: SortOrderSchema.optional(),
  name: SortOrderSchema.optional(),
  slug: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  logo: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  createdAt: SortOrderSchema.optional(),
  metadata: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  members: z.lazy(() => MemberOrderByRelationAggregateInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationOrderByRelationAggregateInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseOrderByRelationAggregateInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatOrderByRelationAggregateInputObjectSchema).optional()
}).strict();
export const OrganizationOrderByWithRelationInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  name: SortOrderSchema.optional(),
  slug: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  logo: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  createdAt: SortOrderSchema.optional(),
  metadata: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  members: z.lazy(() => MemberOrderByRelationAggregateInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationOrderByRelationAggregateInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseOrderByRelationAggregateInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatOrderByRelationAggregateInputObjectSchema).optional()
}).strict();


// File: OrganizationWhereUniqueInput.schema.ts


export const OrganizationWhereUniqueInputObjectSchema: z.ZodType<Prisma.OrganizationWhereUniqueInput, Prisma.OrganizationWhereUniqueInput> = z.object({
  id: z.string(),
  slug: z.string()
}).strict();
export const OrganizationWhereUniqueInputObjectZodSchema = z.object({
  id: z.string(),
  slug: z.string()
}).strict();


// File: OrganizationOrderByWithAggregationInput.schema.ts

export const OrganizationOrderByWithAggregationInputObjectSchema: z.ZodType<Prisma.OrganizationOrderByWithAggregationInput, Prisma.OrganizationOrderByWithAggregationInput> = z.object({
  id: SortOrderSchema.optional(),
  name: SortOrderSchema.optional(),
  slug: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  logo: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  createdAt: SortOrderSchema.optional(),
  metadata: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  _count: z.lazy(() => OrganizationCountOrderByAggregateInputObjectSchema).optional(),
  _max: z.lazy(() => OrganizationMaxOrderByAggregateInputObjectSchema).optional(),
  _min: z.lazy(() => OrganizationMinOrderByAggregateInputObjectSchema).optional()
}).strict();
export const OrganizationOrderByWithAggregationInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  name: SortOrderSchema.optional(),
  slug: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  logo: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  createdAt: SortOrderSchema.optional(),
  metadata: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  _count: z.lazy(() => OrganizationCountOrderByAggregateInputObjectSchema).optional(),
  _max: z.lazy(() => OrganizationMaxOrderByAggregateInputObjectSchema).optional(),
  _min: z.lazy(() => OrganizationMinOrderByAggregateInputObjectSchema).optional()
}).strict();


// File: OrganizationScalarWhereWithAggregatesInput.schema.ts

export const OrganizationScalarWhereWithAggregatesInputObjectSchema: z.ZodType<Prisma.OrganizationScalarWhereWithAggregatesInput, Prisma.OrganizationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([z.lazy(() => OrganizationScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => OrganizationScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => OrganizationScalarWhereWithAggregatesInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => OrganizationScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => OrganizationScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  name: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  slug: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  logo: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  metadata: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  paymentsCustomerId: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable()
}).strict();
export const OrganizationScalarWhereWithAggregatesInputObjectZodSchema = z.object({
  AND: z.union([z.lazy(() => OrganizationScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => OrganizationScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => OrganizationScalarWhereWithAggregatesInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => OrganizationScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => OrganizationScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  name: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  slug: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  logo: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  metadata: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  paymentsCustomerId: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable()
}).strict();


// File: MemberWhereInput.schema.ts

export const MemberWhereInputObjectSchema: z.ZodType<Prisma.MemberWhereInput, Prisma.MemberWhereInput> = z.object({
  AND: z.union([z.lazy(() => MemberWhereInputObjectSchema), z.lazy(() => MemberWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => MemberWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => MemberWhereInputObjectSchema), z.lazy(() => MemberWhereInputObjectSchema).array()]).optional(),
  organizationId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  role: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  organization: z.union([z.lazy(() => OrganizationScalarRelationFilterObjectSchema), z.lazy(() => OrganizationWhereInputObjectSchema)]).optional(),
  user: z.union([z.lazy(() => UserScalarRelationFilterObjectSchema), z.lazy(() => UserWhereInputObjectSchema)]).optional()
}).strict();
export const MemberWhereInputObjectZodSchema = z.object({
  AND: z.union([z.lazy(() => MemberWhereInputObjectSchema), z.lazy(() => MemberWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => MemberWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => MemberWhereInputObjectSchema), z.lazy(() => MemberWhereInputObjectSchema).array()]).optional(),
  organizationId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  role: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  organization: z.union([z.lazy(() => OrganizationScalarRelationFilterObjectSchema), z.lazy(() => OrganizationWhereInputObjectSchema)]).optional(),
  user: z.union([z.lazy(() => UserScalarRelationFilterObjectSchema), z.lazy(() => UserWhereInputObjectSchema)]).optional()
}).strict();


// File: MemberOrderByWithRelationInput.schema.ts

export const MemberOrderByWithRelationInputObjectSchema: z.ZodType<Prisma.MemberOrderByWithRelationInput, Prisma.MemberOrderByWithRelationInput> = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  role: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputObjectSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputObjectSchema).optional()
}).strict();
export const MemberOrderByWithRelationInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  role: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputObjectSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputObjectSchema).optional()
}).strict();


// File: MemberWhereUniqueInput.schema.ts

export const MemberWhereUniqueInputObjectSchema: z.ZodType<Prisma.MemberWhereUniqueInput, Prisma.MemberWhereUniqueInput> = z.object({
  id: z.string(),
  organizationId_userId: z.lazy(() => MemberOrganizationIdUserIdCompoundUniqueInputObjectSchema)
}).strict();
export const MemberWhereUniqueInputObjectZodSchema = z.object({
  id: z.string(),
  organizationId_userId: z.lazy(() => MemberOrganizationIdUserIdCompoundUniqueInputObjectSchema)
}).strict();


// File: MemberOrderByWithAggregationInput.schema.ts

export const MemberOrderByWithAggregationInputObjectSchema: z.ZodType<Prisma.MemberOrderByWithAggregationInput, Prisma.MemberOrderByWithAggregationInput> = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  role: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  _count: z.lazy(() => MemberCountOrderByAggregateInputObjectSchema).optional(),
  _max: z.lazy(() => MemberMaxOrderByAggregateInputObjectSchema).optional(),
  _min: z.lazy(() => MemberMinOrderByAggregateInputObjectSchema).optional()
}).strict();
export const MemberOrderByWithAggregationInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  role: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  _count: z.lazy(() => MemberCountOrderByAggregateInputObjectSchema).optional(),
  _max: z.lazy(() => MemberMaxOrderByAggregateInputObjectSchema).optional(),
  _min: z.lazy(() => MemberMinOrderByAggregateInputObjectSchema).optional()
}).strict();


// File: MemberScalarWhereWithAggregatesInput.schema.ts

export const MemberScalarWhereWithAggregatesInputObjectSchema: z.ZodType<Prisma.MemberScalarWhereWithAggregatesInput, Prisma.MemberScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([z.lazy(() => MemberScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => MemberScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => MemberScalarWhereWithAggregatesInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => MemberScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => MemberScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  organizationId: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  role: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional()
}).strict();
export const MemberScalarWhereWithAggregatesInputObjectZodSchema = z.object({
  AND: z.union([z.lazy(() => MemberScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => MemberScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => MemberScalarWhereWithAggregatesInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => MemberScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => MemberScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  organizationId: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  role: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional()
}).strict();


// File: InvitationWhereInput.schema.ts

export const InvitationWhereInputObjectSchema: z.ZodType<Prisma.InvitationWhereInput, Prisma.InvitationWhereInput> = z.object({
  AND: z.union([z.lazy(() => InvitationWhereInputObjectSchema), z.lazy(() => InvitationWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => InvitationWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => InvitationWhereInputObjectSchema), z.lazy(() => InvitationWhereInputObjectSchema).array()]).optional(),
  organizationId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  email: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  role: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  status: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  expiresAt: z.union([z.lazy(() => DateTimeFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional(),
  inviterId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  organization: z.union([z.lazy(() => OrganizationScalarRelationFilterObjectSchema), z.lazy(() => OrganizationWhereInputObjectSchema)]).optional(),
  user: z.union([z.lazy(() => UserScalarRelationFilterObjectSchema), z.lazy(() => UserWhereInputObjectSchema)]).optional()
}).strict();
export const InvitationWhereInputObjectZodSchema = z.object({
  AND: z.union([z.lazy(() => InvitationWhereInputObjectSchema), z.lazy(() => InvitationWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => InvitationWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => InvitationWhereInputObjectSchema), z.lazy(() => InvitationWhereInputObjectSchema).array()]).optional(),
  organizationId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  email: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  role: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  status: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  expiresAt: z.union([z.lazy(() => DateTimeFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional(),
  inviterId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  organization: z.union([z.lazy(() => OrganizationScalarRelationFilterObjectSchema), z.lazy(() => OrganizationWhereInputObjectSchema)]).optional(),
  user: z.union([z.lazy(() => UserScalarRelationFilterObjectSchema), z.lazy(() => UserWhereInputObjectSchema)]).optional()
}).strict();


// File: InvitationOrderByWithRelationInput.schema.ts

export const InvitationOrderByWithRelationInputObjectSchema: z.ZodType<Prisma.InvitationOrderByWithRelationInput, Prisma.InvitationOrderByWithRelationInput> = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  email: SortOrderSchema.optional(),
  role: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  status: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  inviterId: SortOrderSchema.optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputObjectSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputObjectSchema).optional()
}).strict();
export const InvitationOrderByWithRelationInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  email: SortOrderSchema.optional(),
  role: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  status: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  inviterId: SortOrderSchema.optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputObjectSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputObjectSchema).optional()
}).strict();


// File: InvitationWhereUniqueInput.schema.ts


export const InvitationWhereUniqueInputObjectSchema: z.ZodType<Prisma.InvitationWhereUniqueInput, Prisma.InvitationWhereUniqueInput> = z.object({
  id: z.string()
}).strict();
export const InvitationWhereUniqueInputObjectZodSchema = z.object({
  id: z.string()
}).strict();


// File: InvitationOrderByWithAggregationInput.schema.ts

export const InvitationOrderByWithAggregationInputObjectSchema: z.ZodType<Prisma.InvitationOrderByWithAggregationInput, Prisma.InvitationOrderByWithAggregationInput> = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  email: SortOrderSchema.optional(),
  role: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  status: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  inviterId: SortOrderSchema.optional(),
  _count: z.lazy(() => InvitationCountOrderByAggregateInputObjectSchema).optional(),
  _max: z.lazy(() => InvitationMaxOrderByAggregateInputObjectSchema).optional(),
  _min: z.lazy(() => InvitationMinOrderByAggregateInputObjectSchema).optional()
}).strict();
export const InvitationOrderByWithAggregationInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  email: SortOrderSchema.optional(),
  role: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  status: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  inviterId: SortOrderSchema.optional(),
  _count: z.lazy(() => InvitationCountOrderByAggregateInputObjectSchema).optional(),
  _max: z.lazy(() => InvitationMaxOrderByAggregateInputObjectSchema).optional(),
  _min: z.lazy(() => InvitationMinOrderByAggregateInputObjectSchema).optional()
}).strict();


// File: InvitationScalarWhereWithAggregatesInput.schema.ts

export const InvitationScalarWhereWithAggregatesInputObjectSchema: z.ZodType<Prisma.InvitationScalarWhereWithAggregatesInput, Prisma.InvitationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([z.lazy(() => InvitationScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => InvitationScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => InvitationScalarWhereWithAggregatesInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => InvitationScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => InvitationScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  organizationId: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  email: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  role: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  status: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  expiresAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional(),
  inviterId: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional()
}).strict();
export const InvitationScalarWhereWithAggregatesInputObjectZodSchema = z.object({
  AND: z.union([z.lazy(() => InvitationScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => InvitationScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => InvitationScalarWhereWithAggregatesInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => InvitationScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => InvitationScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  organizationId: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  email: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  role: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  status: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  expiresAt: z.union([z.lazy(() => DateTimeWithAggregatesFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional(),
  inviterId: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional()
}).strict();


// File: PurchaseWhereInput.schema.ts

export const PurchaseWhereInputObjectSchema: z.ZodType<Prisma.PurchaseWhereInput, Prisma.PurchaseWhereInput> = z.object({
  AND: z.union([z.lazy(() => PurchaseWhereInputObjectSchema), z.lazy(() => PurchaseWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => PurchaseWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => PurchaseWhereInputObjectSchema), z.lazy(() => PurchaseWhereInputObjectSchema).array()]).optional(),
  organizationId: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  userId: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  type: z.union([z.lazy(() => EnumPurchaseTypeFilterObjectSchema), PurchaseTypeSchema]).optional(),
  customerId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  subscriptionId: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  productId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  status: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  organization: z.union([z.lazy(() => OrganizationNullableScalarRelationFilterObjectSchema), z.lazy(() => OrganizationWhereInputObjectSchema)]).optional().nullable(),
  user: z.union([z.lazy(() => UserNullableScalarRelationFilterObjectSchema), z.lazy(() => UserWhereInputObjectSchema)]).optional().nullable()
}).strict();
export const PurchaseWhereInputObjectZodSchema = z.object({
  AND: z.union([z.lazy(() => PurchaseWhereInputObjectSchema), z.lazy(() => PurchaseWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => PurchaseWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => PurchaseWhereInputObjectSchema), z.lazy(() => PurchaseWhereInputObjectSchema).array()]).optional(),
  organizationId: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  userId: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  type: z.union([z.lazy(() => EnumPurchaseTypeFilterObjectSchema), PurchaseTypeSchema]).optional(),
  customerId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  subscriptionId: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  productId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  status: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  organization: z.union([z.lazy(() => OrganizationNullableScalarRelationFilterObjectSchema), z.lazy(() => OrganizationWhereInputObjectSchema)]).optional().nullable(),
  user: z.union([z.lazy(() => UserNullableScalarRelationFilterObjectSchema), z.lazy(() => UserWhereInputObjectSchema)]).optional().nullable()
}).strict();


// File: PurchaseOrderByWithRelationInput.schema.ts

export const PurchaseOrderByWithRelationInputObjectSchema: z.ZodType<Prisma.PurchaseOrderByWithRelationInput, Prisma.PurchaseOrderByWithRelationInput> = z.object({
  id: SortOrderSchema.optional(),
  organizationId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  userId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  type: SortOrderSchema.optional(),
  customerId: SortOrderSchema.optional(),
  subscriptionId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  productId: SortOrderSchema.optional(),
  status: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputObjectSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputObjectSchema).optional()
}).strict();
export const PurchaseOrderByWithRelationInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  organizationId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  userId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  type: SortOrderSchema.optional(),
  customerId: SortOrderSchema.optional(),
  subscriptionId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  productId: SortOrderSchema.optional(),
  status: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputObjectSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputObjectSchema).optional()
}).strict();


// File: PurchaseWhereUniqueInput.schema.ts


export const PurchaseWhereUniqueInputObjectSchema: z.ZodType<Prisma.PurchaseWhereUniqueInput, Prisma.PurchaseWhereUniqueInput> = z.object({
  id: z.string(),
  subscriptionId: z.string()
}).strict();
export const PurchaseWhereUniqueInputObjectZodSchema = z.object({
  id: z.string(),
  subscriptionId: z.string()
}).strict();


// File: PurchaseOrderByWithAggregationInput.schema.ts

export const PurchaseOrderByWithAggregationInputObjectSchema: z.ZodType<Prisma.PurchaseOrderByWithAggregationInput, Prisma.PurchaseOrderByWithAggregationInput> = z.object({
  id: SortOrderSchema.optional(),
  organizationId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  userId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  type: SortOrderSchema.optional(),
  customerId: SortOrderSchema.optional(),
  subscriptionId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  productId: SortOrderSchema.optional(),
  status: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional(),
  _count: z.lazy(() => PurchaseCountOrderByAggregateInputObjectSchema).optional(),
  _max: z.lazy(() => PurchaseMaxOrderByAggregateInputObjectSchema).optional(),
  _min: z.lazy(() => PurchaseMinOrderByAggregateInputObjectSchema).optional()
}).strict();
export const PurchaseOrderByWithAggregationInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  organizationId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  userId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  type: SortOrderSchema.optional(),
  customerId: SortOrderSchema.optional(),
  subscriptionId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  productId: SortOrderSchema.optional(),
  status: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional(),
  _count: z.lazy(() => PurchaseCountOrderByAggregateInputObjectSchema).optional(),
  _max: z.lazy(() => PurchaseMaxOrderByAggregateInputObjectSchema).optional(),
  _min: z.lazy(() => PurchaseMinOrderByAggregateInputObjectSchema).optional()
}).strict();


// File: PurchaseScalarWhereWithAggregatesInput.schema.ts

export const PurchaseScalarWhereWithAggregatesInputObjectSchema: z.ZodType<Prisma.PurchaseScalarWhereWithAggregatesInput, Prisma.PurchaseScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([z.lazy(() => PurchaseScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => PurchaseScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => PurchaseScalarWhereWithAggregatesInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => PurchaseScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => PurchaseScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  organizationId: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  userId: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  type: z.union([z.lazy(() => EnumPurchaseTypeWithAggregatesFilterObjectSchema), PurchaseTypeSchema]).optional(),
  customerId: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  subscriptionId: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  productId: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  status: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable()
}).strict();
export const PurchaseScalarWhereWithAggregatesInputObjectZodSchema = z.object({
  AND: z.union([z.lazy(() => PurchaseScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => PurchaseScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => PurchaseScalarWhereWithAggregatesInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => PurchaseScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => PurchaseScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  organizationId: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  userId: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  type: z.union([z.lazy(() => EnumPurchaseTypeWithAggregatesFilterObjectSchema), PurchaseTypeSchema]).optional(),
  customerId: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  subscriptionId: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  productId: z.union([z.lazy(() => StringWithAggregatesFilterObjectSchema), z.string()]).optional(),
  status: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable()
}).strict();


// File: AiChatWhereInput.schema.ts

export const AiChatWhereInputObjectSchema: z.ZodType<Prisma.AiChatWhereInput, Prisma.AiChatWhereInput> = z.object({
  AND: z.union([z.lazy(() => AiChatWhereInputObjectSchema), z.lazy(() => AiChatWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => AiChatWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => AiChatWhereInputObjectSchema), z.lazy(() => AiChatWhereInputObjectSchema).array()]).optional(),
  organizationId: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  userId: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  title: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  messages: z.lazy(() => JsonFilterObjectSchema).optional(),
  organization: z.union([z.lazy(() => OrganizationNullableScalarRelationFilterObjectSchema), z.lazy(() => OrganizationWhereInputObjectSchema)]).optional().nullable(),
  user: z.union([z.lazy(() => UserNullableScalarRelationFilterObjectSchema), z.lazy(() => UserWhereInputObjectSchema)]).optional().nullable()
}).strict();
export const AiChatWhereInputObjectZodSchema = z.object({
  AND: z.union([z.lazy(() => AiChatWhereInputObjectSchema), z.lazy(() => AiChatWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => AiChatWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => AiChatWhereInputObjectSchema), z.lazy(() => AiChatWhereInputObjectSchema).array()]).optional(),
  organizationId: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  userId: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  title: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  messages: z.lazy(() => JsonFilterObjectSchema).optional(),
  organization: z.union([z.lazy(() => OrganizationNullableScalarRelationFilterObjectSchema), z.lazy(() => OrganizationWhereInputObjectSchema)]).optional().nullable(),
  user: z.union([z.lazy(() => UserNullableScalarRelationFilterObjectSchema), z.lazy(() => UserWhereInputObjectSchema)]).optional().nullable()
}).strict();


// File: AiChatOrderByWithRelationInput.schema.ts

export const AiChatOrderByWithRelationInputObjectSchema: z.ZodType<Prisma.AiChatOrderByWithRelationInput, Prisma.AiChatOrderByWithRelationInput> = z.object({
  id: SortOrderSchema.optional(),
  organizationId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  userId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  title: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  messages: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputObjectSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputObjectSchema).optional()
}).strict();
export const AiChatOrderByWithRelationInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  organizationId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  userId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  title: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  messages: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputObjectSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputObjectSchema).optional()
}).strict();


// File: AiChatWhereUniqueInput.schema.ts


export const AiChatWhereUniqueInputObjectSchema: z.ZodType<Prisma.AiChatWhereUniqueInput, Prisma.AiChatWhereUniqueInput> = z.object({
  id: z.string()
}).strict();
export const AiChatWhereUniqueInputObjectZodSchema = z.object({
  id: z.string()
}).strict();


// File: AiChatOrderByWithAggregationInput.schema.ts

export const AiChatOrderByWithAggregationInputObjectSchema: z.ZodType<Prisma.AiChatOrderByWithAggregationInput, Prisma.AiChatOrderByWithAggregationInput> = z.object({
  id: SortOrderSchema.optional(),
  organizationId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  userId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  title: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  messages: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional(),
  _count: z.lazy(() => AiChatCountOrderByAggregateInputObjectSchema).optional(),
  _max: z.lazy(() => AiChatMaxOrderByAggregateInputObjectSchema).optional(),
  _min: z.lazy(() => AiChatMinOrderByAggregateInputObjectSchema).optional()
}).strict();
export const AiChatOrderByWithAggregationInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  organizationId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  userId: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  title: z.union([SortOrderSchema, z.lazy(() => SortOrderInputObjectSchema)]).optional(),
  messages: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional(),
  _count: z.lazy(() => AiChatCountOrderByAggregateInputObjectSchema).optional(),
  _max: z.lazy(() => AiChatMaxOrderByAggregateInputObjectSchema).optional(),
  _min: z.lazy(() => AiChatMinOrderByAggregateInputObjectSchema).optional()
}).strict();


// File: AiChatScalarWhereWithAggregatesInput.schema.ts

export const AiChatScalarWhereWithAggregatesInputObjectSchema: z.ZodType<Prisma.AiChatScalarWhereWithAggregatesInput, Prisma.AiChatScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([z.lazy(() => AiChatScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => AiChatScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => AiChatScalarWhereWithAggregatesInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => AiChatScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => AiChatScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  organizationId: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  userId: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  title: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  messages: z.lazy(() => JsonWithAggregatesFilterObjectSchema).optional()
}).strict();
export const AiChatScalarWhereWithAggregatesInputObjectZodSchema = z.object({
  AND: z.union([z.lazy(() => AiChatScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => AiChatScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => AiChatScalarWhereWithAggregatesInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => AiChatScalarWhereWithAggregatesInputObjectSchema), z.lazy(() => AiChatScalarWhereWithAggregatesInputObjectSchema).array()]).optional(),
  organizationId: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  userId: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  title: z.union([z.lazy(() => StringNullableWithAggregatesFilterObjectSchema), z.string()]).optional().nullable(),
  messages: z.lazy(() => JsonWithAggregatesFilterObjectSchema).optional()
}).strict();


// File: UserCreateInput.schema.ts

export const UserCreateInputObjectSchema: z.ZodType<Prisma.UserCreateInput, Prisma.UserCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();
export const UserCreateInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();


// File: UserUncheckedCreateInput.schema.ts

export const UserUncheckedCreateInputObjectSchema: z.ZodType<Prisma.UserUncheckedCreateInput, Prisma.UserUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();
export const UserUncheckedCreateInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();


// File: UserUpdateInput.schema.ts

export const UserUpdateInputObjectSchema: z.ZodType<Prisma.UserUpdateInput, Prisma.UserUpdateInput> = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();
export const UserUpdateInputObjectZodSchema = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();


// File: UserUncheckedUpdateInput.schema.ts

export const UserUncheckedUpdateInputObjectSchema: z.ZodType<Prisma.UserUncheckedUpdateInput, Prisma.UserUncheckedUpdateInput> = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();
export const UserUncheckedUpdateInputObjectZodSchema = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();


// File: UserCreateManyInput.schema.ts


export const UserCreateManyInputObjectSchema: z.ZodType<Prisma.UserCreateManyInput, Prisma.UserCreateManyInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable()
}).strict();
export const UserCreateManyInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable()
}).strict();


// File: UserUpdateManyMutationInput.schema.ts

export const UserUpdateManyMutationInputObjectSchema: z.ZodType<Prisma.UserUpdateManyMutationInput, Prisma.UserUpdateManyMutationInput> = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();
export const UserUpdateManyMutationInputObjectZodSchema = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();


// File: UserUncheckedUpdateManyInput.schema.ts

export const UserUncheckedUpdateManyInputObjectSchema: z.ZodType<Prisma.UserUncheckedUpdateManyInput, Prisma.UserUncheckedUpdateManyInput> = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();
export const UserUncheckedUpdateManyInputObjectZodSchema = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();


// File: SessionCreateInput.schema.ts

export const SessionCreateInputObjectSchema: z.ZodType<Prisma.SessionCreateInput, Prisma.SessionCreateInput> = z.object({
  id: z.string().optional(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  token: z.string(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  user: z.lazy(() => UserCreateNestedOneWithoutSessionsInputObjectSchema)
}).strict();
export const SessionCreateInputObjectZodSchema = z.object({
  id: z.string().optional(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  token: z.string(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  user: z.lazy(() => UserCreateNestedOneWithoutSessionsInputObjectSchema)
}).strict();


// File: SessionUncheckedCreateInput.schema.ts


export const SessionUncheckedCreateInputObjectSchema: z.ZodType<Prisma.SessionUncheckedCreateInput, Prisma.SessionUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  userId: z.string(),
  impersonatedBy: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  token: z.string(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()])
}).strict();
export const SessionUncheckedCreateInputObjectZodSchema = z.object({
  id: z.string().optional(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  userId: z.string(),
  impersonatedBy: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  token: z.string(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()])
}).strict();


// File: SessionUpdateInput.schema.ts

export const SessionUpdateInputObjectSchema: z.ZodType<Prisma.SessionUpdateInput, Prisma.SessionUpdateInput> = z.object({
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  ipAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  userAgent: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  impersonatedBy: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  activeOrganizationId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  token: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutSessionsNestedInputObjectSchema).optional()
}).strict();
export const SessionUpdateInputObjectZodSchema = z.object({
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  ipAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  userAgent: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  impersonatedBy: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  activeOrganizationId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  token: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutSessionsNestedInputObjectSchema).optional()
}).strict();


// File: SessionUncheckedUpdateInput.schema.ts

export const SessionUncheckedUpdateInputObjectSchema: z.ZodType<Prisma.SessionUncheckedUpdateInput, Prisma.SessionUncheckedUpdateInput> = z.object({
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  ipAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  userAgent: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  impersonatedBy: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  activeOrganizationId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  token: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const SessionUncheckedUpdateInputObjectZodSchema = z.object({
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  ipAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  userAgent: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  impersonatedBy: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  activeOrganizationId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  token: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: SessionCreateManyInput.schema.ts


export const SessionCreateManyInputObjectSchema: z.ZodType<Prisma.SessionCreateManyInput, Prisma.SessionCreateManyInput> = z.object({
  id: z.string().optional(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  userId: z.string(),
  impersonatedBy: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  token: z.string(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()])
}).strict();
export const SessionCreateManyInputObjectZodSchema = z.object({
  id: z.string().optional(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  userId: z.string(),
  impersonatedBy: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  token: z.string(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()])
}).strict();


// File: SessionUpdateManyMutationInput.schema.ts

export const SessionUpdateManyMutationInputObjectSchema: z.ZodType<Prisma.SessionUpdateManyMutationInput, Prisma.SessionUpdateManyMutationInput> = z.object({
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  ipAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  userAgent: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  impersonatedBy: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  activeOrganizationId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  token: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const SessionUpdateManyMutationInputObjectZodSchema = z.object({
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  ipAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  userAgent: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  impersonatedBy: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  activeOrganizationId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  token: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: SessionUncheckedUpdateManyInput.schema.ts

export const SessionUncheckedUpdateManyInputObjectSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyInput, Prisma.SessionUncheckedUpdateManyInput> = z.object({
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  ipAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  userAgent: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  impersonatedBy: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  activeOrganizationId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  token: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const SessionUncheckedUpdateManyInputObjectZodSchema = z.object({
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  ipAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  userAgent: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  impersonatedBy: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  activeOrganizationId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  token: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: AccountCreateInput.schema.ts

export const AccountCreateInputObjectSchema: z.ZodType<Prisma.AccountCreateInput, Prisma.AccountCreateInput> = z.object({
  id: z.string().optional(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  expiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  password: z.string().optional().nullable(),
  accessTokenExpiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  scope: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  user: z.lazy(() => UserCreateNestedOneWithoutAccountsInputObjectSchema)
}).strict();
export const AccountCreateInputObjectZodSchema = z.object({
  id: z.string().optional(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  expiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  password: z.string().optional().nullable(),
  accessTokenExpiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  scope: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  user: z.lazy(() => UserCreateNestedOneWithoutAccountsInputObjectSchema)
}).strict();


// File: AccountUncheckedCreateInput.schema.ts


export const AccountUncheckedCreateInputObjectSchema: z.ZodType<Prisma.AccountUncheckedCreateInput, Prisma.AccountUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  accountId: z.string(),
  providerId: z.string(),
  userId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  expiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  password: z.string().optional().nullable(),
  accessTokenExpiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  scope: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()])
}).strict();
export const AccountUncheckedCreateInputObjectZodSchema = z.object({
  id: z.string().optional(),
  accountId: z.string(),
  providerId: z.string(),
  userId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  expiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  password: z.string().optional().nullable(),
  accessTokenExpiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  scope: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()])
}).strict();


// File: AccountUpdateInput.schema.ts

export const AccountUpdateInputObjectSchema: z.ZodType<Prisma.AccountUpdateInput, Prisma.AccountUpdateInput> = z.object({
  accountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  providerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  accessToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  refreshToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  idToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  password: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  scope: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutAccountsNestedInputObjectSchema).optional()
}).strict();
export const AccountUpdateInputObjectZodSchema = z.object({
  accountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  providerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  accessToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  refreshToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  idToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  password: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  scope: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutAccountsNestedInputObjectSchema).optional()
}).strict();


// File: AccountUncheckedUpdateInput.schema.ts

export const AccountUncheckedUpdateInputObjectSchema: z.ZodType<Prisma.AccountUncheckedUpdateInput, Prisma.AccountUncheckedUpdateInput> = z.object({
  accountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  providerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  accessToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  refreshToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  idToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  password: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  scope: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();
export const AccountUncheckedUpdateInputObjectZodSchema = z.object({
  accountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  providerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  accessToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  refreshToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  idToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  password: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  scope: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();


// File: AccountCreateManyInput.schema.ts


export const AccountCreateManyInputObjectSchema: z.ZodType<Prisma.AccountCreateManyInput, Prisma.AccountCreateManyInput> = z.object({
  id: z.string().optional(),
  accountId: z.string(),
  providerId: z.string(),
  userId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  expiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  password: z.string().optional().nullable(),
  accessTokenExpiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  scope: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()])
}).strict();
export const AccountCreateManyInputObjectZodSchema = z.object({
  id: z.string().optional(),
  accountId: z.string(),
  providerId: z.string(),
  userId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  expiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  password: z.string().optional().nullable(),
  accessTokenExpiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  scope: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()])
}).strict();


// File: AccountUpdateManyMutationInput.schema.ts

export const AccountUpdateManyMutationInputObjectSchema: z.ZodType<Prisma.AccountUpdateManyMutationInput, Prisma.AccountUpdateManyMutationInput> = z.object({
  accountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  providerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  accessToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  refreshToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  idToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  password: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  scope: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();
export const AccountUpdateManyMutationInputObjectZodSchema = z.object({
  accountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  providerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  accessToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  refreshToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  idToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  password: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  scope: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();


// File: AccountUncheckedUpdateManyInput.schema.ts

export const AccountUncheckedUpdateManyInputObjectSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyInput, Prisma.AccountUncheckedUpdateManyInput> = z.object({
  accountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  providerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  accessToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  refreshToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  idToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  password: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  scope: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();
export const AccountUncheckedUpdateManyInputObjectZodSchema = z.object({
  accountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  providerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  accessToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  refreshToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  idToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  password: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  scope: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();


// File: VerificationCreateInput.schema.ts


export const VerificationCreateInputObjectSchema: z.ZodType<Prisma.VerificationCreateInput, Prisma.VerificationCreateInput> = z.object({
  id: z.string().optional(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional().nullable()
}).strict();
export const VerificationCreateInputObjectZodSchema = z.object({
  id: z.string().optional(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional().nullable()
}).strict();


// File: VerificationUncheckedCreateInput.schema.ts


export const VerificationUncheckedCreateInputObjectSchema: z.ZodType<Prisma.VerificationUncheckedCreateInput, Prisma.VerificationUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional().nullable()
}).strict();
export const VerificationUncheckedCreateInputObjectZodSchema = z.object({
  id: z.string().optional(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional().nullable()
}).strict();


// File: VerificationUpdateInput.schema.ts

export const VerificationUpdateInputObjectSchema: z.ZodType<Prisma.VerificationUpdateInput, Prisma.VerificationUpdateInput> = z.object({
  identifier: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const VerificationUpdateInputObjectZodSchema = z.object({
  identifier: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: VerificationUncheckedUpdateInput.schema.ts

export const VerificationUncheckedUpdateInputObjectSchema: z.ZodType<Prisma.VerificationUncheckedUpdateInput, Prisma.VerificationUncheckedUpdateInput> = z.object({
  identifier: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const VerificationUncheckedUpdateInputObjectZodSchema = z.object({
  identifier: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: VerificationCreateManyInput.schema.ts


export const VerificationCreateManyInputObjectSchema: z.ZodType<Prisma.VerificationCreateManyInput, Prisma.VerificationCreateManyInput> = z.object({
  id: z.string().optional(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional().nullable()
}).strict();
export const VerificationCreateManyInputObjectZodSchema = z.object({
  id: z.string().optional(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional().nullable()
}).strict();


// File: VerificationUpdateManyMutationInput.schema.ts

export const VerificationUpdateManyMutationInputObjectSchema: z.ZodType<Prisma.VerificationUpdateManyMutationInput, Prisma.VerificationUpdateManyMutationInput> = z.object({
  identifier: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const VerificationUpdateManyMutationInputObjectZodSchema = z.object({
  identifier: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: VerificationUncheckedUpdateManyInput.schema.ts

export const VerificationUncheckedUpdateManyInputObjectSchema: z.ZodType<Prisma.VerificationUncheckedUpdateManyInput, Prisma.VerificationUncheckedUpdateManyInput> = z.object({
  identifier: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const VerificationUncheckedUpdateManyInputObjectZodSchema = z.object({
  identifier: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: PasskeyCreateInput.schema.ts

export const PasskeyCreateInputObjectSchema: z.ZodType<Prisma.PasskeyCreateInput, Prisma.PasskeyCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  publicKey: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  user: z.lazy(() => UserCreateNestedOneWithoutPasskeysInputObjectSchema)
}).strict();
export const PasskeyCreateInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  publicKey: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  user: z.lazy(() => UserCreateNestedOneWithoutPasskeysInputObjectSchema)
}).strict();


// File: PasskeyUncheckedCreateInput.schema.ts


export const PasskeyUncheckedCreateInputObjectSchema: z.ZodType<Prisma.PasskeyUncheckedCreateInput, Prisma.PasskeyUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  publicKey: z.string(),
  userId: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional().nullable()
}).strict();
export const PasskeyUncheckedCreateInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  publicKey: z.string(),
  userId: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional().nullable()
}).strict();


// File: PasskeyUpdateInput.schema.ts

export const PasskeyUpdateInputObjectSchema: z.ZodType<Prisma.PasskeyUpdateInput, Prisma.PasskeyUpdateInput> = z.object({
  name: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  publicKey: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  credentialID: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  counter: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputObjectSchema)]).optional(),
  deviceType: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  backedUp: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  transports: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutPasskeysNestedInputObjectSchema).optional()
}).strict();
export const PasskeyUpdateInputObjectZodSchema = z.object({
  name: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  publicKey: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  credentialID: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  counter: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputObjectSchema)]).optional(),
  deviceType: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  backedUp: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  transports: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutPasskeysNestedInputObjectSchema).optional()
}).strict();


// File: PasskeyUncheckedUpdateInput.schema.ts

export const PasskeyUncheckedUpdateInputObjectSchema: z.ZodType<Prisma.PasskeyUncheckedUpdateInput, Prisma.PasskeyUncheckedUpdateInput> = z.object({
  name: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  publicKey: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  credentialID: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  counter: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputObjectSchema)]).optional(),
  deviceType: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  backedUp: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  transports: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();
export const PasskeyUncheckedUpdateInputObjectZodSchema = z.object({
  name: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  publicKey: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  credentialID: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  counter: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputObjectSchema)]).optional(),
  deviceType: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  backedUp: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  transports: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();


// File: PasskeyCreateManyInput.schema.ts


export const PasskeyCreateManyInputObjectSchema: z.ZodType<Prisma.PasskeyCreateManyInput, Prisma.PasskeyCreateManyInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  publicKey: z.string(),
  userId: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional().nullable()
}).strict();
export const PasskeyCreateManyInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  publicKey: z.string(),
  userId: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional().nullable()
}).strict();


// File: PasskeyUpdateManyMutationInput.schema.ts

export const PasskeyUpdateManyMutationInputObjectSchema: z.ZodType<Prisma.PasskeyUpdateManyMutationInput, Prisma.PasskeyUpdateManyMutationInput> = z.object({
  name: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  publicKey: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  credentialID: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  counter: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputObjectSchema)]).optional(),
  deviceType: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  backedUp: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  transports: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();
export const PasskeyUpdateManyMutationInputObjectZodSchema = z.object({
  name: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  publicKey: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  credentialID: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  counter: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputObjectSchema)]).optional(),
  deviceType: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  backedUp: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  transports: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();


// File: PasskeyUncheckedUpdateManyInput.schema.ts

export const PasskeyUncheckedUpdateManyInputObjectSchema: z.ZodType<Prisma.PasskeyUncheckedUpdateManyInput, Prisma.PasskeyUncheckedUpdateManyInput> = z.object({
  name: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  publicKey: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  credentialID: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  counter: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputObjectSchema)]).optional(),
  deviceType: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  backedUp: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  transports: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();
export const PasskeyUncheckedUpdateManyInputObjectZodSchema = z.object({
  name: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  publicKey: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  credentialID: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  counter: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputObjectSchema)]).optional(),
  deviceType: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  backedUp: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  transports: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();


// File: TwoFactorCreateInput.schema.ts

export const TwoFactorCreateInputObjectSchema: z.ZodType<Prisma.TwoFactorCreateInput, Prisma.TwoFactorCreateInput> = z.object({
  id: z.string().optional(),
  secret: z.string(),
  backupCodes: z.string(),
  user: z.lazy(() => UserCreateNestedOneWithoutTwofactorsInputObjectSchema)
}).strict();
export const TwoFactorCreateInputObjectZodSchema = z.object({
  id: z.string().optional(),
  secret: z.string(),
  backupCodes: z.string(),
  user: z.lazy(() => UserCreateNestedOneWithoutTwofactorsInputObjectSchema)
}).strict();


// File: TwoFactorUncheckedCreateInput.schema.ts


export const TwoFactorUncheckedCreateInputObjectSchema: z.ZodType<Prisma.TwoFactorUncheckedCreateInput, Prisma.TwoFactorUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  secret: z.string(),
  backupCodes: z.string(),
  userId: z.string()
}).strict();
export const TwoFactorUncheckedCreateInputObjectZodSchema = z.object({
  id: z.string().optional(),
  secret: z.string(),
  backupCodes: z.string(),
  userId: z.string()
}).strict();


// File: TwoFactorUpdateInput.schema.ts

export const TwoFactorUpdateInputObjectSchema: z.ZodType<Prisma.TwoFactorUpdateInput, Prisma.TwoFactorUpdateInput> = z.object({
  secret: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  backupCodes: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutTwofactorsNestedInputObjectSchema).optional()
}).strict();
export const TwoFactorUpdateInputObjectZodSchema = z.object({
  secret: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  backupCodes: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutTwofactorsNestedInputObjectSchema).optional()
}).strict();


// File: TwoFactorUncheckedUpdateInput.schema.ts

export const TwoFactorUncheckedUpdateInputObjectSchema: z.ZodType<Prisma.TwoFactorUncheckedUpdateInput, Prisma.TwoFactorUncheckedUpdateInput> = z.object({
  secret: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  backupCodes: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const TwoFactorUncheckedUpdateInputObjectZodSchema = z.object({
  secret: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  backupCodes: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: TwoFactorCreateManyInput.schema.ts


export const TwoFactorCreateManyInputObjectSchema: z.ZodType<Prisma.TwoFactorCreateManyInput, Prisma.TwoFactorCreateManyInput> = z.object({
  id: z.string().optional(),
  secret: z.string(),
  backupCodes: z.string(),
  userId: z.string()
}).strict();
export const TwoFactorCreateManyInputObjectZodSchema = z.object({
  id: z.string().optional(),
  secret: z.string(),
  backupCodes: z.string(),
  userId: z.string()
}).strict();


// File: TwoFactorUpdateManyMutationInput.schema.ts

export const TwoFactorUpdateManyMutationInputObjectSchema: z.ZodType<Prisma.TwoFactorUpdateManyMutationInput, Prisma.TwoFactorUpdateManyMutationInput> = z.object({
  secret: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  backupCodes: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const TwoFactorUpdateManyMutationInputObjectZodSchema = z.object({
  secret: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  backupCodes: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: TwoFactorUncheckedUpdateManyInput.schema.ts

export const TwoFactorUncheckedUpdateManyInputObjectSchema: z.ZodType<Prisma.TwoFactorUncheckedUpdateManyInput, Prisma.TwoFactorUncheckedUpdateManyInput> = z.object({
  secret: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  backupCodes: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const TwoFactorUncheckedUpdateManyInputObjectZodSchema = z.object({
  secret: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  backupCodes: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: OrganizationCreateInput.schema.ts

export const OrganizationCreateInputObjectSchema: z.ZodType<Prisma.OrganizationCreateInput, Prisma.OrganizationCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputObjectSchema).optional()
}).strict();
export const OrganizationCreateInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputObjectSchema).optional()
}).strict();


// File: OrganizationUncheckedCreateInput.schema.ts

export const OrganizationUncheckedCreateInputObjectSchema: z.ZodType<Prisma.OrganizationUncheckedCreateInput, Prisma.OrganizationUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional()
}).strict();
export const OrganizationUncheckedCreateInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional()
}).strict();


// File: OrganizationUpdateInput.schema.ts

export const OrganizationUpdateInputObjectSchema: z.ZodType<Prisma.OrganizationUpdateInput, Prisma.OrganizationUpdateInput> = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  slug: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  logo: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  metadata: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputObjectSchema).optional()
}).strict();
export const OrganizationUpdateInputObjectZodSchema = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  slug: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  logo: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  metadata: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputObjectSchema).optional()
}).strict();


// File: OrganizationUncheckedUpdateInput.schema.ts

export const OrganizationUncheckedUpdateInputObjectSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateInput, Prisma.OrganizationUncheckedUpdateInput> = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  slug: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  logo: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  metadata: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional()
}).strict();
export const OrganizationUncheckedUpdateInputObjectZodSchema = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  slug: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  logo: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  metadata: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional()
}).strict();


// File: OrganizationCreateManyInput.schema.ts


export const OrganizationCreateManyInputObjectSchema: z.ZodType<Prisma.OrganizationCreateManyInput, Prisma.OrganizationCreateManyInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable()
}).strict();
export const OrganizationCreateManyInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable()
}).strict();


// File: OrganizationUpdateManyMutationInput.schema.ts

export const OrganizationUpdateManyMutationInputObjectSchema: z.ZodType<Prisma.OrganizationUpdateManyMutationInput, Prisma.OrganizationUpdateManyMutationInput> = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  slug: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  logo: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  metadata: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();
export const OrganizationUpdateManyMutationInputObjectZodSchema = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  slug: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  logo: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  metadata: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();


// File: OrganizationUncheckedUpdateManyInput.schema.ts

export const OrganizationUncheckedUpdateManyInputObjectSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyInput, Prisma.OrganizationUncheckedUpdateManyInput> = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  slug: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  logo: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  metadata: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();
export const OrganizationUncheckedUpdateManyInputObjectZodSchema = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  slug: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  logo: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  metadata: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();


// File: MemberCreateInput.schema.ts

export const MemberCreateInputObjectSchema: z.ZodType<Prisma.MemberCreateInput, Prisma.MemberCreateInput> = z.object({
  id: z.string().optional(),
  role: z.string(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutMembersInputObjectSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutMembersInputObjectSchema)
}).strict();
export const MemberCreateInputObjectZodSchema = z.object({
  id: z.string().optional(),
  role: z.string(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutMembersInputObjectSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutMembersInputObjectSchema)
}).strict();


// File: MemberUncheckedCreateInput.schema.ts


export const MemberUncheckedCreateInputObjectSchema: z.ZodType<Prisma.MemberUncheckedCreateInput, Prisma.MemberUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  organizationId: z.string(),
  userId: z.string(),
  role: z.string(),
  createdAt: z.union([z.date(), z.iso.datetime()])
}).strict();
export const MemberUncheckedCreateInputObjectZodSchema = z.object({
  id: z.string().optional(),
  organizationId: z.string(),
  userId: z.string(),
  role: z.string(),
  createdAt: z.union([z.date(), z.iso.datetime()])
}).strict();


// File: MemberUpdateInput.schema.ts

export const MemberUpdateInputObjectSchema: z.ZodType<Prisma.MemberUpdateInput, Prisma.MemberUpdateInput> = z.object({
  role: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutMembersNestedInputObjectSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutMembersNestedInputObjectSchema).optional()
}).strict();
export const MemberUpdateInputObjectZodSchema = z.object({
  role: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutMembersNestedInputObjectSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutMembersNestedInputObjectSchema).optional()
}).strict();


// File: MemberUncheckedUpdateInput.schema.ts

export const MemberUncheckedUpdateInputObjectSchema: z.ZodType<Prisma.MemberUncheckedUpdateInput, Prisma.MemberUncheckedUpdateInput> = z.object({
  organizationId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const MemberUncheckedUpdateInputObjectZodSchema = z.object({
  organizationId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: MemberCreateManyInput.schema.ts


export const MemberCreateManyInputObjectSchema: z.ZodType<Prisma.MemberCreateManyInput, Prisma.MemberCreateManyInput> = z.object({
  id: z.string().optional(),
  organizationId: z.string(),
  userId: z.string(),
  role: z.string(),
  createdAt: z.union([z.date(), z.iso.datetime()])
}).strict();
export const MemberCreateManyInputObjectZodSchema = z.object({
  id: z.string().optional(),
  organizationId: z.string(),
  userId: z.string(),
  role: z.string(),
  createdAt: z.union([z.date(), z.iso.datetime()])
}).strict();


// File: MemberUpdateManyMutationInput.schema.ts

export const MemberUpdateManyMutationInputObjectSchema: z.ZodType<Prisma.MemberUpdateManyMutationInput, Prisma.MemberUpdateManyMutationInput> = z.object({
  role: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const MemberUpdateManyMutationInputObjectZodSchema = z.object({
  role: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: MemberUncheckedUpdateManyInput.schema.ts

export const MemberUncheckedUpdateManyInputObjectSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyInput, Prisma.MemberUncheckedUpdateManyInput> = z.object({
  organizationId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const MemberUncheckedUpdateManyInputObjectZodSchema = z.object({
  organizationId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: InvitationCreateInput.schema.ts

export const InvitationCreateInputObjectSchema: z.ZodType<Prisma.InvitationCreateInput, Prisma.InvitationCreateInput> = z.object({
  id: z.string().optional(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutInvitationsInputObjectSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutInvitationsInputObjectSchema)
}).strict();
export const InvitationCreateInputObjectZodSchema = z.object({
  id: z.string().optional(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutInvitationsInputObjectSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutInvitationsInputObjectSchema)
}).strict();


// File: InvitationUncheckedCreateInput.schema.ts


export const InvitationUncheckedCreateInputObjectSchema: z.ZodType<Prisma.InvitationUncheckedCreateInput, Prisma.InvitationUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  organizationId: z.string(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  inviterId: z.string()
}).strict();
export const InvitationUncheckedCreateInputObjectZodSchema = z.object({
  id: z.string().optional(),
  organizationId: z.string(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  inviterId: z.string()
}).strict();


// File: InvitationUpdateInput.schema.ts

export const InvitationUpdateInputObjectSchema: z.ZodType<Prisma.InvitationUpdateInput, Prisma.InvitationUpdateInput> = z.object({
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutInvitationsNestedInputObjectSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutInvitationsNestedInputObjectSchema).optional()
}).strict();
export const InvitationUpdateInputObjectZodSchema = z.object({
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutInvitationsNestedInputObjectSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutInvitationsNestedInputObjectSchema).optional()
}).strict();


// File: InvitationUncheckedUpdateInput.schema.ts

export const InvitationUncheckedUpdateInputObjectSchema: z.ZodType<Prisma.InvitationUncheckedUpdateInput, Prisma.InvitationUncheckedUpdateInput> = z.object({
  organizationId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  inviterId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const InvitationUncheckedUpdateInputObjectZodSchema = z.object({
  organizationId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  inviterId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: InvitationCreateManyInput.schema.ts


export const InvitationCreateManyInputObjectSchema: z.ZodType<Prisma.InvitationCreateManyInput, Prisma.InvitationCreateManyInput> = z.object({
  id: z.string().optional(),
  organizationId: z.string(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  inviterId: z.string()
}).strict();
export const InvitationCreateManyInputObjectZodSchema = z.object({
  id: z.string().optional(),
  organizationId: z.string(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  inviterId: z.string()
}).strict();


// File: InvitationUpdateManyMutationInput.schema.ts

export const InvitationUpdateManyMutationInputObjectSchema: z.ZodType<Prisma.InvitationUpdateManyMutationInput, Prisma.InvitationUpdateManyMutationInput> = z.object({
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const InvitationUpdateManyMutationInputObjectZodSchema = z.object({
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: InvitationUncheckedUpdateManyInput.schema.ts

export const InvitationUncheckedUpdateManyInputObjectSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyInput, Prisma.InvitationUncheckedUpdateManyInput> = z.object({
  organizationId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  inviterId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const InvitationUncheckedUpdateManyInputObjectZodSchema = z.object({
  organizationId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  inviterId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: PurchaseCreateInput.schema.ts

export const PurchaseCreateInputObjectSchema: z.ZodType<Prisma.PurchaseCreateInput, Prisma.PurchaseCreateInput> = z.object({
  id: z.string().optional(),
  type: PurchaseTypeSchema,
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutPurchasesInputObjectSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutPurchasesInputObjectSchema).optional()
}).strict();
export const PurchaseCreateInputObjectZodSchema = z.object({
  id: z.string().optional(),
  type: PurchaseTypeSchema,
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutPurchasesInputObjectSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutPurchasesInputObjectSchema).optional()
}).strict();


// File: PurchaseUncheckedCreateInput.schema.ts

export const PurchaseUncheckedCreateInputObjectSchema: z.ZodType<Prisma.PurchaseUncheckedCreateInput, Prisma.PurchaseUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  organizationId: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  type: PurchaseTypeSchema,
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional()
}).strict();
export const PurchaseUncheckedCreateInputObjectZodSchema = z.object({
  id: z.string().optional(),
  organizationId: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  type: PurchaseTypeSchema,
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional()
}).strict();


// File: PurchaseUpdateInput.schema.ts

export const PurchaseUpdateInputObjectSchema: z.ZodType<Prisma.PurchaseUpdateInput, Prisma.PurchaseUpdateInput> = z.object({
  type: z.union([PurchaseTypeSchema, z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputObjectSchema)]).optional(),
  customerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  subscriptionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  productId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  status: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutPurchasesNestedInputObjectSchema).optional(),
  user: z.lazy(() => UserUpdateOneWithoutPurchasesNestedInputObjectSchema).optional()
}).strict();
export const PurchaseUpdateInputObjectZodSchema = z.object({
  type: z.union([PurchaseTypeSchema, z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputObjectSchema)]).optional(),
  customerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  subscriptionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  productId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  status: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutPurchasesNestedInputObjectSchema).optional(),
  user: z.lazy(() => UserUpdateOneWithoutPurchasesNestedInputObjectSchema).optional()
}).strict();


// File: PurchaseUncheckedUpdateInput.schema.ts

export const PurchaseUncheckedUpdateInputObjectSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateInput, Prisma.PurchaseUncheckedUpdateInput> = z.object({
  organizationId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  userId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  type: z.union([PurchaseTypeSchema, z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputObjectSchema)]).optional(),
  customerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  subscriptionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  productId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  status: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();
export const PurchaseUncheckedUpdateInputObjectZodSchema = z.object({
  organizationId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  userId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  type: z.union([PurchaseTypeSchema, z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputObjectSchema)]).optional(),
  customerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  subscriptionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  productId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  status: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();


// File: PurchaseCreateManyInput.schema.ts

export const PurchaseCreateManyInputObjectSchema: z.ZodType<Prisma.PurchaseCreateManyInput, Prisma.PurchaseCreateManyInput> = z.object({
  id: z.string().optional(),
  organizationId: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  type: PurchaseTypeSchema,
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional()
}).strict();
export const PurchaseCreateManyInputObjectZodSchema = z.object({
  id: z.string().optional(),
  organizationId: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  type: PurchaseTypeSchema,
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional()
}).strict();


// File: PurchaseUpdateManyMutationInput.schema.ts

export const PurchaseUpdateManyMutationInputObjectSchema: z.ZodType<Prisma.PurchaseUpdateManyMutationInput, Prisma.PurchaseUpdateManyMutationInput> = z.object({
  type: z.union([PurchaseTypeSchema, z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputObjectSchema)]).optional(),
  customerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  subscriptionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  productId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  status: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();
export const PurchaseUpdateManyMutationInputObjectZodSchema = z.object({
  type: z.union([PurchaseTypeSchema, z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputObjectSchema)]).optional(),
  customerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  subscriptionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  productId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  status: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();


// File: PurchaseUncheckedUpdateManyInput.schema.ts

export const PurchaseUncheckedUpdateManyInputObjectSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateManyInput, Prisma.PurchaseUncheckedUpdateManyInput> = z.object({
  organizationId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  userId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  type: z.union([PurchaseTypeSchema, z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputObjectSchema)]).optional(),
  customerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  subscriptionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  productId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  status: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();
export const PurchaseUncheckedUpdateManyInputObjectZodSchema = z.object({
  organizationId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  userId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  type: z.union([PurchaseTypeSchema, z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputObjectSchema)]).optional(),
  customerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  subscriptionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  productId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  status: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();


// File: AiChatCreateInput.schema.ts


const literalSchema = z.union([z.string(), z.number(), z.boolean()]);
const jsonSchema = z.lazy(() =>
  z.union([literalSchema, z.array(jsonSchema.nullable()), z.record(z.string(), jsonSchema.nullable())])
);

export const AiChatCreateInputObjectSchema: z.ZodType<Prisma.AiChatCreateInput, Prisma.AiChatCreateInput> = z.object({
  id: z.string().optional(),
  title: z.string().optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutAiChatsInputObjectSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutAiChatsInputObjectSchema).optional()
}).strict();
export const AiChatCreateInputObjectZodSchema = z.object({
  id: z.string().optional(),
  title: z.string().optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutAiChatsInputObjectSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutAiChatsInputObjectSchema).optional()
}).strict();


// File: AiChatUncheckedCreateInput.schema.ts


const literalSchema = z.union([z.string(), z.number(), z.boolean()]);
const jsonSchema = z.lazy(() =>
  z.union([literalSchema, z.array(jsonSchema.nullable()), z.record(z.string(), jsonSchema.nullable())])
);

export const AiChatUncheckedCreateInputObjectSchema: z.ZodType<Prisma.AiChatUncheckedCreateInput, Prisma.AiChatUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  organizationId: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional()
}).strict();
export const AiChatUncheckedCreateInputObjectZodSchema = z.object({
  id: z.string().optional(),
  organizationId: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional()
}).strict();


// File: AiChatUpdateInput.schema.ts


const literalSchema = z.union([z.string(), z.number(), z.boolean()]);
const jsonSchema = z.lazy(() =>
  z.union([literalSchema, z.array(jsonSchema.nullable()), z.record(z.string(), jsonSchema.nullable())])
);

export const AiChatUpdateInputObjectSchema: z.ZodType<Prisma.AiChatUpdateInput, Prisma.AiChatUpdateInput> = z.object({
  title: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutAiChatsNestedInputObjectSchema).optional(),
  user: z.lazy(() => UserUpdateOneWithoutAiChatsNestedInputObjectSchema).optional()
}).strict();
export const AiChatUpdateInputObjectZodSchema = z.object({
  title: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutAiChatsNestedInputObjectSchema).optional(),
  user: z.lazy(() => UserUpdateOneWithoutAiChatsNestedInputObjectSchema).optional()
}).strict();


// File: AiChatUncheckedUpdateInput.schema.ts


const literalSchema = z.union([z.string(), z.number(), z.boolean()]);
const jsonSchema = z.lazy(() =>
  z.union([literalSchema, z.array(jsonSchema.nullable()), z.record(z.string(), jsonSchema.nullable())])
);

export const AiChatUncheckedUpdateInputObjectSchema: z.ZodType<Prisma.AiChatUncheckedUpdateInput, Prisma.AiChatUncheckedUpdateInput> = z.object({
  organizationId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  userId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  title: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional()
}).strict();
export const AiChatUncheckedUpdateInputObjectZodSchema = z.object({
  organizationId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  userId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  title: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional()
}).strict();


// File: AiChatCreateManyInput.schema.ts


const literalSchema = z.union([z.string(), z.number(), z.boolean()]);
const jsonSchema = z.lazy(() =>
  z.union([literalSchema, z.array(jsonSchema.nullable()), z.record(z.string(), jsonSchema.nullable())])
);

export const AiChatCreateManyInputObjectSchema: z.ZodType<Prisma.AiChatCreateManyInput, Prisma.AiChatCreateManyInput> = z.object({
  id: z.string().optional(),
  organizationId: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional()
}).strict();
export const AiChatCreateManyInputObjectZodSchema = z.object({
  id: z.string().optional(),
  organizationId: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional()
}).strict();


// File: AiChatUpdateManyMutationInput.schema.ts


const literalSchema = z.union([z.string(), z.number(), z.boolean()]);
const jsonSchema = z.lazy(() =>
  z.union([literalSchema, z.array(jsonSchema.nullable()), z.record(z.string(), jsonSchema.nullable())])
);

export const AiChatUpdateManyMutationInputObjectSchema: z.ZodType<Prisma.AiChatUpdateManyMutationInput, Prisma.AiChatUpdateManyMutationInput> = z.object({
  title: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional()
}).strict();
export const AiChatUpdateManyMutationInputObjectZodSchema = z.object({
  title: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional()
}).strict();


// File: AiChatUncheckedUpdateManyInput.schema.ts


const literalSchema = z.union([z.string(), z.number(), z.boolean()]);
const jsonSchema = z.lazy(() =>
  z.union([literalSchema, z.array(jsonSchema.nullable()), z.record(z.string(), jsonSchema.nullable())])
);

export const AiChatUncheckedUpdateManyInputObjectSchema: z.ZodType<Prisma.AiChatUncheckedUpdateManyInput, Prisma.AiChatUncheckedUpdateManyInput> = z.object({
  organizationId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  userId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  title: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional()
}).strict();
export const AiChatUncheckedUpdateManyInputObjectZodSchema = z.object({
  organizationId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  userId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  title: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional()
}).strict();


// File: StringFilter.schema.ts

export const StringFilterObjectSchema: z.ZodType<Prisma.StringFilter, Prisma.StringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: QueryModeSchema.optional(),
  not: z.union([z.string(), z.lazy(() => NestedStringFilterObjectSchema)]).optional()
}).strict();
export const StringFilterObjectZodSchema = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: QueryModeSchema.optional(),
  not: z.union([z.string(), z.lazy(() => NestedStringFilterObjectSchema)]).optional()
}).strict();


// File: BoolFilter.schema.ts

export const BoolFilterObjectSchema: z.ZodType<Prisma.BoolFilter, Prisma.BoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([z.boolean(), z.lazy(() => NestedBoolFilterObjectSchema)]).optional()
}).strict();
export const BoolFilterObjectZodSchema = z.object({
  equals: z.boolean().optional(),
  not: z.union([z.boolean(), z.lazy(() => NestedBoolFilterObjectSchema)]).optional()
}).strict();


// File: StringNullableFilter.schema.ts

export const StringNullableFilterObjectSchema: z.ZodType<Prisma.StringNullableFilter, Prisma.StringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: QueryModeSchema.optional(),
  not: z.union([z.string(), z.lazy(() => NestedStringNullableFilterObjectSchema)]).optional().nullable()
}).strict();
export const StringNullableFilterObjectZodSchema = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: QueryModeSchema.optional(),
  not: z.union([z.string(), z.lazy(() => NestedStringNullableFilterObjectSchema)]).optional().nullable()
}).strict();


// File: DateTimeFilter.schema.ts

export const DateTimeFilterObjectSchema: z.ZodType<Prisma.DateTimeFilter, Prisma.DateTimeFilter> = z.object({
  equals: z.union([z.date(), z.iso.datetime()]).optional(),
  in: z.union([z.date().array(), z.iso.datetime().array()]).optional(),
  notIn: z.union([z.date().array(), z.iso.datetime().array()]).optional(),
  lt: z.union([z.date(), z.iso.datetime()]).optional(),
  lte: z.union([z.date(), z.iso.datetime()]).optional(),
  gt: z.union([z.date(), z.iso.datetime()]).optional(),
  gte: z.union([z.date(), z.iso.datetime()]).optional(),
  not: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NestedDateTimeFilterObjectSchema)]).optional()
}).strict();
export const DateTimeFilterObjectZodSchema = z.object({
  equals: z.union([z.date(), z.iso.datetime()]).optional(),
  in: z.union([z.date().array(), z.iso.datetime().array()]).optional(),
  notIn: z.union([z.date().array(), z.iso.datetime().array()]).optional(),
  lt: z.union([z.date(), z.iso.datetime()]).optional(),
  lte: z.union([z.date(), z.iso.datetime()]).optional(),
  gt: z.union([z.date(), z.iso.datetime()]).optional(),
  gte: z.union([z.date(), z.iso.datetime()]).optional(),
  not: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NestedDateTimeFilterObjectSchema)]).optional()
}).strict();


// File: BoolNullableFilter.schema.ts

export const BoolNullableFilterObjectSchema: z.ZodType<Prisma.BoolNullableFilter, Prisma.BoolNullableFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([z.boolean(), z.lazy(() => NestedBoolNullableFilterObjectSchema)]).optional().nullable()
}).strict();
export const BoolNullableFilterObjectZodSchema = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([z.boolean(), z.lazy(() => NestedBoolNullableFilterObjectSchema)]).optional().nullable()
}).strict();


// File: DateTimeNullableFilter.schema.ts

export const DateTimeNullableFilterObjectSchema: z.ZodType<Prisma.DateTimeNullableFilter, Prisma.DateTimeNullableFilter> = z.object({
  equals: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  in: z.union([z.date().array(), z.iso.datetime().array()]).optional().nullable(),
  notIn: z.union([z.date().array(), z.iso.datetime().array()]).optional().nullable(),
  lt: z.union([z.date(), z.iso.datetime()]).optional(),
  lte: z.union([z.date(), z.iso.datetime()]).optional(),
  gt: z.union([z.date(), z.iso.datetime()]).optional(),
  gte: z.union([z.date(), z.iso.datetime()]).optional(),
  not: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NestedDateTimeNullableFilterObjectSchema)]).optional().nullable()
}).strict();
export const DateTimeNullableFilterObjectZodSchema = z.object({
  equals: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  in: z.union([z.date().array(), z.iso.datetime().array()]).optional().nullable(),
  notIn: z.union([z.date().array(), z.iso.datetime().array()]).optional().nullable(),
  lt: z.union([z.date(), z.iso.datetime()]).optional(),
  lte: z.union([z.date(), z.iso.datetime()]).optional(),
  gt: z.union([z.date(), z.iso.datetime()]).optional(),
  gte: z.union([z.date(), z.iso.datetime()]).optional(),
  not: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NestedDateTimeNullableFilterObjectSchema)]).optional().nullable()
}).strict();


// File: SessionListRelationFilter.schema.ts

export const SessionListRelationFilterObjectSchema: z.ZodType<Prisma.SessionListRelationFilter, Prisma.SessionListRelationFilter> = z.object({
  every: z.lazy(() => SessionWhereInputObjectSchema).optional(),
  some: z.lazy(() => SessionWhereInputObjectSchema).optional(),
  none: z.lazy(() => SessionWhereInputObjectSchema).optional()
}).strict();
export const SessionListRelationFilterObjectZodSchema = z.object({
  every: z.lazy(() => SessionWhereInputObjectSchema).optional(),
  some: z.lazy(() => SessionWhereInputObjectSchema).optional(),
  none: z.lazy(() => SessionWhereInputObjectSchema).optional()
}).strict();


// File: AccountListRelationFilter.schema.ts

export const AccountListRelationFilterObjectSchema: z.ZodType<Prisma.AccountListRelationFilter, Prisma.AccountListRelationFilter> = z.object({
  every: z.lazy(() => AccountWhereInputObjectSchema).optional(),
  some: z.lazy(() => AccountWhereInputObjectSchema).optional(),
  none: z.lazy(() => AccountWhereInputObjectSchema).optional()
}).strict();
export const AccountListRelationFilterObjectZodSchema = z.object({
  every: z.lazy(() => AccountWhereInputObjectSchema).optional(),
  some: z.lazy(() => AccountWhereInputObjectSchema).optional(),
  none: z.lazy(() => AccountWhereInputObjectSchema).optional()
}).strict();


// File: PasskeyListRelationFilter.schema.ts

export const PasskeyListRelationFilterObjectSchema: z.ZodType<Prisma.PasskeyListRelationFilter, Prisma.PasskeyListRelationFilter> = z.object({
  every: z.lazy(() => PasskeyWhereInputObjectSchema).optional(),
  some: z.lazy(() => PasskeyWhereInputObjectSchema).optional(),
  none: z.lazy(() => PasskeyWhereInputObjectSchema).optional()
}).strict();
export const PasskeyListRelationFilterObjectZodSchema = z.object({
  every: z.lazy(() => PasskeyWhereInputObjectSchema).optional(),
  some: z.lazy(() => PasskeyWhereInputObjectSchema).optional(),
  none: z.lazy(() => PasskeyWhereInputObjectSchema).optional()
}).strict();


// File: InvitationListRelationFilter.schema.ts

export const InvitationListRelationFilterObjectSchema: z.ZodType<Prisma.InvitationListRelationFilter, Prisma.InvitationListRelationFilter> = z.object({
  every: z.lazy(() => InvitationWhereInputObjectSchema).optional(),
  some: z.lazy(() => InvitationWhereInputObjectSchema).optional(),
  none: z.lazy(() => InvitationWhereInputObjectSchema).optional()
}).strict();
export const InvitationListRelationFilterObjectZodSchema = z.object({
  every: z.lazy(() => InvitationWhereInputObjectSchema).optional(),
  some: z.lazy(() => InvitationWhereInputObjectSchema).optional(),
  none: z.lazy(() => InvitationWhereInputObjectSchema).optional()
}).strict();


// File: PurchaseListRelationFilter.schema.ts

export const PurchaseListRelationFilterObjectSchema: z.ZodType<Prisma.PurchaseListRelationFilter, Prisma.PurchaseListRelationFilter> = z.object({
  every: z.lazy(() => PurchaseWhereInputObjectSchema).optional(),
  some: z.lazy(() => PurchaseWhereInputObjectSchema).optional(),
  none: z.lazy(() => PurchaseWhereInputObjectSchema).optional()
}).strict();
export const PurchaseListRelationFilterObjectZodSchema = z.object({
  every: z.lazy(() => PurchaseWhereInputObjectSchema).optional(),
  some: z.lazy(() => PurchaseWhereInputObjectSchema).optional(),
  none: z.lazy(() => PurchaseWhereInputObjectSchema).optional()
}).strict();


// File: MemberListRelationFilter.schema.ts

export const MemberListRelationFilterObjectSchema: z.ZodType<Prisma.MemberListRelationFilter, Prisma.MemberListRelationFilter> = z.object({
  every: z.lazy(() => MemberWhereInputObjectSchema).optional(),
  some: z.lazy(() => MemberWhereInputObjectSchema).optional(),
  none: z.lazy(() => MemberWhereInputObjectSchema).optional()
}).strict();
export const MemberListRelationFilterObjectZodSchema = z.object({
  every: z.lazy(() => MemberWhereInputObjectSchema).optional(),
  some: z.lazy(() => MemberWhereInputObjectSchema).optional(),
  none: z.lazy(() => MemberWhereInputObjectSchema).optional()
}).strict();


// File: TwoFactorListRelationFilter.schema.ts

export const TwoFactorListRelationFilterObjectSchema: z.ZodType<Prisma.TwoFactorListRelationFilter, Prisma.TwoFactorListRelationFilter> = z.object({
  every: z.lazy(() => TwoFactorWhereInputObjectSchema).optional(),
  some: z.lazy(() => TwoFactorWhereInputObjectSchema).optional(),
  none: z.lazy(() => TwoFactorWhereInputObjectSchema).optional()
}).strict();
export const TwoFactorListRelationFilterObjectZodSchema = z.object({
  every: z.lazy(() => TwoFactorWhereInputObjectSchema).optional(),
  some: z.lazy(() => TwoFactorWhereInputObjectSchema).optional(),
  none: z.lazy(() => TwoFactorWhereInputObjectSchema).optional()
}).strict();


// File: AiChatListRelationFilter.schema.ts

export const AiChatListRelationFilterObjectSchema: z.ZodType<Prisma.AiChatListRelationFilter, Prisma.AiChatListRelationFilter> = z.object({
  every: z.lazy(() => AiChatWhereInputObjectSchema).optional(),
  some: z.lazy(() => AiChatWhereInputObjectSchema).optional(),
  none: z.lazy(() => AiChatWhereInputObjectSchema).optional()
}).strict();
export const AiChatListRelationFilterObjectZodSchema = z.object({
  every: z.lazy(() => AiChatWhereInputObjectSchema).optional(),
  some: z.lazy(() => AiChatWhereInputObjectSchema).optional(),
  none: z.lazy(() => AiChatWhereInputObjectSchema).optional()
}).strict();


// File: SortOrderInput.schema.ts

export const SortOrderInputObjectSchema: z.ZodType<Prisma.SortOrderInput, Prisma.SortOrderInput> = z.object({
  sort: SortOrderSchema,
  nulls: NullsOrderSchema.optional()
}).strict();
export const SortOrderInputObjectZodSchema = z.object({
  sort: SortOrderSchema,
  nulls: NullsOrderSchema.optional()
}).strict();


// File: SessionOrderByRelationAggregateInput.schema.ts

export const SessionOrderByRelationAggregateInputObjectSchema: z.ZodType<Prisma.SessionOrderByRelationAggregateInput, Prisma.SessionOrderByRelationAggregateInput> = z.object({
  _count: SortOrderSchema.optional()
}).strict();
export const SessionOrderByRelationAggregateInputObjectZodSchema = z.object({
  _count: SortOrderSchema.optional()
}).strict();


// File: AccountOrderByRelationAggregateInput.schema.ts

export const AccountOrderByRelationAggregateInputObjectSchema: z.ZodType<Prisma.AccountOrderByRelationAggregateInput, Prisma.AccountOrderByRelationAggregateInput> = z.object({
  _count: SortOrderSchema.optional()
}).strict();
export const AccountOrderByRelationAggregateInputObjectZodSchema = z.object({
  _count: SortOrderSchema.optional()
}).strict();


// File: PasskeyOrderByRelationAggregateInput.schema.ts

export const PasskeyOrderByRelationAggregateInputObjectSchema: z.ZodType<Prisma.PasskeyOrderByRelationAggregateInput, Prisma.PasskeyOrderByRelationAggregateInput> = z.object({
  _count: SortOrderSchema.optional()
}).strict();
export const PasskeyOrderByRelationAggregateInputObjectZodSchema = z.object({
  _count: SortOrderSchema.optional()
}).strict();


// File: InvitationOrderByRelationAggregateInput.schema.ts

export const InvitationOrderByRelationAggregateInputObjectSchema: z.ZodType<Prisma.InvitationOrderByRelationAggregateInput, Prisma.InvitationOrderByRelationAggregateInput> = z.object({
  _count: SortOrderSchema.optional()
}).strict();
export const InvitationOrderByRelationAggregateInputObjectZodSchema = z.object({
  _count: SortOrderSchema.optional()
}).strict();


// File: PurchaseOrderByRelationAggregateInput.schema.ts

export const PurchaseOrderByRelationAggregateInputObjectSchema: z.ZodType<Prisma.PurchaseOrderByRelationAggregateInput, Prisma.PurchaseOrderByRelationAggregateInput> = z.object({
  _count: SortOrderSchema.optional()
}).strict();
export const PurchaseOrderByRelationAggregateInputObjectZodSchema = z.object({
  _count: SortOrderSchema.optional()
}).strict();


// File: MemberOrderByRelationAggregateInput.schema.ts

export const MemberOrderByRelationAggregateInputObjectSchema: z.ZodType<Prisma.MemberOrderByRelationAggregateInput, Prisma.MemberOrderByRelationAggregateInput> = z.object({
  _count: SortOrderSchema.optional()
}).strict();
export const MemberOrderByRelationAggregateInputObjectZodSchema = z.object({
  _count: SortOrderSchema.optional()
}).strict();


// File: TwoFactorOrderByRelationAggregateInput.schema.ts

export const TwoFactorOrderByRelationAggregateInputObjectSchema: z.ZodType<Prisma.TwoFactorOrderByRelationAggregateInput, Prisma.TwoFactorOrderByRelationAggregateInput> = z.object({
  _count: SortOrderSchema.optional()
}).strict();
export const TwoFactorOrderByRelationAggregateInputObjectZodSchema = z.object({
  _count: SortOrderSchema.optional()
}).strict();


// File: AiChatOrderByRelationAggregateInput.schema.ts

export const AiChatOrderByRelationAggregateInputObjectSchema: z.ZodType<Prisma.AiChatOrderByRelationAggregateInput, Prisma.AiChatOrderByRelationAggregateInput> = z.object({
  _count: SortOrderSchema.optional()
}).strict();
export const AiChatOrderByRelationAggregateInputObjectZodSchema = z.object({
  _count: SortOrderSchema.optional()
}).strict();


// File: UserCountOrderByAggregateInput.schema.ts

export const UserCountOrderByAggregateInputObjectSchema: z.ZodType<Prisma.UserCountOrderByAggregateInput, Prisma.UserCountOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  name: SortOrderSchema.optional(),
  email: SortOrderSchema.optional(),
  emailVerified: SortOrderSchema.optional(),
  image: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional(),
  username: SortOrderSchema.optional(),
  role: SortOrderSchema.optional(),
  banned: SortOrderSchema.optional(),
  banReason: SortOrderSchema.optional(),
  banExpires: SortOrderSchema.optional(),
  onboardingComplete: SortOrderSchema.optional(),
  paymentsCustomerId: SortOrderSchema.optional(),
  locale: SortOrderSchema.optional(),
  twoFactorEnabled: SortOrderSchema.optional()
}).strict();
export const UserCountOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  name: SortOrderSchema.optional(),
  email: SortOrderSchema.optional(),
  emailVerified: SortOrderSchema.optional(),
  image: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional(),
  username: SortOrderSchema.optional(),
  role: SortOrderSchema.optional(),
  banned: SortOrderSchema.optional(),
  banReason: SortOrderSchema.optional(),
  banExpires: SortOrderSchema.optional(),
  onboardingComplete: SortOrderSchema.optional(),
  paymentsCustomerId: SortOrderSchema.optional(),
  locale: SortOrderSchema.optional(),
  twoFactorEnabled: SortOrderSchema.optional()
}).strict();


// File: UserMaxOrderByAggregateInput.schema.ts

export const UserMaxOrderByAggregateInputObjectSchema: z.ZodType<Prisma.UserMaxOrderByAggregateInput, Prisma.UserMaxOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  name: SortOrderSchema.optional(),
  email: SortOrderSchema.optional(),
  emailVerified: SortOrderSchema.optional(),
  image: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional(),
  username: SortOrderSchema.optional(),
  role: SortOrderSchema.optional(),
  banned: SortOrderSchema.optional(),
  banReason: SortOrderSchema.optional(),
  banExpires: SortOrderSchema.optional(),
  onboardingComplete: SortOrderSchema.optional(),
  paymentsCustomerId: SortOrderSchema.optional(),
  locale: SortOrderSchema.optional(),
  twoFactorEnabled: SortOrderSchema.optional()
}).strict();
export const UserMaxOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  name: SortOrderSchema.optional(),
  email: SortOrderSchema.optional(),
  emailVerified: SortOrderSchema.optional(),
  image: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional(),
  username: SortOrderSchema.optional(),
  role: SortOrderSchema.optional(),
  banned: SortOrderSchema.optional(),
  banReason: SortOrderSchema.optional(),
  banExpires: SortOrderSchema.optional(),
  onboardingComplete: SortOrderSchema.optional(),
  paymentsCustomerId: SortOrderSchema.optional(),
  locale: SortOrderSchema.optional(),
  twoFactorEnabled: SortOrderSchema.optional()
}).strict();


// File: UserMinOrderByAggregateInput.schema.ts

export const UserMinOrderByAggregateInputObjectSchema: z.ZodType<Prisma.UserMinOrderByAggregateInput, Prisma.UserMinOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  name: SortOrderSchema.optional(),
  email: SortOrderSchema.optional(),
  emailVerified: SortOrderSchema.optional(),
  image: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional(),
  username: SortOrderSchema.optional(),
  role: SortOrderSchema.optional(),
  banned: SortOrderSchema.optional(),
  banReason: SortOrderSchema.optional(),
  banExpires: SortOrderSchema.optional(),
  onboardingComplete: SortOrderSchema.optional(),
  paymentsCustomerId: SortOrderSchema.optional(),
  locale: SortOrderSchema.optional(),
  twoFactorEnabled: SortOrderSchema.optional()
}).strict();
export const UserMinOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  name: SortOrderSchema.optional(),
  email: SortOrderSchema.optional(),
  emailVerified: SortOrderSchema.optional(),
  image: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional(),
  username: SortOrderSchema.optional(),
  role: SortOrderSchema.optional(),
  banned: SortOrderSchema.optional(),
  banReason: SortOrderSchema.optional(),
  banExpires: SortOrderSchema.optional(),
  onboardingComplete: SortOrderSchema.optional(),
  paymentsCustomerId: SortOrderSchema.optional(),
  locale: SortOrderSchema.optional(),
  twoFactorEnabled: SortOrderSchema.optional()
}).strict();


// File: StringWithAggregatesFilter.schema.ts

export const StringWithAggregatesFilterObjectSchema: z.ZodType<Prisma.StringWithAggregatesFilter, Prisma.StringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: QueryModeSchema.optional(),
  not: z.union([z.string(), z.lazy(() => NestedStringWithAggregatesFilterObjectSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedStringFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedStringFilterObjectSchema).optional()
}).strict();
export const StringWithAggregatesFilterObjectZodSchema = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: QueryModeSchema.optional(),
  not: z.union([z.string(), z.lazy(() => NestedStringWithAggregatesFilterObjectSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedStringFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedStringFilterObjectSchema).optional()
}).strict();


// File: BoolWithAggregatesFilter.schema.ts

export const BoolWithAggregatesFilterObjectSchema: z.ZodType<Prisma.BoolWithAggregatesFilter, Prisma.BoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([z.boolean(), z.lazy(() => NestedBoolWithAggregatesFilterObjectSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterObjectSchema).optional()
}).strict();
export const BoolWithAggregatesFilterObjectZodSchema = z.object({
  equals: z.boolean().optional(),
  not: z.union([z.boolean(), z.lazy(() => NestedBoolWithAggregatesFilterObjectSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterObjectSchema).optional()
}).strict();


// File: StringNullableWithAggregatesFilter.schema.ts

export const StringNullableWithAggregatesFilterObjectSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter, Prisma.StringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: QueryModeSchema.optional(),
  not: z.union([z.string(), z.lazy(() => NestedStringNullableWithAggregatesFilterObjectSchema)]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterObjectSchema).optional()
}).strict();
export const StringNullableWithAggregatesFilterObjectZodSchema = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: QueryModeSchema.optional(),
  not: z.union([z.string(), z.lazy(() => NestedStringNullableWithAggregatesFilterObjectSchema)]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterObjectSchema).optional()
}).strict();


// File: DateTimeWithAggregatesFilter.schema.ts

export const DateTimeWithAggregatesFilterObjectSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter, Prisma.DateTimeWithAggregatesFilter> = z.object({
  equals: z.union([z.date(), z.iso.datetime()]).optional(),
  in: z.union([z.date().array(), z.iso.datetime().array()]).optional(),
  notIn: z.union([z.date().array(), z.iso.datetime().array()]).optional(),
  lt: z.union([z.date(), z.iso.datetime()]).optional(),
  lte: z.union([z.date(), z.iso.datetime()]).optional(),
  gt: z.union([z.date(), z.iso.datetime()]).optional(),
  gte: z.union([z.date(), z.iso.datetime()]).optional(),
  not: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NestedDateTimeWithAggregatesFilterObjectSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterObjectSchema).optional()
}).strict();
export const DateTimeWithAggregatesFilterObjectZodSchema = z.object({
  equals: z.union([z.date(), z.iso.datetime()]).optional(),
  in: z.union([z.date().array(), z.iso.datetime().array()]).optional(),
  notIn: z.union([z.date().array(), z.iso.datetime().array()]).optional(),
  lt: z.union([z.date(), z.iso.datetime()]).optional(),
  lte: z.union([z.date(), z.iso.datetime()]).optional(),
  gt: z.union([z.date(), z.iso.datetime()]).optional(),
  gte: z.union([z.date(), z.iso.datetime()]).optional(),
  not: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NestedDateTimeWithAggregatesFilterObjectSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterObjectSchema).optional()
}).strict();


// File: BoolNullableWithAggregatesFilter.schema.ts

export const BoolNullableWithAggregatesFilterObjectSchema: z.ZodType<Prisma.BoolNullableWithAggregatesFilter, Prisma.BoolNullableWithAggregatesFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([z.boolean(), z.lazy(() => NestedBoolNullableWithAggregatesFilterObjectSchema)]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterObjectSchema).optional()
}).strict();
export const BoolNullableWithAggregatesFilterObjectZodSchema = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([z.boolean(), z.lazy(() => NestedBoolNullableWithAggregatesFilterObjectSchema)]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterObjectSchema).optional()
}).strict();


// File: DateTimeNullableWithAggregatesFilter.schema.ts

export const DateTimeNullableWithAggregatesFilterObjectSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter, Prisma.DateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  in: z.union([z.date().array(), z.iso.datetime().array()]).optional().nullable(),
  notIn: z.union([z.date().array(), z.iso.datetime().array()]).optional().nullable(),
  lt: z.union([z.date(), z.iso.datetime()]).optional(),
  lte: z.union([z.date(), z.iso.datetime()]).optional(),
  gt: z.union([z.date(), z.iso.datetime()]).optional(),
  gte: z.union([z.date(), z.iso.datetime()]).optional(),
  not: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NestedDateTimeNullableWithAggregatesFilterObjectSchema)]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterObjectSchema).optional()
}).strict();
export const DateTimeNullableWithAggregatesFilterObjectZodSchema = z.object({
  equals: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  in: z.union([z.date().array(), z.iso.datetime().array()]).optional().nullable(),
  notIn: z.union([z.date().array(), z.iso.datetime().array()]).optional().nullable(),
  lt: z.union([z.date(), z.iso.datetime()]).optional(),
  lte: z.union([z.date(), z.iso.datetime()]).optional(),
  gt: z.union([z.date(), z.iso.datetime()]).optional(),
  gte: z.union([z.date(), z.iso.datetime()]).optional(),
  not: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NestedDateTimeNullableWithAggregatesFilterObjectSchema)]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterObjectSchema).optional()
}).strict();


// File: UserScalarRelationFilter.schema.ts

export const UserScalarRelationFilterObjectSchema: z.ZodType<Prisma.UserScalarRelationFilter, Prisma.UserScalarRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputObjectSchema).optional(),
  isNot: z.lazy(() => UserWhereInputObjectSchema).optional()
}).strict();
export const UserScalarRelationFilterObjectZodSchema = z.object({
  is: z.lazy(() => UserWhereInputObjectSchema).optional(),
  isNot: z.lazy(() => UserWhereInputObjectSchema).optional()
}).strict();


// File: SessionCountOrderByAggregateInput.schema.ts

export const SessionCountOrderByAggregateInputObjectSchema: z.ZodType<Prisma.SessionCountOrderByAggregateInput, Prisma.SessionCountOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  ipAddress: SortOrderSchema.optional(),
  userAgent: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  impersonatedBy: SortOrderSchema.optional(),
  activeOrganizationId: SortOrderSchema.optional(),
  token: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional()
}).strict();
export const SessionCountOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  ipAddress: SortOrderSchema.optional(),
  userAgent: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  impersonatedBy: SortOrderSchema.optional(),
  activeOrganizationId: SortOrderSchema.optional(),
  token: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional()
}).strict();


// File: SessionMaxOrderByAggregateInput.schema.ts

export const SessionMaxOrderByAggregateInputObjectSchema: z.ZodType<Prisma.SessionMaxOrderByAggregateInput, Prisma.SessionMaxOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  ipAddress: SortOrderSchema.optional(),
  userAgent: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  impersonatedBy: SortOrderSchema.optional(),
  activeOrganizationId: SortOrderSchema.optional(),
  token: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional()
}).strict();
export const SessionMaxOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  ipAddress: SortOrderSchema.optional(),
  userAgent: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  impersonatedBy: SortOrderSchema.optional(),
  activeOrganizationId: SortOrderSchema.optional(),
  token: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional()
}).strict();


// File: SessionMinOrderByAggregateInput.schema.ts

export const SessionMinOrderByAggregateInputObjectSchema: z.ZodType<Prisma.SessionMinOrderByAggregateInput, Prisma.SessionMinOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  ipAddress: SortOrderSchema.optional(),
  userAgent: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  impersonatedBy: SortOrderSchema.optional(),
  activeOrganizationId: SortOrderSchema.optional(),
  token: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional()
}).strict();
export const SessionMinOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  ipAddress: SortOrderSchema.optional(),
  userAgent: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  impersonatedBy: SortOrderSchema.optional(),
  activeOrganizationId: SortOrderSchema.optional(),
  token: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional()
}).strict();


// File: AccountCountOrderByAggregateInput.schema.ts

export const AccountCountOrderByAggregateInputObjectSchema: z.ZodType<Prisma.AccountCountOrderByAggregateInput, Prisma.AccountCountOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  accountId: SortOrderSchema.optional(),
  providerId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  accessToken: SortOrderSchema.optional(),
  refreshToken: SortOrderSchema.optional(),
  idToken: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  password: SortOrderSchema.optional(),
  accessTokenExpiresAt: SortOrderSchema.optional(),
  refreshTokenExpiresAt: SortOrderSchema.optional(),
  scope: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional()
}).strict();
export const AccountCountOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  accountId: SortOrderSchema.optional(),
  providerId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  accessToken: SortOrderSchema.optional(),
  refreshToken: SortOrderSchema.optional(),
  idToken: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  password: SortOrderSchema.optional(),
  accessTokenExpiresAt: SortOrderSchema.optional(),
  refreshTokenExpiresAt: SortOrderSchema.optional(),
  scope: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional()
}).strict();


// File: AccountMaxOrderByAggregateInput.schema.ts

export const AccountMaxOrderByAggregateInputObjectSchema: z.ZodType<Prisma.AccountMaxOrderByAggregateInput, Prisma.AccountMaxOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  accountId: SortOrderSchema.optional(),
  providerId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  accessToken: SortOrderSchema.optional(),
  refreshToken: SortOrderSchema.optional(),
  idToken: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  password: SortOrderSchema.optional(),
  accessTokenExpiresAt: SortOrderSchema.optional(),
  refreshTokenExpiresAt: SortOrderSchema.optional(),
  scope: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional()
}).strict();
export const AccountMaxOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  accountId: SortOrderSchema.optional(),
  providerId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  accessToken: SortOrderSchema.optional(),
  refreshToken: SortOrderSchema.optional(),
  idToken: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  password: SortOrderSchema.optional(),
  accessTokenExpiresAt: SortOrderSchema.optional(),
  refreshTokenExpiresAt: SortOrderSchema.optional(),
  scope: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional()
}).strict();


// File: AccountMinOrderByAggregateInput.schema.ts

export const AccountMinOrderByAggregateInputObjectSchema: z.ZodType<Prisma.AccountMinOrderByAggregateInput, Prisma.AccountMinOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  accountId: SortOrderSchema.optional(),
  providerId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  accessToken: SortOrderSchema.optional(),
  refreshToken: SortOrderSchema.optional(),
  idToken: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  password: SortOrderSchema.optional(),
  accessTokenExpiresAt: SortOrderSchema.optional(),
  refreshTokenExpiresAt: SortOrderSchema.optional(),
  scope: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional()
}).strict();
export const AccountMinOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  accountId: SortOrderSchema.optional(),
  providerId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  accessToken: SortOrderSchema.optional(),
  refreshToken: SortOrderSchema.optional(),
  idToken: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  password: SortOrderSchema.optional(),
  accessTokenExpiresAt: SortOrderSchema.optional(),
  refreshTokenExpiresAt: SortOrderSchema.optional(),
  scope: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional()
}).strict();


// File: VerificationCountOrderByAggregateInput.schema.ts

export const VerificationCountOrderByAggregateInputObjectSchema: z.ZodType<Prisma.VerificationCountOrderByAggregateInput, Prisma.VerificationCountOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  identifier: SortOrderSchema.optional(),
  value: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional()
}).strict();
export const VerificationCountOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  identifier: SortOrderSchema.optional(),
  value: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional()
}).strict();


// File: VerificationMaxOrderByAggregateInput.schema.ts

export const VerificationMaxOrderByAggregateInputObjectSchema: z.ZodType<Prisma.VerificationMaxOrderByAggregateInput, Prisma.VerificationMaxOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  identifier: SortOrderSchema.optional(),
  value: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional()
}).strict();
export const VerificationMaxOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  identifier: SortOrderSchema.optional(),
  value: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional()
}).strict();


// File: VerificationMinOrderByAggregateInput.schema.ts

export const VerificationMinOrderByAggregateInputObjectSchema: z.ZodType<Prisma.VerificationMinOrderByAggregateInput, Prisma.VerificationMinOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  identifier: SortOrderSchema.optional(),
  value: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional()
}).strict();
export const VerificationMinOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  identifier: SortOrderSchema.optional(),
  value: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional()
}).strict();


// File: IntFilter.schema.ts

export const IntFilterObjectSchema: z.ZodType<Prisma.IntFilter, Prisma.IntFilter> = z.object({
  equals: z.number().int().optional(),
  in: z.number().int().array().optional(),
  notIn: z.number().int().array().optional(),
  lt: z.number().int().optional(),
  lte: z.number().int().optional(),
  gt: z.number().int().optional(),
  gte: z.number().int().optional(),
  not: z.union([z.number().int(), z.lazy(() => NestedIntFilterObjectSchema)]).optional()
}).strict();
export const IntFilterObjectZodSchema = z.object({
  equals: z.number().int().optional(),
  in: z.number().int().array().optional(),
  notIn: z.number().int().array().optional(),
  lt: z.number().int().optional(),
  lte: z.number().int().optional(),
  gt: z.number().int().optional(),
  gte: z.number().int().optional(),
  not: z.union([z.number().int(), z.lazy(() => NestedIntFilterObjectSchema)]).optional()
}).strict();


// File: PasskeyCountOrderByAggregateInput.schema.ts

export const PasskeyCountOrderByAggregateInputObjectSchema: z.ZodType<Prisma.PasskeyCountOrderByAggregateInput, Prisma.PasskeyCountOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  name: SortOrderSchema.optional(),
  publicKey: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  credentialID: SortOrderSchema.optional(),
  counter: SortOrderSchema.optional(),
  deviceType: SortOrderSchema.optional(),
  backedUp: SortOrderSchema.optional(),
  transports: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional()
}).strict();
export const PasskeyCountOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  name: SortOrderSchema.optional(),
  publicKey: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  credentialID: SortOrderSchema.optional(),
  counter: SortOrderSchema.optional(),
  deviceType: SortOrderSchema.optional(),
  backedUp: SortOrderSchema.optional(),
  transports: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional()
}).strict();


// File: PasskeyAvgOrderByAggregateInput.schema.ts

export const PasskeyAvgOrderByAggregateInputObjectSchema: z.ZodType<Prisma.PasskeyAvgOrderByAggregateInput, Prisma.PasskeyAvgOrderByAggregateInput> = z.object({
  counter: SortOrderSchema.optional()
}).strict();
export const PasskeyAvgOrderByAggregateInputObjectZodSchema = z.object({
  counter: SortOrderSchema.optional()
}).strict();


// File: PasskeyMaxOrderByAggregateInput.schema.ts

export const PasskeyMaxOrderByAggregateInputObjectSchema: z.ZodType<Prisma.PasskeyMaxOrderByAggregateInput, Prisma.PasskeyMaxOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  name: SortOrderSchema.optional(),
  publicKey: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  credentialID: SortOrderSchema.optional(),
  counter: SortOrderSchema.optional(),
  deviceType: SortOrderSchema.optional(),
  backedUp: SortOrderSchema.optional(),
  transports: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional()
}).strict();
export const PasskeyMaxOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  name: SortOrderSchema.optional(),
  publicKey: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  credentialID: SortOrderSchema.optional(),
  counter: SortOrderSchema.optional(),
  deviceType: SortOrderSchema.optional(),
  backedUp: SortOrderSchema.optional(),
  transports: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional()
}).strict();


// File: PasskeyMinOrderByAggregateInput.schema.ts

export const PasskeyMinOrderByAggregateInputObjectSchema: z.ZodType<Prisma.PasskeyMinOrderByAggregateInput, Prisma.PasskeyMinOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  name: SortOrderSchema.optional(),
  publicKey: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  credentialID: SortOrderSchema.optional(),
  counter: SortOrderSchema.optional(),
  deviceType: SortOrderSchema.optional(),
  backedUp: SortOrderSchema.optional(),
  transports: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional()
}).strict();
export const PasskeyMinOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  name: SortOrderSchema.optional(),
  publicKey: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  credentialID: SortOrderSchema.optional(),
  counter: SortOrderSchema.optional(),
  deviceType: SortOrderSchema.optional(),
  backedUp: SortOrderSchema.optional(),
  transports: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional()
}).strict();


// File: PasskeySumOrderByAggregateInput.schema.ts

export const PasskeySumOrderByAggregateInputObjectSchema: z.ZodType<Prisma.PasskeySumOrderByAggregateInput, Prisma.PasskeySumOrderByAggregateInput> = z.object({
  counter: SortOrderSchema.optional()
}).strict();
export const PasskeySumOrderByAggregateInputObjectZodSchema = z.object({
  counter: SortOrderSchema.optional()
}).strict();


// File: IntWithAggregatesFilter.schema.ts

export const IntWithAggregatesFilterObjectSchema: z.ZodType<Prisma.IntWithAggregatesFilter, Prisma.IntWithAggregatesFilter> = z.object({
  equals: z.number().int().optional(),
  in: z.number().int().array().optional(),
  notIn: z.number().int().array().optional(),
  lt: z.number().int().optional(),
  lte: z.number().int().optional(),
  gt: z.number().int().optional(),
  gte: z.number().int().optional(),
  not: z.union([z.number().int(), z.lazy(() => NestedIntWithAggregatesFilterObjectSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterObjectSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterObjectSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedIntFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedIntFilterObjectSchema).optional()
}).strict();
export const IntWithAggregatesFilterObjectZodSchema = z.object({
  equals: z.number().int().optional(),
  in: z.number().int().array().optional(),
  notIn: z.number().int().array().optional(),
  lt: z.number().int().optional(),
  lte: z.number().int().optional(),
  gt: z.number().int().optional(),
  gte: z.number().int().optional(),
  not: z.union([z.number().int(), z.lazy(() => NestedIntWithAggregatesFilterObjectSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterObjectSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterObjectSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedIntFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedIntFilterObjectSchema).optional()
}).strict();


// File: TwoFactorCountOrderByAggregateInput.schema.ts

export const TwoFactorCountOrderByAggregateInputObjectSchema: z.ZodType<Prisma.TwoFactorCountOrderByAggregateInput, Prisma.TwoFactorCountOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  secret: SortOrderSchema.optional(),
  backupCodes: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional()
}).strict();
export const TwoFactorCountOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  secret: SortOrderSchema.optional(),
  backupCodes: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional()
}).strict();


// File: TwoFactorMaxOrderByAggregateInput.schema.ts

export const TwoFactorMaxOrderByAggregateInputObjectSchema: z.ZodType<Prisma.TwoFactorMaxOrderByAggregateInput, Prisma.TwoFactorMaxOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  secret: SortOrderSchema.optional(),
  backupCodes: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional()
}).strict();
export const TwoFactorMaxOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  secret: SortOrderSchema.optional(),
  backupCodes: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional()
}).strict();


// File: TwoFactorMinOrderByAggregateInput.schema.ts

export const TwoFactorMinOrderByAggregateInputObjectSchema: z.ZodType<Prisma.TwoFactorMinOrderByAggregateInput, Prisma.TwoFactorMinOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  secret: SortOrderSchema.optional(),
  backupCodes: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional()
}).strict();
export const TwoFactorMinOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  secret: SortOrderSchema.optional(),
  backupCodes: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional()
}).strict();


// File: OrganizationCountOrderByAggregateInput.schema.ts

export const OrganizationCountOrderByAggregateInputObjectSchema: z.ZodType<Prisma.OrganizationCountOrderByAggregateInput, Prisma.OrganizationCountOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  name: SortOrderSchema.optional(),
  slug: SortOrderSchema.optional(),
  logo: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  metadata: SortOrderSchema.optional(),
  paymentsCustomerId: SortOrderSchema.optional()
}).strict();
export const OrganizationCountOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  name: SortOrderSchema.optional(),
  slug: SortOrderSchema.optional(),
  logo: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  metadata: SortOrderSchema.optional(),
  paymentsCustomerId: SortOrderSchema.optional()
}).strict();


// File: OrganizationMaxOrderByAggregateInput.schema.ts

export const OrganizationMaxOrderByAggregateInputObjectSchema: z.ZodType<Prisma.OrganizationMaxOrderByAggregateInput, Prisma.OrganizationMaxOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  name: SortOrderSchema.optional(),
  slug: SortOrderSchema.optional(),
  logo: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  metadata: SortOrderSchema.optional(),
  paymentsCustomerId: SortOrderSchema.optional()
}).strict();
export const OrganizationMaxOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  name: SortOrderSchema.optional(),
  slug: SortOrderSchema.optional(),
  logo: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  metadata: SortOrderSchema.optional(),
  paymentsCustomerId: SortOrderSchema.optional()
}).strict();


// File: OrganizationMinOrderByAggregateInput.schema.ts

export const OrganizationMinOrderByAggregateInputObjectSchema: z.ZodType<Prisma.OrganizationMinOrderByAggregateInput, Prisma.OrganizationMinOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  name: SortOrderSchema.optional(),
  slug: SortOrderSchema.optional(),
  logo: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  metadata: SortOrderSchema.optional(),
  paymentsCustomerId: SortOrderSchema.optional()
}).strict();
export const OrganizationMinOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  name: SortOrderSchema.optional(),
  slug: SortOrderSchema.optional(),
  logo: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  metadata: SortOrderSchema.optional(),
  paymentsCustomerId: SortOrderSchema.optional()
}).strict();


// File: OrganizationScalarRelationFilter.schema.ts

export const OrganizationScalarRelationFilterObjectSchema: z.ZodType<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationScalarRelationFilter> = z.object({
  is: z.lazy(() => OrganizationWhereInputObjectSchema).optional(),
  isNot: z.lazy(() => OrganizationWhereInputObjectSchema).optional()
}).strict();
export const OrganizationScalarRelationFilterObjectZodSchema = z.object({
  is: z.lazy(() => OrganizationWhereInputObjectSchema).optional(),
  isNot: z.lazy(() => OrganizationWhereInputObjectSchema).optional()
}).strict();


// File: MemberOrganizationIdUserIdCompoundUniqueInput.schema.ts


export const MemberOrganizationIdUserIdCompoundUniqueInputObjectSchema: z.ZodType<Prisma.MemberOrganizationIdUserIdCompoundUniqueInput, Prisma.MemberOrganizationIdUserIdCompoundUniqueInput> = z.object({
  organizationId: z.string(),
  userId: z.string()
}).strict();
export const MemberOrganizationIdUserIdCompoundUniqueInputObjectZodSchema = z.object({
  organizationId: z.string(),
  userId: z.string()
}).strict();


// File: MemberCountOrderByAggregateInput.schema.ts

export const MemberCountOrderByAggregateInputObjectSchema: z.ZodType<Prisma.MemberCountOrderByAggregateInput, Prisma.MemberCountOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  role: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional()
}).strict();
export const MemberCountOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  role: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional()
}).strict();


// File: MemberMaxOrderByAggregateInput.schema.ts

export const MemberMaxOrderByAggregateInputObjectSchema: z.ZodType<Prisma.MemberMaxOrderByAggregateInput, Prisma.MemberMaxOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  role: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional()
}).strict();
export const MemberMaxOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  role: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional()
}).strict();


// File: MemberMinOrderByAggregateInput.schema.ts

export const MemberMinOrderByAggregateInputObjectSchema: z.ZodType<Prisma.MemberMinOrderByAggregateInput, Prisma.MemberMinOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  role: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional()
}).strict();
export const MemberMinOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  role: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional()
}).strict();


// File: InvitationCountOrderByAggregateInput.schema.ts

export const InvitationCountOrderByAggregateInputObjectSchema: z.ZodType<Prisma.InvitationCountOrderByAggregateInput, Prisma.InvitationCountOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  email: SortOrderSchema.optional(),
  role: SortOrderSchema.optional(),
  status: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  inviterId: SortOrderSchema.optional()
}).strict();
export const InvitationCountOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  email: SortOrderSchema.optional(),
  role: SortOrderSchema.optional(),
  status: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  inviterId: SortOrderSchema.optional()
}).strict();


// File: InvitationMaxOrderByAggregateInput.schema.ts

export const InvitationMaxOrderByAggregateInputObjectSchema: z.ZodType<Prisma.InvitationMaxOrderByAggregateInput, Prisma.InvitationMaxOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  email: SortOrderSchema.optional(),
  role: SortOrderSchema.optional(),
  status: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  inviterId: SortOrderSchema.optional()
}).strict();
export const InvitationMaxOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  email: SortOrderSchema.optional(),
  role: SortOrderSchema.optional(),
  status: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  inviterId: SortOrderSchema.optional()
}).strict();


// File: InvitationMinOrderByAggregateInput.schema.ts

export const InvitationMinOrderByAggregateInputObjectSchema: z.ZodType<Prisma.InvitationMinOrderByAggregateInput, Prisma.InvitationMinOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  email: SortOrderSchema.optional(),
  role: SortOrderSchema.optional(),
  status: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  inviterId: SortOrderSchema.optional()
}).strict();
export const InvitationMinOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  email: SortOrderSchema.optional(),
  role: SortOrderSchema.optional(),
  status: SortOrderSchema.optional(),
  expiresAt: SortOrderSchema.optional(),
  inviterId: SortOrderSchema.optional()
}).strict();


// File: EnumPurchaseTypeFilter.schema.ts

export const EnumPurchaseTypeFilterObjectSchema: z.ZodType<Prisma.EnumPurchaseTypeFilter, Prisma.EnumPurchaseTypeFilter> = z.object({
  equals: PurchaseTypeSchema.optional(),
  in: PurchaseTypeSchema.array().optional(),
  notIn: PurchaseTypeSchema.array().optional(),
  not: z.union([PurchaseTypeSchema, z.lazy(() => NestedEnumPurchaseTypeFilterObjectSchema)]).optional()
}).strict();
export const EnumPurchaseTypeFilterObjectZodSchema = z.object({
  equals: PurchaseTypeSchema.optional(),
  in: PurchaseTypeSchema.array().optional(),
  notIn: PurchaseTypeSchema.array().optional(),
  not: z.union([PurchaseTypeSchema, z.lazy(() => NestedEnumPurchaseTypeFilterObjectSchema)]).optional()
}).strict();


// File: OrganizationNullableScalarRelationFilter.schema.ts

export const OrganizationNullableScalarRelationFilterObjectSchema: z.ZodType<Prisma.OrganizationNullableScalarRelationFilter, Prisma.OrganizationNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => OrganizationWhereInputObjectSchema).optional().nullable(),
  isNot: z.lazy(() => OrganizationWhereInputObjectSchema).optional().nullable()
}).strict();
export const OrganizationNullableScalarRelationFilterObjectZodSchema = z.object({
  is: z.lazy(() => OrganizationWhereInputObjectSchema).optional().nullable(),
  isNot: z.lazy(() => OrganizationWhereInputObjectSchema).optional().nullable()
}).strict();


// File: UserNullableScalarRelationFilter.schema.ts

export const UserNullableScalarRelationFilterObjectSchema: z.ZodType<Prisma.UserNullableScalarRelationFilter, Prisma.UserNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputObjectSchema).optional().nullable(),
  isNot: z.lazy(() => UserWhereInputObjectSchema).optional().nullable()
}).strict();
export const UserNullableScalarRelationFilterObjectZodSchema = z.object({
  is: z.lazy(() => UserWhereInputObjectSchema).optional().nullable(),
  isNot: z.lazy(() => UserWhereInputObjectSchema).optional().nullable()
}).strict();


// File: PurchaseCountOrderByAggregateInput.schema.ts

export const PurchaseCountOrderByAggregateInputObjectSchema: z.ZodType<Prisma.PurchaseCountOrderByAggregateInput, Prisma.PurchaseCountOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  type: SortOrderSchema.optional(),
  customerId: SortOrderSchema.optional(),
  subscriptionId: SortOrderSchema.optional(),
  productId: SortOrderSchema.optional(),
  status: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional()
}).strict();
export const PurchaseCountOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  type: SortOrderSchema.optional(),
  customerId: SortOrderSchema.optional(),
  subscriptionId: SortOrderSchema.optional(),
  productId: SortOrderSchema.optional(),
  status: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional()
}).strict();


// File: PurchaseMaxOrderByAggregateInput.schema.ts

export const PurchaseMaxOrderByAggregateInputObjectSchema: z.ZodType<Prisma.PurchaseMaxOrderByAggregateInput, Prisma.PurchaseMaxOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  type: SortOrderSchema.optional(),
  customerId: SortOrderSchema.optional(),
  subscriptionId: SortOrderSchema.optional(),
  productId: SortOrderSchema.optional(),
  status: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional()
}).strict();
export const PurchaseMaxOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  type: SortOrderSchema.optional(),
  customerId: SortOrderSchema.optional(),
  subscriptionId: SortOrderSchema.optional(),
  productId: SortOrderSchema.optional(),
  status: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional()
}).strict();


// File: PurchaseMinOrderByAggregateInput.schema.ts

export const PurchaseMinOrderByAggregateInputObjectSchema: z.ZodType<Prisma.PurchaseMinOrderByAggregateInput, Prisma.PurchaseMinOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  type: SortOrderSchema.optional(),
  customerId: SortOrderSchema.optional(),
  subscriptionId: SortOrderSchema.optional(),
  productId: SortOrderSchema.optional(),
  status: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional()
}).strict();
export const PurchaseMinOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  type: SortOrderSchema.optional(),
  customerId: SortOrderSchema.optional(),
  subscriptionId: SortOrderSchema.optional(),
  productId: SortOrderSchema.optional(),
  status: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional()
}).strict();


// File: EnumPurchaseTypeWithAggregatesFilter.schema.ts

export const EnumPurchaseTypeWithAggregatesFilterObjectSchema: z.ZodType<Prisma.EnumPurchaseTypeWithAggregatesFilter, Prisma.EnumPurchaseTypeWithAggregatesFilter> = z.object({
  equals: PurchaseTypeSchema.optional(),
  in: PurchaseTypeSchema.array().optional(),
  notIn: PurchaseTypeSchema.array().optional(),
  not: z.union([PurchaseTypeSchema, z.lazy(() => NestedEnumPurchaseTypeWithAggregatesFilterObjectSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedEnumPurchaseTypeFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedEnumPurchaseTypeFilterObjectSchema).optional()
}).strict();
export const EnumPurchaseTypeWithAggregatesFilterObjectZodSchema = z.object({
  equals: PurchaseTypeSchema.optional(),
  in: PurchaseTypeSchema.array().optional(),
  notIn: PurchaseTypeSchema.array().optional(),
  not: z.union([PurchaseTypeSchema, z.lazy(() => NestedEnumPurchaseTypeWithAggregatesFilterObjectSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedEnumPurchaseTypeFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedEnumPurchaseTypeFilterObjectSchema).optional()
}).strict();


// File: JsonFilter.schema.ts


const literalSchema = z.union([z.string(), z.number(), z.boolean()]);
const jsonSchema = z.lazy(() =>
  z.union([literalSchema, z.array(jsonSchema.nullable()), z.record(z.string(), jsonSchema.nullable())])
);

export const JsonFilterObjectSchema: z.ZodType<Prisma.JsonFilter, Prisma.JsonFilter> = z.object({
  equals: jsonSchema.optional(),
  path: z.string().array().optional(),
  mode: QueryModeSchema.optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: jsonSchema.optional().nullable(),
  array_ends_with: jsonSchema.optional().nullable(),
  array_contains: jsonSchema.optional().nullable(),
  lt: jsonSchema.optional(),
  lte: jsonSchema.optional(),
  gt: jsonSchema.optional(),
  gte: jsonSchema.optional(),
  not: jsonSchema.optional()
}).strict();
export const JsonFilterObjectZodSchema = z.object({
  equals: jsonSchema.optional(),
  path: z.string().array().optional(),
  mode: QueryModeSchema.optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: jsonSchema.optional().nullable(),
  array_ends_with: jsonSchema.optional().nullable(),
  array_contains: jsonSchema.optional().nullable(),
  lt: jsonSchema.optional(),
  lte: jsonSchema.optional(),
  gt: jsonSchema.optional(),
  gte: jsonSchema.optional(),
  not: jsonSchema.optional()
}).strict();


// File: AiChatCountOrderByAggregateInput.schema.ts

export const AiChatCountOrderByAggregateInputObjectSchema: z.ZodType<Prisma.AiChatCountOrderByAggregateInput, Prisma.AiChatCountOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  title: SortOrderSchema.optional(),
  messages: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional()
}).strict();
export const AiChatCountOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  title: SortOrderSchema.optional(),
  messages: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional()
}).strict();


// File: AiChatMaxOrderByAggregateInput.schema.ts

export const AiChatMaxOrderByAggregateInputObjectSchema: z.ZodType<Prisma.AiChatMaxOrderByAggregateInput, Prisma.AiChatMaxOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  title: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional()
}).strict();
export const AiChatMaxOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  title: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional()
}).strict();


// File: AiChatMinOrderByAggregateInput.schema.ts

export const AiChatMinOrderByAggregateInputObjectSchema: z.ZodType<Prisma.AiChatMinOrderByAggregateInput, Prisma.AiChatMinOrderByAggregateInput> = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  title: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional()
}).strict();
export const AiChatMinOrderByAggregateInputObjectZodSchema = z.object({
  id: SortOrderSchema.optional(),
  organizationId: SortOrderSchema.optional(),
  userId: SortOrderSchema.optional(),
  title: SortOrderSchema.optional(),
  createdAt: SortOrderSchema.optional(),
  updatedAt: SortOrderSchema.optional()
}).strict();


// File: JsonWithAggregatesFilter.schema.ts


const literalSchema = z.union([z.string(), z.number(), z.boolean()]);
const jsonSchema = z.lazy(() =>
  z.union([literalSchema, z.array(jsonSchema.nullable()), z.record(z.string(), jsonSchema.nullable())])
);

export const JsonWithAggregatesFilterObjectSchema: z.ZodType<Prisma.JsonWithAggregatesFilter, Prisma.JsonWithAggregatesFilter> = z.object({
  equals: jsonSchema.optional(),
  path: z.string().array().optional(),
  mode: QueryModeSchema.optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: jsonSchema.optional().nullable(),
  array_ends_with: jsonSchema.optional().nullable(),
  array_contains: jsonSchema.optional().nullable(),
  lt: jsonSchema.optional(),
  lte: jsonSchema.optional(),
  gt: jsonSchema.optional(),
  gte: jsonSchema.optional(),
  not: jsonSchema.optional(),
  _count: z.lazy(() => NestedIntFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedJsonFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedJsonFilterObjectSchema).optional()
}).strict();
export const JsonWithAggregatesFilterObjectZodSchema = z.object({
  equals: jsonSchema.optional(),
  path: z.string().array().optional(),
  mode: QueryModeSchema.optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: jsonSchema.optional().nullable(),
  array_ends_with: jsonSchema.optional().nullable(),
  array_contains: jsonSchema.optional().nullable(),
  lt: jsonSchema.optional(),
  lte: jsonSchema.optional(),
  gt: jsonSchema.optional(),
  gte: jsonSchema.optional(),
  not: jsonSchema.optional(),
  _count: z.lazy(() => NestedIntFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedJsonFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedJsonFilterObjectSchema).optional()
}).strict();


// File: SessionCreateNestedManyWithoutUserInput.schema.ts

export const SessionCreateNestedManyWithoutUserInputObjectSchema: z.ZodType<Prisma.SessionCreateNestedManyWithoutUserInput, Prisma.SessionCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([z.lazy(() => SessionCreateWithoutUserInputObjectSchema), z.lazy(() => SessionCreateWithoutUserInputObjectSchema).array(), z.lazy(() => SessionUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => SessionUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => SessionCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => SessionCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => SessionWhereUniqueInputObjectSchema), z.lazy(() => SessionWhereUniqueInputObjectSchema).array()]).optional()
}).strict();
export const SessionCreateNestedManyWithoutUserInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => SessionCreateWithoutUserInputObjectSchema), z.lazy(() => SessionCreateWithoutUserInputObjectSchema).array(), z.lazy(() => SessionUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => SessionUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => SessionCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => SessionCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => SessionWhereUniqueInputObjectSchema), z.lazy(() => SessionWhereUniqueInputObjectSchema).array()]).optional()
}).strict();


// File: AccountCreateNestedManyWithoutUserInput.schema.ts

export const AccountCreateNestedManyWithoutUserInputObjectSchema: z.ZodType<Prisma.AccountCreateNestedManyWithoutUserInput, Prisma.AccountCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([z.lazy(() => AccountCreateWithoutUserInputObjectSchema), z.lazy(() => AccountCreateWithoutUserInputObjectSchema).array(), z.lazy(() => AccountUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => AccountUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AccountCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => AccountCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => AccountWhereUniqueInputObjectSchema), z.lazy(() => AccountWhereUniqueInputObjectSchema).array()]).optional()
}).strict();
export const AccountCreateNestedManyWithoutUserInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => AccountCreateWithoutUserInputObjectSchema), z.lazy(() => AccountCreateWithoutUserInputObjectSchema).array(), z.lazy(() => AccountUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => AccountUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AccountCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => AccountCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => AccountWhereUniqueInputObjectSchema), z.lazy(() => AccountWhereUniqueInputObjectSchema).array()]).optional()
}).strict();


// File: PasskeyCreateNestedManyWithoutUserInput.schema.ts

export const PasskeyCreateNestedManyWithoutUserInputObjectSchema: z.ZodType<Prisma.PasskeyCreateNestedManyWithoutUserInput, Prisma.PasskeyCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([z.lazy(() => PasskeyCreateWithoutUserInputObjectSchema), z.lazy(() => PasskeyCreateWithoutUserInputObjectSchema).array(), z.lazy(() => PasskeyUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => PasskeyUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => PasskeyCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => PasskeyCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => PasskeyCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => PasskeyWhereUniqueInputObjectSchema), z.lazy(() => PasskeyWhereUniqueInputObjectSchema).array()]).optional()
}).strict();
export const PasskeyCreateNestedManyWithoutUserInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => PasskeyCreateWithoutUserInputObjectSchema), z.lazy(() => PasskeyCreateWithoutUserInputObjectSchema).array(), z.lazy(() => PasskeyUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => PasskeyUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => PasskeyCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => PasskeyCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => PasskeyCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => PasskeyWhereUniqueInputObjectSchema), z.lazy(() => PasskeyWhereUniqueInputObjectSchema).array()]).optional()
}).strict();


// File: InvitationCreateNestedManyWithoutUserInput.schema.ts

export const InvitationCreateNestedManyWithoutUserInputObjectSchema: z.ZodType<Prisma.InvitationCreateNestedManyWithoutUserInput, Prisma.InvitationCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([z.lazy(() => InvitationCreateWithoutUserInputObjectSchema), z.lazy(() => InvitationCreateWithoutUserInputObjectSchema).array(), z.lazy(() => InvitationUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => InvitationUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => InvitationCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => InvitationCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => InvitationCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional()
}).strict();
export const InvitationCreateNestedManyWithoutUserInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => InvitationCreateWithoutUserInputObjectSchema), z.lazy(() => InvitationCreateWithoutUserInputObjectSchema).array(), z.lazy(() => InvitationUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => InvitationUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => InvitationCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => InvitationCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => InvitationCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional()
}).strict();


// File: PurchaseCreateNestedManyWithoutUserInput.schema.ts

export const PurchaseCreateNestedManyWithoutUserInputObjectSchema: z.ZodType<Prisma.PurchaseCreateNestedManyWithoutUserInput, Prisma.PurchaseCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([z.lazy(() => PurchaseCreateWithoutUserInputObjectSchema), z.lazy(() => PurchaseCreateWithoutUserInputObjectSchema).array(), z.lazy(() => PurchaseUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => PurchaseUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => PurchaseCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => PurchaseCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional()
}).strict();
export const PurchaseCreateNestedManyWithoutUserInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => PurchaseCreateWithoutUserInputObjectSchema), z.lazy(() => PurchaseCreateWithoutUserInputObjectSchema).array(), z.lazy(() => PurchaseUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => PurchaseUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => PurchaseCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => PurchaseCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional()
}).strict();


// File: MemberCreateNestedManyWithoutUserInput.schema.ts

export const MemberCreateNestedManyWithoutUserInputObjectSchema: z.ZodType<Prisma.MemberCreateNestedManyWithoutUserInput, Prisma.MemberCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([z.lazy(() => MemberCreateWithoutUserInputObjectSchema), z.lazy(() => MemberCreateWithoutUserInputObjectSchema).array(), z.lazy(() => MemberUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => MemberUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => MemberCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => MemberCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => MemberCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional()
}).strict();
export const MemberCreateNestedManyWithoutUserInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => MemberCreateWithoutUserInputObjectSchema), z.lazy(() => MemberCreateWithoutUserInputObjectSchema).array(), z.lazy(() => MemberUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => MemberUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => MemberCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => MemberCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => MemberCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional()
}).strict();


// File: TwoFactorCreateNestedManyWithoutUserInput.schema.ts

export const TwoFactorCreateNestedManyWithoutUserInputObjectSchema: z.ZodType<Prisma.TwoFactorCreateNestedManyWithoutUserInput, Prisma.TwoFactorCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([z.lazy(() => TwoFactorCreateWithoutUserInputObjectSchema), z.lazy(() => TwoFactorCreateWithoutUserInputObjectSchema).array(), z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => TwoFactorCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => TwoFactorWhereUniqueInputObjectSchema), z.lazy(() => TwoFactorWhereUniqueInputObjectSchema).array()]).optional()
}).strict();
export const TwoFactorCreateNestedManyWithoutUserInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => TwoFactorCreateWithoutUserInputObjectSchema), z.lazy(() => TwoFactorCreateWithoutUserInputObjectSchema).array(), z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => TwoFactorCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => TwoFactorWhereUniqueInputObjectSchema), z.lazy(() => TwoFactorWhereUniqueInputObjectSchema).array()]).optional()
}).strict();


// File: AiChatCreateNestedManyWithoutUserInput.schema.ts

export const AiChatCreateNestedManyWithoutUserInputObjectSchema: z.ZodType<Prisma.AiChatCreateNestedManyWithoutUserInput, Prisma.AiChatCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([z.lazy(() => AiChatCreateWithoutUserInputObjectSchema), z.lazy(() => AiChatCreateWithoutUserInputObjectSchema).array(), z.lazy(() => AiChatUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => AiChatUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AiChatCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => AiChatCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => AiChatCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional()
}).strict();
export const AiChatCreateNestedManyWithoutUserInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => AiChatCreateWithoutUserInputObjectSchema), z.lazy(() => AiChatCreateWithoutUserInputObjectSchema).array(), z.lazy(() => AiChatUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => AiChatUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AiChatCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => AiChatCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => AiChatCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional()
}).strict();


// File: SessionUncheckedCreateNestedManyWithoutUserInput.schema.ts

export const SessionUncheckedCreateNestedManyWithoutUserInputObjectSchema: z.ZodType<Prisma.SessionUncheckedCreateNestedManyWithoutUserInput, Prisma.SessionUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([z.lazy(() => SessionCreateWithoutUserInputObjectSchema), z.lazy(() => SessionCreateWithoutUserInputObjectSchema).array(), z.lazy(() => SessionUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => SessionUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => SessionCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => SessionCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => SessionWhereUniqueInputObjectSchema), z.lazy(() => SessionWhereUniqueInputObjectSchema).array()]).optional()
}).strict();
export const SessionUncheckedCreateNestedManyWithoutUserInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => SessionCreateWithoutUserInputObjectSchema), z.lazy(() => SessionCreateWithoutUserInputObjectSchema).array(), z.lazy(() => SessionUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => SessionUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => SessionCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => SessionCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => SessionWhereUniqueInputObjectSchema), z.lazy(() => SessionWhereUniqueInputObjectSchema).array()]).optional()
}).strict();


// File: AccountUncheckedCreateNestedManyWithoutUserInput.schema.ts

export const AccountUncheckedCreateNestedManyWithoutUserInputObjectSchema: z.ZodType<Prisma.AccountUncheckedCreateNestedManyWithoutUserInput, Prisma.AccountUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([z.lazy(() => AccountCreateWithoutUserInputObjectSchema), z.lazy(() => AccountCreateWithoutUserInputObjectSchema).array(), z.lazy(() => AccountUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => AccountUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AccountCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => AccountCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => AccountWhereUniqueInputObjectSchema), z.lazy(() => AccountWhereUniqueInputObjectSchema).array()]).optional()
}).strict();
export const AccountUncheckedCreateNestedManyWithoutUserInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => AccountCreateWithoutUserInputObjectSchema), z.lazy(() => AccountCreateWithoutUserInputObjectSchema).array(), z.lazy(() => AccountUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => AccountUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AccountCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => AccountCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => AccountWhereUniqueInputObjectSchema), z.lazy(() => AccountWhereUniqueInputObjectSchema).array()]).optional()
}).strict();


// File: PasskeyUncheckedCreateNestedManyWithoutUserInput.schema.ts

export const PasskeyUncheckedCreateNestedManyWithoutUserInputObjectSchema: z.ZodType<Prisma.PasskeyUncheckedCreateNestedManyWithoutUserInput, Prisma.PasskeyUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([z.lazy(() => PasskeyCreateWithoutUserInputObjectSchema), z.lazy(() => PasskeyCreateWithoutUserInputObjectSchema).array(), z.lazy(() => PasskeyUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => PasskeyUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => PasskeyCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => PasskeyCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => PasskeyCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => PasskeyWhereUniqueInputObjectSchema), z.lazy(() => PasskeyWhereUniqueInputObjectSchema).array()]).optional()
}).strict();
export const PasskeyUncheckedCreateNestedManyWithoutUserInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => PasskeyCreateWithoutUserInputObjectSchema), z.lazy(() => PasskeyCreateWithoutUserInputObjectSchema).array(), z.lazy(() => PasskeyUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => PasskeyUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => PasskeyCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => PasskeyCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => PasskeyCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => PasskeyWhereUniqueInputObjectSchema), z.lazy(() => PasskeyWhereUniqueInputObjectSchema).array()]).optional()
}).strict();


// File: InvitationUncheckedCreateNestedManyWithoutUserInput.schema.ts

export const InvitationUncheckedCreateNestedManyWithoutUserInputObjectSchema: z.ZodType<Prisma.InvitationUncheckedCreateNestedManyWithoutUserInput, Prisma.InvitationUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([z.lazy(() => InvitationCreateWithoutUserInputObjectSchema), z.lazy(() => InvitationCreateWithoutUserInputObjectSchema).array(), z.lazy(() => InvitationUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => InvitationUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => InvitationCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => InvitationCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => InvitationCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional()
}).strict();
export const InvitationUncheckedCreateNestedManyWithoutUserInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => InvitationCreateWithoutUserInputObjectSchema), z.lazy(() => InvitationCreateWithoutUserInputObjectSchema).array(), z.lazy(() => InvitationUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => InvitationUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => InvitationCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => InvitationCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => InvitationCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional()
}).strict();


// File: PurchaseUncheckedCreateNestedManyWithoutUserInput.schema.ts

export const PurchaseUncheckedCreateNestedManyWithoutUserInputObjectSchema: z.ZodType<Prisma.PurchaseUncheckedCreateNestedManyWithoutUserInput, Prisma.PurchaseUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([z.lazy(() => PurchaseCreateWithoutUserInputObjectSchema), z.lazy(() => PurchaseCreateWithoutUserInputObjectSchema).array(), z.lazy(() => PurchaseUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => PurchaseUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => PurchaseCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => PurchaseCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional()
}).strict();
export const PurchaseUncheckedCreateNestedManyWithoutUserInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => PurchaseCreateWithoutUserInputObjectSchema), z.lazy(() => PurchaseCreateWithoutUserInputObjectSchema).array(), z.lazy(() => PurchaseUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => PurchaseUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => PurchaseCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => PurchaseCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional()
}).strict();


// File: MemberUncheckedCreateNestedManyWithoutUserInput.schema.ts

export const MemberUncheckedCreateNestedManyWithoutUserInputObjectSchema: z.ZodType<Prisma.MemberUncheckedCreateNestedManyWithoutUserInput, Prisma.MemberUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([z.lazy(() => MemberCreateWithoutUserInputObjectSchema), z.lazy(() => MemberCreateWithoutUserInputObjectSchema).array(), z.lazy(() => MemberUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => MemberUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => MemberCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => MemberCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => MemberCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional()
}).strict();
export const MemberUncheckedCreateNestedManyWithoutUserInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => MemberCreateWithoutUserInputObjectSchema), z.lazy(() => MemberCreateWithoutUserInputObjectSchema).array(), z.lazy(() => MemberUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => MemberUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => MemberCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => MemberCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => MemberCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional()
}).strict();


// File: TwoFactorUncheckedCreateNestedManyWithoutUserInput.schema.ts

export const TwoFactorUncheckedCreateNestedManyWithoutUserInputObjectSchema: z.ZodType<Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput, Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([z.lazy(() => TwoFactorCreateWithoutUserInputObjectSchema), z.lazy(() => TwoFactorCreateWithoutUserInputObjectSchema).array(), z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => TwoFactorCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => TwoFactorWhereUniqueInputObjectSchema), z.lazy(() => TwoFactorWhereUniqueInputObjectSchema).array()]).optional()
}).strict();
export const TwoFactorUncheckedCreateNestedManyWithoutUserInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => TwoFactorCreateWithoutUserInputObjectSchema), z.lazy(() => TwoFactorCreateWithoutUserInputObjectSchema).array(), z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => TwoFactorCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => TwoFactorWhereUniqueInputObjectSchema), z.lazy(() => TwoFactorWhereUniqueInputObjectSchema).array()]).optional()
}).strict();


// File: AiChatUncheckedCreateNestedManyWithoutUserInput.schema.ts

export const AiChatUncheckedCreateNestedManyWithoutUserInputObjectSchema: z.ZodType<Prisma.AiChatUncheckedCreateNestedManyWithoutUserInput, Prisma.AiChatUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([z.lazy(() => AiChatCreateWithoutUserInputObjectSchema), z.lazy(() => AiChatCreateWithoutUserInputObjectSchema).array(), z.lazy(() => AiChatUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => AiChatUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AiChatCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => AiChatCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => AiChatCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional()
}).strict();
export const AiChatUncheckedCreateNestedManyWithoutUserInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => AiChatCreateWithoutUserInputObjectSchema), z.lazy(() => AiChatCreateWithoutUserInputObjectSchema).array(), z.lazy(() => AiChatUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => AiChatUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AiChatCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => AiChatCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => AiChatCreateManyUserInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional()
}).strict();


// File: StringFieldUpdateOperationsInput.schema.ts


export const StringFieldUpdateOperationsInputObjectSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput, Prisma.StringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional()
}).strict();
export const StringFieldUpdateOperationsInputObjectZodSchema = z.object({
  set: z.string().optional()
}).strict();


// File: BoolFieldUpdateOperationsInput.schema.ts


export const BoolFieldUpdateOperationsInputObjectSchema: z.ZodType<Prisma.BoolFieldUpdateOperationsInput, Prisma.BoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional()
}).strict();
export const BoolFieldUpdateOperationsInputObjectZodSchema = z.object({
  set: z.boolean().optional()
}).strict();


// File: NullableStringFieldUpdateOperationsInput.schema.ts


export const NullableStringFieldUpdateOperationsInputObjectSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput, Prisma.NullableStringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional().nullable()
}).strict();
export const NullableStringFieldUpdateOperationsInputObjectZodSchema = z.object({
  set: z.string().optional().nullable()
}).strict();


// File: DateTimeFieldUpdateOperationsInput.schema.ts


export const DateTimeFieldUpdateOperationsInputObjectSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput, Prisma.DateTimeFieldUpdateOperationsInput> = z.object({
  set: z.union([z.date(), z.iso.datetime()]).optional()
}).strict();
export const DateTimeFieldUpdateOperationsInputObjectZodSchema = z.object({
  set: z.union([z.date(), z.iso.datetime()]).optional()
}).strict();


// File: NullableBoolFieldUpdateOperationsInput.schema.ts


export const NullableBoolFieldUpdateOperationsInputObjectSchema: z.ZodType<Prisma.NullableBoolFieldUpdateOperationsInput, Prisma.NullableBoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional().nullable()
}).strict();
export const NullableBoolFieldUpdateOperationsInputObjectZodSchema = z.object({
  set: z.boolean().optional().nullable()
}).strict();


// File: NullableDateTimeFieldUpdateOperationsInput.schema.ts


export const NullableDateTimeFieldUpdateOperationsInputObjectSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput, Prisma.NullableDateTimeFieldUpdateOperationsInput> = z.object({
  set: z.union([z.date(), z.iso.datetime()]).optional().nullable()
}).strict();
export const NullableDateTimeFieldUpdateOperationsInputObjectZodSchema = z.object({
  set: z.union([z.date(), z.iso.datetime()]).optional().nullable()
}).strict();


// File: SessionUpdateManyWithoutUserNestedInput.schema.ts

export const SessionUpdateManyWithoutUserNestedInputObjectSchema: z.ZodType<Prisma.SessionUpdateManyWithoutUserNestedInput, Prisma.SessionUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([z.lazy(() => SessionCreateWithoutUserInputObjectSchema), z.lazy(() => SessionCreateWithoutUserInputObjectSchema).array(), z.lazy(() => SessionUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => SessionUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => SessionCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => SessionCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => SessionWhereUniqueInputObjectSchema), z.lazy(() => SessionWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => SessionWhereUniqueInputObjectSchema), z.lazy(() => SessionWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => SessionWhereUniqueInputObjectSchema), z.lazy(() => SessionWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => SessionWhereUniqueInputObjectSchema), z.lazy(() => SessionWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => SessionScalarWhereInputObjectSchema), z.lazy(() => SessionScalarWhereInputObjectSchema).array()]).optional()
}).strict();
export const SessionUpdateManyWithoutUserNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => SessionCreateWithoutUserInputObjectSchema), z.lazy(() => SessionCreateWithoutUserInputObjectSchema).array(), z.lazy(() => SessionUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => SessionUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => SessionCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => SessionCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => SessionWhereUniqueInputObjectSchema), z.lazy(() => SessionWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => SessionWhereUniqueInputObjectSchema), z.lazy(() => SessionWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => SessionWhereUniqueInputObjectSchema), z.lazy(() => SessionWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => SessionWhereUniqueInputObjectSchema), z.lazy(() => SessionWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => SessionScalarWhereInputObjectSchema), z.lazy(() => SessionScalarWhereInputObjectSchema).array()]).optional()
}).strict();


// File: AccountUpdateManyWithoutUserNestedInput.schema.ts

export const AccountUpdateManyWithoutUserNestedInputObjectSchema: z.ZodType<Prisma.AccountUpdateManyWithoutUserNestedInput, Prisma.AccountUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([z.lazy(() => AccountCreateWithoutUserInputObjectSchema), z.lazy(() => AccountCreateWithoutUserInputObjectSchema).array(), z.lazy(() => AccountUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => AccountUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AccountCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => AccountCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => AccountWhereUniqueInputObjectSchema), z.lazy(() => AccountWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => AccountWhereUniqueInputObjectSchema), z.lazy(() => AccountWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => AccountWhereUniqueInputObjectSchema), z.lazy(() => AccountWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => AccountWhereUniqueInputObjectSchema), z.lazy(() => AccountWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => AccountScalarWhereInputObjectSchema), z.lazy(() => AccountScalarWhereInputObjectSchema).array()]).optional()
}).strict();
export const AccountUpdateManyWithoutUserNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => AccountCreateWithoutUserInputObjectSchema), z.lazy(() => AccountCreateWithoutUserInputObjectSchema).array(), z.lazy(() => AccountUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => AccountUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AccountCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => AccountCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => AccountWhereUniqueInputObjectSchema), z.lazy(() => AccountWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => AccountWhereUniqueInputObjectSchema), z.lazy(() => AccountWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => AccountWhereUniqueInputObjectSchema), z.lazy(() => AccountWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => AccountWhereUniqueInputObjectSchema), z.lazy(() => AccountWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => AccountScalarWhereInputObjectSchema), z.lazy(() => AccountScalarWhereInputObjectSchema).array()]).optional()
}).strict();


// File: PasskeyUpdateManyWithoutUserNestedInput.schema.ts

export const PasskeyUpdateManyWithoutUserNestedInputObjectSchema: z.ZodType<Prisma.PasskeyUpdateManyWithoutUserNestedInput, Prisma.PasskeyUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([z.lazy(() => PasskeyCreateWithoutUserInputObjectSchema), z.lazy(() => PasskeyCreateWithoutUserInputObjectSchema).array(), z.lazy(() => PasskeyUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => PasskeyUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => PasskeyCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => PasskeyCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => PasskeyUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => PasskeyUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => PasskeyCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => PasskeyWhereUniqueInputObjectSchema), z.lazy(() => PasskeyWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => PasskeyWhereUniqueInputObjectSchema), z.lazy(() => PasskeyWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => PasskeyWhereUniqueInputObjectSchema), z.lazy(() => PasskeyWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => PasskeyWhereUniqueInputObjectSchema), z.lazy(() => PasskeyWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => PasskeyUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => PasskeyUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => PasskeyUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => PasskeyUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => PasskeyScalarWhereInputObjectSchema), z.lazy(() => PasskeyScalarWhereInputObjectSchema).array()]).optional()
}).strict();
export const PasskeyUpdateManyWithoutUserNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => PasskeyCreateWithoutUserInputObjectSchema), z.lazy(() => PasskeyCreateWithoutUserInputObjectSchema).array(), z.lazy(() => PasskeyUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => PasskeyUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => PasskeyCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => PasskeyCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => PasskeyUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => PasskeyUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => PasskeyCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => PasskeyWhereUniqueInputObjectSchema), z.lazy(() => PasskeyWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => PasskeyWhereUniqueInputObjectSchema), z.lazy(() => PasskeyWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => PasskeyWhereUniqueInputObjectSchema), z.lazy(() => PasskeyWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => PasskeyWhereUniqueInputObjectSchema), z.lazy(() => PasskeyWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => PasskeyUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => PasskeyUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => PasskeyUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => PasskeyUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => PasskeyScalarWhereInputObjectSchema), z.lazy(() => PasskeyScalarWhereInputObjectSchema).array()]).optional()
}).strict();


// File: InvitationUpdateManyWithoutUserNestedInput.schema.ts

export const InvitationUpdateManyWithoutUserNestedInputObjectSchema: z.ZodType<Prisma.InvitationUpdateManyWithoutUserNestedInput, Prisma.InvitationUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([z.lazy(() => InvitationCreateWithoutUserInputObjectSchema), z.lazy(() => InvitationCreateWithoutUserInputObjectSchema).array(), z.lazy(() => InvitationUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => InvitationUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => InvitationCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => InvitationCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => InvitationUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => InvitationUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => InvitationCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => InvitationUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => InvitationUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => InvitationUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => InvitationUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => InvitationScalarWhereInputObjectSchema), z.lazy(() => InvitationScalarWhereInputObjectSchema).array()]).optional()
}).strict();
export const InvitationUpdateManyWithoutUserNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => InvitationCreateWithoutUserInputObjectSchema), z.lazy(() => InvitationCreateWithoutUserInputObjectSchema).array(), z.lazy(() => InvitationUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => InvitationUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => InvitationCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => InvitationCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => InvitationUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => InvitationUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => InvitationCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => InvitationUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => InvitationUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => InvitationUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => InvitationUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => InvitationScalarWhereInputObjectSchema), z.lazy(() => InvitationScalarWhereInputObjectSchema).array()]).optional()
}).strict();


// File: PurchaseUpdateManyWithoutUserNestedInput.schema.ts

export const PurchaseUpdateManyWithoutUserNestedInputObjectSchema: z.ZodType<Prisma.PurchaseUpdateManyWithoutUserNestedInput, Prisma.PurchaseUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([z.lazy(() => PurchaseCreateWithoutUserInputObjectSchema), z.lazy(() => PurchaseCreateWithoutUserInputObjectSchema).array(), z.lazy(() => PurchaseUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => PurchaseUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => PurchaseCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => PurchaseCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => PurchaseUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => PurchaseUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => PurchaseScalarWhereInputObjectSchema), z.lazy(() => PurchaseScalarWhereInputObjectSchema).array()]).optional()
}).strict();
export const PurchaseUpdateManyWithoutUserNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => PurchaseCreateWithoutUserInputObjectSchema), z.lazy(() => PurchaseCreateWithoutUserInputObjectSchema).array(), z.lazy(() => PurchaseUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => PurchaseUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => PurchaseCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => PurchaseCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => PurchaseUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => PurchaseUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => PurchaseScalarWhereInputObjectSchema), z.lazy(() => PurchaseScalarWhereInputObjectSchema).array()]).optional()
}).strict();


// File: MemberUpdateManyWithoutUserNestedInput.schema.ts

export const MemberUpdateManyWithoutUserNestedInputObjectSchema: z.ZodType<Prisma.MemberUpdateManyWithoutUserNestedInput, Prisma.MemberUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([z.lazy(() => MemberCreateWithoutUserInputObjectSchema), z.lazy(() => MemberCreateWithoutUserInputObjectSchema).array(), z.lazy(() => MemberUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => MemberUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => MemberCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => MemberCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => MemberUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => MemberUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => MemberCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => MemberUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => MemberUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => MemberUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => MemberUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => MemberScalarWhereInputObjectSchema), z.lazy(() => MemberScalarWhereInputObjectSchema).array()]).optional()
}).strict();
export const MemberUpdateManyWithoutUserNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => MemberCreateWithoutUserInputObjectSchema), z.lazy(() => MemberCreateWithoutUserInputObjectSchema).array(), z.lazy(() => MemberUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => MemberUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => MemberCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => MemberCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => MemberUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => MemberUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => MemberCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => MemberUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => MemberUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => MemberUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => MemberUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => MemberScalarWhereInputObjectSchema), z.lazy(() => MemberScalarWhereInputObjectSchema).array()]).optional()
}).strict();


// File: TwoFactorUpdateManyWithoutUserNestedInput.schema.ts

export const TwoFactorUpdateManyWithoutUserNestedInputObjectSchema: z.ZodType<Prisma.TwoFactorUpdateManyWithoutUserNestedInput, Prisma.TwoFactorUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([z.lazy(() => TwoFactorCreateWithoutUserInputObjectSchema), z.lazy(() => TwoFactorCreateWithoutUserInputObjectSchema).array(), z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => TwoFactorUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => TwoFactorUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => TwoFactorCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => TwoFactorWhereUniqueInputObjectSchema), z.lazy(() => TwoFactorWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => TwoFactorWhereUniqueInputObjectSchema), z.lazy(() => TwoFactorWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => TwoFactorWhereUniqueInputObjectSchema), z.lazy(() => TwoFactorWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => TwoFactorWhereUniqueInputObjectSchema), z.lazy(() => TwoFactorWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => TwoFactorUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => TwoFactorUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => TwoFactorUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => TwoFactorUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => TwoFactorScalarWhereInputObjectSchema), z.lazy(() => TwoFactorScalarWhereInputObjectSchema).array()]).optional()
}).strict();
export const TwoFactorUpdateManyWithoutUserNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => TwoFactorCreateWithoutUserInputObjectSchema), z.lazy(() => TwoFactorCreateWithoutUserInputObjectSchema).array(), z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => TwoFactorUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => TwoFactorUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => TwoFactorCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => TwoFactorWhereUniqueInputObjectSchema), z.lazy(() => TwoFactorWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => TwoFactorWhereUniqueInputObjectSchema), z.lazy(() => TwoFactorWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => TwoFactorWhereUniqueInputObjectSchema), z.lazy(() => TwoFactorWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => TwoFactorWhereUniqueInputObjectSchema), z.lazy(() => TwoFactorWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => TwoFactorUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => TwoFactorUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => TwoFactorUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => TwoFactorUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => TwoFactorScalarWhereInputObjectSchema), z.lazy(() => TwoFactorScalarWhereInputObjectSchema).array()]).optional()
}).strict();


// File: AiChatUpdateManyWithoutUserNestedInput.schema.ts

export const AiChatUpdateManyWithoutUserNestedInputObjectSchema: z.ZodType<Prisma.AiChatUpdateManyWithoutUserNestedInput, Prisma.AiChatUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([z.lazy(() => AiChatCreateWithoutUserInputObjectSchema), z.lazy(() => AiChatCreateWithoutUserInputObjectSchema).array(), z.lazy(() => AiChatUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => AiChatUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AiChatCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => AiChatCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => AiChatUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => AiChatUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => AiChatCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => AiChatUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => AiChatUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => AiChatUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => AiChatUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => AiChatScalarWhereInputObjectSchema), z.lazy(() => AiChatScalarWhereInputObjectSchema).array()]).optional()
}).strict();
export const AiChatUpdateManyWithoutUserNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => AiChatCreateWithoutUserInputObjectSchema), z.lazy(() => AiChatCreateWithoutUserInputObjectSchema).array(), z.lazy(() => AiChatUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => AiChatUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AiChatCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => AiChatCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => AiChatUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => AiChatUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => AiChatCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => AiChatUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => AiChatUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => AiChatUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => AiChatUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => AiChatScalarWhereInputObjectSchema), z.lazy(() => AiChatScalarWhereInputObjectSchema).array()]).optional()
}).strict();


// File: SessionUncheckedUpdateManyWithoutUserNestedInput.schema.ts

export const SessionUncheckedUpdateManyWithoutUserNestedInputObjectSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput, Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([z.lazy(() => SessionCreateWithoutUserInputObjectSchema), z.lazy(() => SessionCreateWithoutUserInputObjectSchema).array(), z.lazy(() => SessionUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => SessionUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => SessionCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => SessionCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => SessionWhereUniqueInputObjectSchema), z.lazy(() => SessionWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => SessionWhereUniqueInputObjectSchema), z.lazy(() => SessionWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => SessionWhereUniqueInputObjectSchema), z.lazy(() => SessionWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => SessionWhereUniqueInputObjectSchema), z.lazy(() => SessionWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => SessionScalarWhereInputObjectSchema), z.lazy(() => SessionScalarWhereInputObjectSchema).array()]).optional()
}).strict();
export const SessionUncheckedUpdateManyWithoutUserNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => SessionCreateWithoutUserInputObjectSchema), z.lazy(() => SessionCreateWithoutUserInputObjectSchema).array(), z.lazy(() => SessionUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => SessionUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => SessionCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => SessionCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => SessionWhereUniqueInputObjectSchema), z.lazy(() => SessionWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => SessionWhereUniqueInputObjectSchema), z.lazy(() => SessionWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => SessionWhereUniqueInputObjectSchema), z.lazy(() => SessionWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => SessionWhereUniqueInputObjectSchema), z.lazy(() => SessionWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => SessionScalarWhereInputObjectSchema), z.lazy(() => SessionScalarWhereInputObjectSchema).array()]).optional()
}).strict();


// File: AccountUncheckedUpdateManyWithoutUserNestedInput.schema.ts

export const AccountUncheckedUpdateManyWithoutUserNestedInputObjectSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput, Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([z.lazy(() => AccountCreateWithoutUserInputObjectSchema), z.lazy(() => AccountCreateWithoutUserInputObjectSchema).array(), z.lazy(() => AccountUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => AccountUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AccountCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => AccountCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => AccountWhereUniqueInputObjectSchema), z.lazy(() => AccountWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => AccountWhereUniqueInputObjectSchema), z.lazy(() => AccountWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => AccountWhereUniqueInputObjectSchema), z.lazy(() => AccountWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => AccountWhereUniqueInputObjectSchema), z.lazy(() => AccountWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => AccountScalarWhereInputObjectSchema), z.lazy(() => AccountScalarWhereInputObjectSchema).array()]).optional()
}).strict();
export const AccountUncheckedUpdateManyWithoutUserNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => AccountCreateWithoutUserInputObjectSchema), z.lazy(() => AccountCreateWithoutUserInputObjectSchema).array(), z.lazy(() => AccountUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => AccountUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AccountCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => AccountCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => AccountWhereUniqueInputObjectSchema), z.lazy(() => AccountWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => AccountWhereUniqueInputObjectSchema), z.lazy(() => AccountWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => AccountWhereUniqueInputObjectSchema), z.lazy(() => AccountWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => AccountWhereUniqueInputObjectSchema), z.lazy(() => AccountWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => AccountScalarWhereInputObjectSchema), z.lazy(() => AccountScalarWhereInputObjectSchema).array()]).optional()
}).strict();


// File: PasskeyUncheckedUpdateManyWithoutUserNestedInput.schema.ts

export const PasskeyUncheckedUpdateManyWithoutUserNestedInputObjectSchema: z.ZodType<Prisma.PasskeyUncheckedUpdateManyWithoutUserNestedInput, Prisma.PasskeyUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([z.lazy(() => PasskeyCreateWithoutUserInputObjectSchema), z.lazy(() => PasskeyCreateWithoutUserInputObjectSchema).array(), z.lazy(() => PasskeyUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => PasskeyUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => PasskeyCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => PasskeyCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => PasskeyUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => PasskeyUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => PasskeyCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => PasskeyWhereUniqueInputObjectSchema), z.lazy(() => PasskeyWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => PasskeyWhereUniqueInputObjectSchema), z.lazy(() => PasskeyWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => PasskeyWhereUniqueInputObjectSchema), z.lazy(() => PasskeyWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => PasskeyWhereUniqueInputObjectSchema), z.lazy(() => PasskeyWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => PasskeyUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => PasskeyUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => PasskeyUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => PasskeyUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => PasskeyScalarWhereInputObjectSchema), z.lazy(() => PasskeyScalarWhereInputObjectSchema).array()]).optional()
}).strict();
export const PasskeyUncheckedUpdateManyWithoutUserNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => PasskeyCreateWithoutUserInputObjectSchema), z.lazy(() => PasskeyCreateWithoutUserInputObjectSchema).array(), z.lazy(() => PasskeyUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => PasskeyUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => PasskeyCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => PasskeyCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => PasskeyUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => PasskeyUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => PasskeyCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => PasskeyWhereUniqueInputObjectSchema), z.lazy(() => PasskeyWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => PasskeyWhereUniqueInputObjectSchema), z.lazy(() => PasskeyWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => PasskeyWhereUniqueInputObjectSchema), z.lazy(() => PasskeyWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => PasskeyWhereUniqueInputObjectSchema), z.lazy(() => PasskeyWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => PasskeyUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => PasskeyUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => PasskeyUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => PasskeyUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => PasskeyScalarWhereInputObjectSchema), z.lazy(() => PasskeyScalarWhereInputObjectSchema).array()]).optional()
}).strict();


// File: InvitationUncheckedUpdateManyWithoutUserNestedInput.schema.ts

export const InvitationUncheckedUpdateManyWithoutUserNestedInputObjectSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyWithoutUserNestedInput, Prisma.InvitationUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([z.lazy(() => InvitationCreateWithoutUserInputObjectSchema), z.lazy(() => InvitationCreateWithoutUserInputObjectSchema).array(), z.lazy(() => InvitationUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => InvitationUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => InvitationCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => InvitationCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => InvitationUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => InvitationUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => InvitationCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => InvitationUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => InvitationUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => InvitationUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => InvitationUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => InvitationScalarWhereInputObjectSchema), z.lazy(() => InvitationScalarWhereInputObjectSchema).array()]).optional()
}).strict();
export const InvitationUncheckedUpdateManyWithoutUserNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => InvitationCreateWithoutUserInputObjectSchema), z.lazy(() => InvitationCreateWithoutUserInputObjectSchema).array(), z.lazy(() => InvitationUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => InvitationUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => InvitationCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => InvitationCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => InvitationUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => InvitationUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => InvitationCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => InvitationUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => InvitationUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => InvitationUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => InvitationUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => InvitationScalarWhereInputObjectSchema), z.lazy(() => InvitationScalarWhereInputObjectSchema).array()]).optional()
}).strict();


// File: PurchaseUncheckedUpdateManyWithoutUserNestedInput.schema.ts

export const PurchaseUncheckedUpdateManyWithoutUserNestedInputObjectSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateManyWithoutUserNestedInput, Prisma.PurchaseUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([z.lazy(() => PurchaseCreateWithoutUserInputObjectSchema), z.lazy(() => PurchaseCreateWithoutUserInputObjectSchema).array(), z.lazy(() => PurchaseUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => PurchaseUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => PurchaseCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => PurchaseCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => PurchaseUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => PurchaseUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => PurchaseScalarWhereInputObjectSchema), z.lazy(() => PurchaseScalarWhereInputObjectSchema).array()]).optional()
}).strict();
export const PurchaseUncheckedUpdateManyWithoutUserNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => PurchaseCreateWithoutUserInputObjectSchema), z.lazy(() => PurchaseCreateWithoutUserInputObjectSchema).array(), z.lazy(() => PurchaseUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => PurchaseUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => PurchaseCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => PurchaseCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => PurchaseUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => PurchaseUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => PurchaseScalarWhereInputObjectSchema), z.lazy(() => PurchaseScalarWhereInputObjectSchema).array()]).optional()
}).strict();


// File: MemberUncheckedUpdateManyWithoutUserNestedInput.schema.ts

export const MemberUncheckedUpdateManyWithoutUserNestedInputObjectSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyWithoutUserNestedInput, Prisma.MemberUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([z.lazy(() => MemberCreateWithoutUserInputObjectSchema), z.lazy(() => MemberCreateWithoutUserInputObjectSchema).array(), z.lazy(() => MemberUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => MemberUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => MemberCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => MemberCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => MemberUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => MemberUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => MemberCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => MemberUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => MemberUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => MemberUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => MemberUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => MemberScalarWhereInputObjectSchema), z.lazy(() => MemberScalarWhereInputObjectSchema).array()]).optional()
}).strict();
export const MemberUncheckedUpdateManyWithoutUserNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => MemberCreateWithoutUserInputObjectSchema), z.lazy(() => MemberCreateWithoutUserInputObjectSchema).array(), z.lazy(() => MemberUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => MemberUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => MemberCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => MemberCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => MemberUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => MemberUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => MemberCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => MemberUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => MemberUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => MemberUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => MemberUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => MemberScalarWhereInputObjectSchema), z.lazy(() => MemberScalarWhereInputObjectSchema).array()]).optional()
}).strict();


// File: TwoFactorUncheckedUpdateManyWithoutUserNestedInput.schema.ts

export const TwoFactorUncheckedUpdateManyWithoutUserNestedInputObjectSchema: z.ZodType<Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput, Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([z.lazy(() => TwoFactorCreateWithoutUserInputObjectSchema), z.lazy(() => TwoFactorCreateWithoutUserInputObjectSchema).array(), z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => TwoFactorUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => TwoFactorUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => TwoFactorCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => TwoFactorWhereUniqueInputObjectSchema), z.lazy(() => TwoFactorWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => TwoFactorWhereUniqueInputObjectSchema), z.lazy(() => TwoFactorWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => TwoFactorWhereUniqueInputObjectSchema), z.lazy(() => TwoFactorWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => TwoFactorWhereUniqueInputObjectSchema), z.lazy(() => TwoFactorWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => TwoFactorUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => TwoFactorUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => TwoFactorUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => TwoFactorUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => TwoFactorScalarWhereInputObjectSchema), z.lazy(() => TwoFactorScalarWhereInputObjectSchema).array()]).optional()
}).strict();
export const TwoFactorUncheckedUpdateManyWithoutUserNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => TwoFactorCreateWithoutUserInputObjectSchema), z.lazy(() => TwoFactorCreateWithoutUserInputObjectSchema).array(), z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => TwoFactorUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => TwoFactorUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => TwoFactorCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => TwoFactorWhereUniqueInputObjectSchema), z.lazy(() => TwoFactorWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => TwoFactorWhereUniqueInputObjectSchema), z.lazy(() => TwoFactorWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => TwoFactorWhereUniqueInputObjectSchema), z.lazy(() => TwoFactorWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => TwoFactorWhereUniqueInputObjectSchema), z.lazy(() => TwoFactorWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => TwoFactorUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => TwoFactorUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => TwoFactorUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => TwoFactorUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => TwoFactorScalarWhereInputObjectSchema), z.lazy(() => TwoFactorScalarWhereInputObjectSchema).array()]).optional()
}).strict();


// File: AiChatUncheckedUpdateManyWithoutUserNestedInput.schema.ts

export const AiChatUncheckedUpdateManyWithoutUserNestedInputObjectSchema: z.ZodType<Prisma.AiChatUncheckedUpdateManyWithoutUserNestedInput, Prisma.AiChatUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([z.lazy(() => AiChatCreateWithoutUserInputObjectSchema), z.lazy(() => AiChatCreateWithoutUserInputObjectSchema).array(), z.lazy(() => AiChatUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => AiChatUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AiChatCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => AiChatCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => AiChatUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => AiChatUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => AiChatCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => AiChatUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => AiChatUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => AiChatUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => AiChatUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => AiChatScalarWhereInputObjectSchema), z.lazy(() => AiChatScalarWhereInputObjectSchema).array()]).optional()
}).strict();
export const AiChatUncheckedUpdateManyWithoutUserNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => AiChatCreateWithoutUserInputObjectSchema), z.lazy(() => AiChatCreateWithoutUserInputObjectSchema).array(), z.lazy(() => AiChatUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => AiChatUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AiChatCreateOrConnectWithoutUserInputObjectSchema), z.lazy(() => AiChatCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => AiChatUpsertWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => AiChatUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => AiChatCreateManyUserInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => AiChatUpdateWithWhereUniqueWithoutUserInputObjectSchema), z.lazy(() => AiChatUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => AiChatUpdateManyWithWhereWithoutUserInputObjectSchema), z.lazy(() => AiChatUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => AiChatScalarWhereInputObjectSchema), z.lazy(() => AiChatScalarWhereInputObjectSchema).array()]).optional()
}).strict();


// File: UserCreateNestedOneWithoutSessionsInput.schema.ts

export const UserCreateNestedOneWithoutSessionsInputObjectSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutSessionsInput, Prisma.UserCreateNestedOneWithoutSessionsInput> = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutSessionsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutSessionsInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSessionsInputObjectSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional()
}).strict();
export const UserCreateNestedOneWithoutSessionsInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutSessionsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutSessionsInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSessionsInputObjectSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional()
}).strict();


// File: UserUpdateOneRequiredWithoutSessionsNestedInput.schema.ts

export const UserUpdateOneRequiredWithoutSessionsNestedInputObjectSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutSessionsNestedInput, Prisma.UserUpdateOneRequiredWithoutSessionsNestedInput> = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutSessionsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutSessionsInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSessionsInputObjectSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutSessionsInputObjectSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional(),
  update: z.union([z.lazy(() => UserUpdateToOneWithWhereWithoutSessionsInputObjectSchema), z.lazy(() => UserUpdateWithoutSessionsInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutSessionsInputObjectSchema)]).optional()
}).strict();
export const UserUpdateOneRequiredWithoutSessionsNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutSessionsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutSessionsInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSessionsInputObjectSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutSessionsInputObjectSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional(),
  update: z.union([z.lazy(() => UserUpdateToOneWithWhereWithoutSessionsInputObjectSchema), z.lazy(() => UserUpdateWithoutSessionsInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutSessionsInputObjectSchema)]).optional()
}).strict();


// File: UserCreateNestedOneWithoutAccountsInput.schema.ts

export const UserCreateNestedOneWithoutAccountsInputObjectSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutAccountsInput, Prisma.UserCreateNestedOneWithoutAccountsInput> = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutAccountsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutAccountsInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAccountsInputObjectSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional()
}).strict();
export const UserCreateNestedOneWithoutAccountsInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutAccountsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutAccountsInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAccountsInputObjectSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional()
}).strict();


// File: UserUpdateOneRequiredWithoutAccountsNestedInput.schema.ts

export const UserUpdateOneRequiredWithoutAccountsNestedInputObjectSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutAccountsNestedInput, Prisma.UserUpdateOneRequiredWithoutAccountsNestedInput> = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutAccountsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutAccountsInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAccountsInputObjectSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutAccountsInputObjectSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional(),
  update: z.union([z.lazy(() => UserUpdateToOneWithWhereWithoutAccountsInputObjectSchema), z.lazy(() => UserUpdateWithoutAccountsInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutAccountsInputObjectSchema)]).optional()
}).strict();
export const UserUpdateOneRequiredWithoutAccountsNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutAccountsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutAccountsInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAccountsInputObjectSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutAccountsInputObjectSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional(),
  update: z.union([z.lazy(() => UserUpdateToOneWithWhereWithoutAccountsInputObjectSchema), z.lazy(() => UserUpdateWithoutAccountsInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutAccountsInputObjectSchema)]).optional()
}).strict();


// File: UserCreateNestedOneWithoutPasskeysInput.schema.ts

export const UserCreateNestedOneWithoutPasskeysInputObjectSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutPasskeysInput, Prisma.UserCreateNestedOneWithoutPasskeysInput> = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutPasskeysInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutPasskeysInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPasskeysInputObjectSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional()
}).strict();
export const UserCreateNestedOneWithoutPasskeysInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutPasskeysInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutPasskeysInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPasskeysInputObjectSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional()
}).strict();


// File: IntFieldUpdateOperationsInput.schema.ts


export const IntFieldUpdateOperationsInputObjectSchema: z.ZodType<Prisma.IntFieldUpdateOperationsInput, Prisma.IntFieldUpdateOperationsInput> = z.object({
  set: z.number().int().optional(),
  increment: z.number().int().optional(),
  decrement: z.number().int().optional(),
  multiply: z.number().int().optional(),
  divide: z.number().int().optional()
}).strict();
export const IntFieldUpdateOperationsInputObjectZodSchema = z.object({
  set: z.number().int().optional(),
  increment: z.number().int().optional(),
  decrement: z.number().int().optional(),
  multiply: z.number().int().optional(),
  divide: z.number().int().optional()
}).strict();


// File: UserUpdateOneRequiredWithoutPasskeysNestedInput.schema.ts

export const UserUpdateOneRequiredWithoutPasskeysNestedInputObjectSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutPasskeysNestedInput, Prisma.UserUpdateOneRequiredWithoutPasskeysNestedInput> = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutPasskeysInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutPasskeysInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPasskeysInputObjectSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutPasskeysInputObjectSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional(),
  update: z.union([z.lazy(() => UserUpdateToOneWithWhereWithoutPasskeysInputObjectSchema), z.lazy(() => UserUpdateWithoutPasskeysInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutPasskeysInputObjectSchema)]).optional()
}).strict();
export const UserUpdateOneRequiredWithoutPasskeysNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutPasskeysInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutPasskeysInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPasskeysInputObjectSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutPasskeysInputObjectSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional(),
  update: z.union([z.lazy(() => UserUpdateToOneWithWhereWithoutPasskeysInputObjectSchema), z.lazy(() => UserUpdateWithoutPasskeysInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutPasskeysInputObjectSchema)]).optional()
}).strict();


// File: UserCreateNestedOneWithoutTwofactorsInput.schema.ts

export const UserCreateNestedOneWithoutTwofactorsInputObjectSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutTwofactorsInput, Prisma.UserCreateNestedOneWithoutTwofactorsInput> = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutTwofactorsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutTwofactorsInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTwofactorsInputObjectSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional()
}).strict();
export const UserCreateNestedOneWithoutTwofactorsInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutTwofactorsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutTwofactorsInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTwofactorsInputObjectSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional()
}).strict();


// File: UserUpdateOneRequiredWithoutTwofactorsNestedInput.schema.ts

export const UserUpdateOneRequiredWithoutTwofactorsNestedInputObjectSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutTwofactorsNestedInput, Prisma.UserUpdateOneRequiredWithoutTwofactorsNestedInput> = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutTwofactorsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutTwofactorsInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTwofactorsInputObjectSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutTwofactorsInputObjectSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional(),
  update: z.union([z.lazy(() => UserUpdateToOneWithWhereWithoutTwofactorsInputObjectSchema), z.lazy(() => UserUpdateWithoutTwofactorsInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutTwofactorsInputObjectSchema)]).optional()
}).strict();
export const UserUpdateOneRequiredWithoutTwofactorsNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutTwofactorsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutTwofactorsInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTwofactorsInputObjectSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutTwofactorsInputObjectSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional(),
  update: z.union([z.lazy(() => UserUpdateToOneWithWhereWithoutTwofactorsInputObjectSchema), z.lazy(() => UserUpdateWithoutTwofactorsInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutTwofactorsInputObjectSchema)]).optional()
}).strict();


// File: MemberCreateNestedManyWithoutOrganizationInput.schema.ts

export const MemberCreateNestedManyWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.MemberCreateNestedManyWithoutOrganizationInput, Prisma.MemberCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([z.lazy(() => MemberCreateWithoutOrganizationInputObjectSchema), z.lazy(() => MemberCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => MemberCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional()
}).strict();
export const MemberCreateNestedManyWithoutOrganizationInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => MemberCreateWithoutOrganizationInputObjectSchema), z.lazy(() => MemberCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => MemberCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional()
}).strict();


// File: InvitationCreateNestedManyWithoutOrganizationInput.schema.ts

export const InvitationCreateNestedManyWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.InvitationCreateNestedManyWithoutOrganizationInput, Prisma.InvitationCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([z.lazy(() => InvitationCreateWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => InvitationCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional()
}).strict();
export const InvitationCreateNestedManyWithoutOrganizationInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => InvitationCreateWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => InvitationCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional()
}).strict();


// File: PurchaseCreateNestedManyWithoutOrganizationInput.schema.ts

export const PurchaseCreateNestedManyWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.PurchaseCreateNestedManyWithoutOrganizationInput, Prisma.PurchaseCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([z.lazy(() => PurchaseCreateWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional()
}).strict();
export const PurchaseCreateNestedManyWithoutOrganizationInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => PurchaseCreateWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional()
}).strict();


// File: AiChatCreateNestedManyWithoutOrganizationInput.schema.ts

export const AiChatCreateNestedManyWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.AiChatCreateNestedManyWithoutOrganizationInput, Prisma.AiChatCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([z.lazy(() => AiChatCreateWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => AiChatCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional()
}).strict();
export const AiChatCreateNestedManyWithoutOrganizationInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => AiChatCreateWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => AiChatCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional()
}).strict();


// File: MemberUncheckedCreateNestedManyWithoutOrganizationInput.schema.ts

export const MemberUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.MemberUncheckedCreateNestedManyWithoutOrganizationInput, Prisma.MemberUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([z.lazy(() => MemberCreateWithoutOrganizationInputObjectSchema), z.lazy(() => MemberCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => MemberCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional()
}).strict();
export const MemberUncheckedCreateNestedManyWithoutOrganizationInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => MemberCreateWithoutOrganizationInputObjectSchema), z.lazy(() => MemberCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => MemberCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional()
}).strict();


// File: InvitationUncheckedCreateNestedManyWithoutOrganizationInput.schema.ts

export const InvitationUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.InvitationUncheckedCreateNestedManyWithoutOrganizationInput, Prisma.InvitationUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([z.lazy(() => InvitationCreateWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => InvitationCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional()
}).strict();
export const InvitationUncheckedCreateNestedManyWithoutOrganizationInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => InvitationCreateWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => InvitationCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional()
}).strict();


// File: PurchaseUncheckedCreateNestedManyWithoutOrganizationInput.schema.ts

export const PurchaseUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.PurchaseUncheckedCreateNestedManyWithoutOrganizationInput, Prisma.PurchaseUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([z.lazy(() => PurchaseCreateWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional()
}).strict();
export const PurchaseUncheckedCreateNestedManyWithoutOrganizationInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => PurchaseCreateWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional()
}).strict();


// File: AiChatUncheckedCreateNestedManyWithoutOrganizationInput.schema.ts

export const AiChatUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.AiChatUncheckedCreateNestedManyWithoutOrganizationInput, Prisma.AiChatUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([z.lazy(() => AiChatCreateWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => AiChatCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional()
}).strict();
export const AiChatUncheckedCreateNestedManyWithoutOrganizationInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => AiChatCreateWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => AiChatCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  connect: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional()
}).strict();


// File: MemberUpdateManyWithoutOrganizationNestedInput.schema.ts

export const MemberUpdateManyWithoutOrganizationNestedInputObjectSchema: z.ZodType<Prisma.MemberUpdateManyWithoutOrganizationNestedInput, Prisma.MemberUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([z.lazy(() => MemberCreateWithoutOrganizationInputObjectSchema), z.lazy(() => MemberCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => MemberUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => MemberUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => MemberCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => MemberUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => MemberUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => MemberUpdateManyWithWhereWithoutOrganizationInputObjectSchema), z.lazy(() => MemberUpdateManyWithWhereWithoutOrganizationInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => MemberScalarWhereInputObjectSchema), z.lazy(() => MemberScalarWhereInputObjectSchema).array()]).optional()
}).strict();
export const MemberUpdateManyWithoutOrganizationNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => MemberCreateWithoutOrganizationInputObjectSchema), z.lazy(() => MemberCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => MemberUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => MemberUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => MemberCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => MemberUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => MemberUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => MemberUpdateManyWithWhereWithoutOrganizationInputObjectSchema), z.lazy(() => MemberUpdateManyWithWhereWithoutOrganizationInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => MemberScalarWhereInputObjectSchema), z.lazy(() => MemberScalarWhereInputObjectSchema).array()]).optional()
}).strict();


// File: InvitationUpdateManyWithoutOrganizationNestedInput.schema.ts

export const InvitationUpdateManyWithoutOrganizationNestedInputObjectSchema: z.ZodType<Prisma.InvitationUpdateManyWithoutOrganizationNestedInput, Prisma.InvitationUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([z.lazy(() => InvitationCreateWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => InvitationUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => InvitationCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => InvitationUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => InvitationUpdateManyWithWhereWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationUpdateManyWithWhereWithoutOrganizationInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => InvitationScalarWhereInputObjectSchema), z.lazy(() => InvitationScalarWhereInputObjectSchema).array()]).optional()
}).strict();
export const InvitationUpdateManyWithoutOrganizationNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => InvitationCreateWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => InvitationUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => InvitationCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => InvitationUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => InvitationUpdateManyWithWhereWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationUpdateManyWithWhereWithoutOrganizationInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => InvitationScalarWhereInputObjectSchema), z.lazy(() => InvitationScalarWhereInputObjectSchema).array()]).optional()
}).strict();


// File: PurchaseUpdateManyWithoutOrganizationNestedInput.schema.ts

export const PurchaseUpdateManyWithoutOrganizationNestedInputObjectSchema: z.ZodType<Prisma.PurchaseUpdateManyWithoutOrganizationNestedInput, Prisma.PurchaseUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([z.lazy(() => PurchaseCreateWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => PurchaseUpdateManyWithWhereWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseUpdateManyWithWhereWithoutOrganizationInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => PurchaseScalarWhereInputObjectSchema), z.lazy(() => PurchaseScalarWhereInputObjectSchema).array()]).optional()
}).strict();
export const PurchaseUpdateManyWithoutOrganizationNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => PurchaseCreateWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => PurchaseUpdateManyWithWhereWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseUpdateManyWithWhereWithoutOrganizationInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => PurchaseScalarWhereInputObjectSchema), z.lazy(() => PurchaseScalarWhereInputObjectSchema).array()]).optional()
}).strict();


// File: AiChatUpdateManyWithoutOrganizationNestedInput.schema.ts

export const AiChatUpdateManyWithoutOrganizationNestedInputObjectSchema: z.ZodType<Prisma.AiChatUpdateManyWithoutOrganizationNestedInput, Prisma.AiChatUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([z.lazy(() => AiChatCreateWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => AiChatUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => AiChatCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => AiChatUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => AiChatUpdateManyWithWhereWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatUpdateManyWithWhereWithoutOrganizationInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => AiChatScalarWhereInputObjectSchema), z.lazy(() => AiChatScalarWhereInputObjectSchema).array()]).optional()
}).strict();
export const AiChatUpdateManyWithoutOrganizationNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => AiChatCreateWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => AiChatUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => AiChatCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => AiChatUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => AiChatUpdateManyWithWhereWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatUpdateManyWithWhereWithoutOrganizationInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => AiChatScalarWhereInputObjectSchema), z.lazy(() => AiChatScalarWhereInputObjectSchema).array()]).optional()
}).strict();


// File: MemberUncheckedUpdateManyWithoutOrganizationNestedInput.schema.ts

export const MemberUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyWithoutOrganizationNestedInput, Prisma.MemberUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([z.lazy(() => MemberCreateWithoutOrganizationInputObjectSchema), z.lazy(() => MemberCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => MemberUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => MemberUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => MemberCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => MemberUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => MemberUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => MemberUpdateManyWithWhereWithoutOrganizationInputObjectSchema), z.lazy(() => MemberUpdateManyWithWhereWithoutOrganizationInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => MemberScalarWhereInputObjectSchema), z.lazy(() => MemberScalarWhereInputObjectSchema).array()]).optional()
}).strict();
export const MemberUncheckedUpdateManyWithoutOrganizationNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => MemberCreateWithoutOrganizationInputObjectSchema), z.lazy(() => MemberCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => MemberUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => MemberUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => MemberCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => MemberWhereUniqueInputObjectSchema), z.lazy(() => MemberWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => MemberUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => MemberUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => MemberUpdateManyWithWhereWithoutOrganizationInputObjectSchema), z.lazy(() => MemberUpdateManyWithWhereWithoutOrganizationInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => MemberScalarWhereInputObjectSchema), z.lazy(() => MemberScalarWhereInputObjectSchema).array()]).optional()
}).strict();


// File: InvitationUncheckedUpdateManyWithoutOrganizationNestedInput.schema.ts

export const InvitationUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyWithoutOrganizationNestedInput, Prisma.InvitationUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([z.lazy(() => InvitationCreateWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => InvitationUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => InvitationCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => InvitationUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => InvitationUpdateManyWithWhereWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationUpdateManyWithWhereWithoutOrganizationInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => InvitationScalarWhereInputObjectSchema), z.lazy(() => InvitationScalarWhereInputObjectSchema).array()]).optional()
}).strict();
export const InvitationUncheckedUpdateManyWithoutOrganizationNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => InvitationCreateWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => InvitationUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => InvitationCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => InvitationWhereUniqueInputObjectSchema), z.lazy(() => InvitationWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => InvitationUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => InvitationUpdateManyWithWhereWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationUpdateManyWithWhereWithoutOrganizationInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => InvitationScalarWhereInputObjectSchema), z.lazy(() => InvitationScalarWhereInputObjectSchema).array()]).optional()
}).strict();


// File: PurchaseUncheckedUpdateManyWithoutOrganizationNestedInput.schema.ts

export const PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateManyWithoutOrganizationNestedInput, Prisma.PurchaseUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([z.lazy(() => PurchaseCreateWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => PurchaseUpdateManyWithWhereWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseUpdateManyWithWhereWithoutOrganizationInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => PurchaseScalarWhereInputObjectSchema), z.lazy(() => PurchaseScalarWhereInputObjectSchema).array()]).optional()
}).strict();
export const PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => PurchaseCreateWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => PurchaseCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => PurchaseWhereUniqueInputObjectSchema), z.lazy(() => PurchaseWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => PurchaseUpdateManyWithWhereWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseUpdateManyWithWhereWithoutOrganizationInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => PurchaseScalarWhereInputObjectSchema), z.lazy(() => PurchaseScalarWhereInputObjectSchema).array()]).optional()
}).strict();


// File: AiChatUncheckedUpdateManyWithoutOrganizationNestedInput.schema.ts

export const AiChatUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema: z.ZodType<Prisma.AiChatUncheckedUpdateManyWithoutOrganizationNestedInput, Prisma.AiChatUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([z.lazy(() => AiChatCreateWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => AiChatUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => AiChatCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => AiChatUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => AiChatUpdateManyWithWhereWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatUpdateManyWithWhereWithoutOrganizationInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => AiChatScalarWhereInputObjectSchema), z.lazy(() => AiChatScalarWhereInputObjectSchema).array()]).optional()
}).strict();
export const AiChatUncheckedUpdateManyWithoutOrganizationNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => AiChatCreateWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatCreateWithoutOrganizationInputObjectSchema).array(), z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputObjectSchema).array()]).optional(),
  connectOrCreate: z.union([z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatCreateOrConnectWithoutOrganizationInputObjectSchema).array()]).optional(),
  upsert: z.union([z.lazy(() => AiChatUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  createMany: z.lazy(() => AiChatCreateManyOrganizationInputEnvelopeObjectSchema).optional(),
  set: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  disconnect: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  delete: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  connect: z.union([z.lazy(() => AiChatWhereUniqueInputObjectSchema), z.lazy(() => AiChatWhereUniqueInputObjectSchema).array()]).optional(),
  update: z.union([z.lazy(() => AiChatUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema).array()]).optional(),
  updateMany: z.union([z.lazy(() => AiChatUpdateManyWithWhereWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatUpdateManyWithWhereWithoutOrganizationInputObjectSchema).array()]).optional(),
  deleteMany: z.union([z.lazy(() => AiChatScalarWhereInputObjectSchema), z.lazy(() => AiChatScalarWhereInputObjectSchema).array()]).optional()
}).strict();


// File: OrganizationCreateNestedOneWithoutMembersInput.schema.ts

export const OrganizationCreateNestedOneWithoutMembersInputObjectSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutMembersInput, Prisma.OrganizationCreateNestedOneWithoutMembersInput> = z.object({
  create: z.union([z.lazy(() => OrganizationCreateWithoutMembersInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutMembersInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutMembersInputObjectSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputObjectSchema).optional()
}).strict();
export const OrganizationCreateNestedOneWithoutMembersInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => OrganizationCreateWithoutMembersInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutMembersInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutMembersInputObjectSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputObjectSchema).optional()
}).strict();


// File: UserCreateNestedOneWithoutMembersInput.schema.ts

export const UserCreateNestedOneWithoutMembersInputObjectSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutMembersInput, Prisma.UserCreateNestedOneWithoutMembersInput> = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutMembersInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutMembersInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutMembersInputObjectSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional()
}).strict();
export const UserCreateNestedOneWithoutMembersInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutMembersInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutMembersInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutMembersInputObjectSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional()
}).strict();


// File: OrganizationUpdateOneRequiredWithoutMembersNestedInput.schema.ts

export const OrganizationUpdateOneRequiredWithoutMembersNestedInputObjectSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutMembersNestedInput, Prisma.OrganizationUpdateOneRequiredWithoutMembersNestedInput> = z.object({
  create: z.union([z.lazy(() => OrganizationCreateWithoutMembersInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutMembersInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutMembersInputObjectSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutMembersInputObjectSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputObjectSchema).optional(),
  update: z.union([z.lazy(() => OrganizationUpdateToOneWithWhereWithoutMembersInputObjectSchema), z.lazy(() => OrganizationUpdateWithoutMembersInputObjectSchema), z.lazy(() => OrganizationUncheckedUpdateWithoutMembersInputObjectSchema)]).optional()
}).strict();
export const OrganizationUpdateOneRequiredWithoutMembersNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => OrganizationCreateWithoutMembersInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutMembersInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutMembersInputObjectSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutMembersInputObjectSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputObjectSchema).optional(),
  update: z.union([z.lazy(() => OrganizationUpdateToOneWithWhereWithoutMembersInputObjectSchema), z.lazy(() => OrganizationUpdateWithoutMembersInputObjectSchema), z.lazy(() => OrganizationUncheckedUpdateWithoutMembersInputObjectSchema)]).optional()
}).strict();


// File: UserUpdateOneRequiredWithoutMembersNestedInput.schema.ts

export const UserUpdateOneRequiredWithoutMembersNestedInputObjectSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutMembersNestedInput, Prisma.UserUpdateOneRequiredWithoutMembersNestedInput> = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutMembersInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutMembersInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutMembersInputObjectSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutMembersInputObjectSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional(),
  update: z.union([z.lazy(() => UserUpdateToOneWithWhereWithoutMembersInputObjectSchema), z.lazy(() => UserUpdateWithoutMembersInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutMembersInputObjectSchema)]).optional()
}).strict();
export const UserUpdateOneRequiredWithoutMembersNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutMembersInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutMembersInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutMembersInputObjectSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutMembersInputObjectSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional(),
  update: z.union([z.lazy(() => UserUpdateToOneWithWhereWithoutMembersInputObjectSchema), z.lazy(() => UserUpdateWithoutMembersInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutMembersInputObjectSchema)]).optional()
}).strict();


// File: OrganizationCreateNestedOneWithoutInvitationsInput.schema.ts

export const OrganizationCreateNestedOneWithoutInvitationsInputObjectSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutInvitationsInput, Prisma.OrganizationCreateNestedOneWithoutInvitationsInput> = z.object({
  create: z.union([z.lazy(() => OrganizationCreateWithoutInvitationsInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutInvitationsInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutInvitationsInputObjectSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputObjectSchema).optional()
}).strict();
export const OrganizationCreateNestedOneWithoutInvitationsInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => OrganizationCreateWithoutInvitationsInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutInvitationsInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutInvitationsInputObjectSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputObjectSchema).optional()
}).strict();


// File: UserCreateNestedOneWithoutInvitationsInput.schema.ts

export const UserCreateNestedOneWithoutInvitationsInputObjectSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutInvitationsInput, Prisma.UserCreateNestedOneWithoutInvitationsInput> = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutInvitationsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutInvitationsInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutInvitationsInputObjectSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional()
}).strict();
export const UserCreateNestedOneWithoutInvitationsInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutInvitationsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutInvitationsInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutInvitationsInputObjectSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional()
}).strict();


// File: OrganizationUpdateOneRequiredWithoutInvitationsNestedInput.schema.ts

export const OrganizationUpdateOneRequiredWithoutInvitationsNestedInputObjectSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutInvitationsNestedInput, Prisma.OrganizationUpdateOneRequiredWithoutInvitationsNestedInput> = z.object({
  create: z.union([z.lazy(() => OrganizationCreateWithoutInvitationsInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutInvitationsInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutInvitationsInputObjectSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutInvitationsInputObjectSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputObjectSchema).optional(),
  update: z.union([z.lazy(() => OrganizationUpdateToOneWithWhereWithoutInvitationsInputObjectSchema), z.lazy(() => OrganizationUpdateWithoutInvitationsInputObjectSchema), z.lazy(() => OrganizationUncheckedUpdateWithoutInvitationsInputObjectSchema)]).optional()
}).strict();
export const OrganizationUpdateOneRequiredWithoutInvitationsNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => OrganizationCreateWithoutInvitationsInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutInvitationsInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutInvitationsInputObjectSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutInvitationsInputObjectSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputObjectSchema).optional(),
  update: z.union([z.lazy(() => OrganizationUpdateToOneWithWhereWithoutInvitationsInputObjectSchema), z.lazy(() => OrganizationUpdateWithoutInvitationsInputObjectSchema), z.lazy(() => OrganizationUncheckedUpdateWithoutInvitationsInputObjectSchema)]).optional()
}).strict();


// File: UserUpdateOneRequiredWithoutInvitationsNestedInput.schema.ts

export const UserUpdateOneRequiredWithoutInvitationsNestedInputObjectSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutInvitationsNestedInput, Prisma.UserUpdateOneRequiredWithoutInvitationsNestedInput> = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutInvitationsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutInvitationsInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutInvitationsInputObjectSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutInvitationsInputObjectSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional(),
  update: z.union([z.lazy(() => UserUpdateToOneWithWhereWithoutInvitationsInputObjectSchema), z.lazy(() => UserUpdateWithoutInvitationsInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutInvitationsInputObjectSchema)]).optional()
}).strict();
export const UserUpdateOneRequiredWithoutInvitationsNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutInvitationsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutInvitationsInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutInvitationsInputObjectSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutInvitationsInputObjectSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional(),
  update: z.union([z.lazy(() => UserUpdateToOneWithWhereWithoutInvitationsInputObjectSchema), z.lazy(() => UserUpdateWithoutInvitationsInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutInvitationsInputObjectSchema)]).optional()
}).strict();


// File: OrganizationCreateNestedOneWithoutPurchasesInput.schema.ts

export const OrganizationCreateNestedOneWithoutPurchasesInputObjectSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutPurchasesInput, Prisma.OrganizationCreateNestedOneWithoutPurchasesInput> = z.object({
  create: z.union([z.lazy(() => OrganizationCreateWithoutPurchasesInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutPurchasesInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutPurchasesInputObjectSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputObjectSchema).optional()
}).strict();
export const OrganizationCreateNestedOneWithoutPurchasesInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => OrganizationCreateWithoutPurchasesInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutPurchasesInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutPurchasesInputObjectSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputObjectSchema).optional()
}).strict();


// File: UserCreateNestedOneWithoutPurchasesInput.schema.ts

export const UserCreateNestedOneWithoutPurchasesInputObjectSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutPurchasesInput, Prisma.UserCreateNestedOneWithoutPurchasesInput> = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutPurchasesInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutPurchasesInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPurchasesInputObjectSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional()
}).strict();
export const UserCreateNestedOneWithoutPurchasesInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutPurchasesInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutPurchasesInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPurchasesInputObjectSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional()
}).strict();


// File: EnumPurchaseTypeFieldUpdateOperationsInput.schema.ts

export const EnumPurchaseTypeFieldUpdateOperationsInputObjectSchema: z.ZodType<Prisma.EnumPurchaseTypeFieldUpdateOperationsInput, Prisma.EnumPurchaseTypeFieldUpdateOperationsInput> = z.object({
  set: PurchaseTypeSchema.optional()
}).strict();
export const EnumPurchaseTypeFieldUpdateOperationsInputObjectZodSchema = z.object({
  set: PurchaseTypeSchema.optional()
}).strict();


// File: OrganizationUpdateOneWithoutPurchasesNestedInput.schema.ts

export const OrganizationUpdateOneWithoutPurchasesNestedInputObjectSchema: z.ZodType<Prisma.OrganizationUpdateOneWithoutPurchasesNestedInput, Prisma.OrganizationUpdateOneWithoutPurchasesNestedInput> = z.object({
  create: z.union([z.lazy(() => OrganizationCreateWithoutPurchasesInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutPurchasesInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutPurchasesInputObjectSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutPurchasesInputObjectSchema).optional(),
  disconnect: z.union([z.boolean(), z.lazy(() => OrganizationWhereInputObjectSchema)]).optional(),
  delete: z.union([z.boolean(), z.lazy(() => OrganizationWhereInputObjectSchema)]).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputObjectSchema).optional(),
  update: z.union([z.lazy(() => OrganizationUpdateToOneWithWhereWithoutPurchasesInputObjectSchema), z.lazy(() => OrganizationUpdateWithoutPurchasesInputObjectSchema), z.lazy(() => OrganizationUncheckedUpdateWithoutPurchasesInputObjectSchema)]).optional()
}).strict();
export const OrganizationUpdateOneWithoutPurchasesNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => OrganizationCreateWithoutPurchasesInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutPurchasesInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutPurchasesInputObjectSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutPurchasesInputObjectSchema).optional(),
  disconnect: z.union([z.boolean(), z.lazy(() => OrganizationWhereInputObjectSchema)]).optional(),
  delete: z.union([z.boolean(), z.lazy(() => OrganizationWhereInputObjectSchema)]).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputObjectSchema).optional(),
  update: z.union([z.lazy(() => OrganizationUpdateToOneWithWhereWithoutPurchasesInputObjectSchema), z.lazy(() => OrganizationUpdateWithoutPurchasesInputObjectSchema), z.lazy(() => OrganizationUncheckedUpdateWithoutPurchasesInputObjectSchema)]).optional()
}).strict();


// File: UserUpdateOneWithoutPurchasesNestedInput.schema.ts

export const UserUpdateOneWithoutPurchasesNestedInputObjectSchema: z.ZodType<Prisma.UserUpdateOneWithoutPurchasesNestedInput, Prisma.UserUpdateOneWithoutPurchasesNestedInput> = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutPurchasesInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutPurchasesInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPurchasesInputObjectSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutPurchasesInputObjectSchema).optional(),
  disconnect: z.union([z.boolean(), z.lazy(() => UserWhereInputObjectSchema)]).optional(),
  delete: z.union([z.boolean(), z.lazy(() => UserWhereInputObjectSchema)]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional(),
  update: z.union([z.lazy(() => UserUpdateToOneWithWhereWithoutPurchasesInputObjectSchema), z.lazy(() => UserUpdateWithoutPurchasesInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutPurchasesInputObjectSchema)]).optional()
}).strict();
export const UserUpdateOneWithoutPurchasesNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutPurchasesInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutPurchasesInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPurchasesInputObjectSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutPurchasesInputObjectSchema).optional(),
  disconnect: z.union([z.boolean(), z.lazy(() => UserWhereInputObjectSchema)]).optional(),
  delete: z.union([z.boolean(), z.lazy(() => UserWhereInputObjectSchema)]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional(),
  update: z.union([z.lazy(() => UserUpdateToOneWithWhereWithoutPurchasesInputObjectSchema), z.lazy(() => UserUpdateWithoutPurchasesInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutPurchasesInputObjectSchema)]).optional()
}).strict();


// File: OrganizationCreateNestedOneWithoutAiChatsInput.schema.ts

export const OrganizationCreateNestedOneWithoutAiChatsInputObjectSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutAiChatsInput, Prisma.OrganizationCreateNestedOneWithoutAiChatsInput> = z.object({
  create: z.union([z.lazy(() => OrganizationCreateWithoutAiChatsInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutAiChatsInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutAiChatsInputObjectSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputObjectSchema).optional()
}).strict();
export const OrganizationCreateNestedOneWithoutAiChatsInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => OrganizationCreateWithoutAiChatsInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutAiChatsInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutAiChatsInputObjectSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputObjectSchema).optional()
}).strict();


// File: UserCreateNestedOneWithoutAiChatsInput.schema.ts

export const UserCreateNestedOneWithoutAiChatsInputObjectSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutAiChatsInput, Prisma.UserCreateNestedOneWithoutAiChatsInput> = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutAiChatsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutAiChatsInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAiChatsInputObjectSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional()
}).strict();
export const UserCreateNestedOneWithoutAiChatsInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutAiChatsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutAiChatsInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAiChatsInputObjectSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional()
}).strict();


// File: OrganizationUpdateOneWithoutAiChatsNestedInput.schema.ts

export const OrganizationUpdateOneWithoutAiChatsNestedInputObjectSchema: z.ZodType<Prisma.OrganizationUpdateOneWithoutAiChatsNestedInput, Prisma.OrganizationUpdateOneWithoutAiChatsNestedInput> = z.object({
  create: z.union([z.lazy(() => OrganizationCreateWithoutAiChatsInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutAiChatsInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutAiChatsInputObjectSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutAiChatsInputObjectSchema).optional(),
  disconnect: z.union([z.boolean(), z.lazy(() => OrganizationWhereInputObjectSchema)]).optional(),
  delete: z.union([z.boolean(), z.lazy(() => OrganizationWhereInputObjectSchema)]).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputObjectSchema).optional(),
  update: z.union([z.lazy(() => OrganizationUpdateToOneWithWhereWithoutAiChatsInputObjectSchema), z.lazy(() => OrganizationUpdateWithoutAiChatsInputObjectSchema), z.lazy(() => OrganizationUncheckedUpdateWithoutAiChatsInputObjectSchema)]).optional()
}).strict();
export const OrganizationUpdateOneWithoutAiChatsNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => OrganizationCreateWithoutAiChatsInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutAiChatsInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutAiChatsInputObjectSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutAiChatsInputObjectSchema).optional(),
  disconnect: z.union([z.boolean(), z.lazy(() => OrganizationWhereInputObjectSchema)]).optional(),
  delete: z.union([z.boolean(), z.lazy(() => OrganizationWhereInputObjectSchema)]).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputObjectSchema).optional(),
  update: z.union([z.lazy(() => OrganizationUpdateToOneWithWhereWithoutAiChatsInputObjectSchema), z.lazy(() => OrganizationUpdateWithoutAiChatsInputObjectSchema), z.lazy(() => OrganizationUncheckedUpdateWithoutAiChatsInputObjectSchema)]).optional()
}).strict();


// File: UserUpdateOneWithoutAiChatsNestedInput.schema.ts

export const UserUpdateOneWithoutAiChatsNestedInputObjectSchema: z.ZodType<Prisma.UserUpdateOneWithoutAiChatsNestedInput, Prisma.UserUpdateOneWithoutAiChatsNestedInput> = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutAiChatsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutAiChatsInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAiChatsInputObjectSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutAiChatsInputObjectSchema).optional(),
  disconnect: z.union([z.boolean(), z.lazy(() => UserWhereInputObjectSchema)]).optional(),
  delete: z.union([z.boolean(), z.lazy(() => UserWhereInputObjectSchema)]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional(),
  update: z.union([z.lazy(() => UserUpdateToOneWithWhereWithoutAiChatsInputObjectSchema), z.lazy(() => UserUpdateWithoutAiChatsInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutAiChatsInputObjectSchema)]).optional()
}).strict();
export const UserUpdateOneWithoutAiChatsNestedInputObjectZodSchema = z.object({
  create: z.union([z.lazy(() => UserCreateWithoutAiChatsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutAiChatsInputObjectSchema)]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAiChatsInputObjectSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutAiChatsInputObjectSchema).optional(),
  disconnect: z.union([z.boolean(), z.lazy(() => UserWhereInputObjectSchema)]).optional(),
  delete: z.union([z.boolean(), z.lazy(() => UserWhereInputObjectSchema)]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputObjectSchema).optional(),
  update: z.union([z.lazy(() => UserUpdateToOneWithWhereWithoutAiChatsInputObjectSchema), z.lazy(() => UserUpdateWithoutAiChatsInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutAiChatsInputObjectSchema)]).optional()
}).strict();


// File: NestedStringFilter.schema.ts


export const NestedStringFilterObjectSchema: z.ZodType<Prisma.NestedStringFilter, Prisma.NestedStringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([z.string(), z.lazy(() => NestedStringFilterObjectSchema)]).optional()
}).strict();
export const NestedStringFilterObjectZodSchema = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([z.string(), z.lazy(() => NestedStringFilterObjectSchema)]).optional()
}).strict();


// File: NestedBoolFilter.schema.ts


export const NestedBoolFilterObjectSchema: z.ZodType<Prisma.NestedBoolFilter, Prisma.NestedBoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([z.boolean(), z.lazy(() => NestedBoolFilterObjectSchema)]).optional()
}).strict();
export const NestedBoolFilterObjectZodSchema = z.object({
  equals: z.boolean().optional(),
  not: z.union([z.boolean(), z.lazy(() => NestedBoolFilterObjectSchema)]).optional()
}).strict();


// File: NestedStringNullableFilter.schema.ts


export const NestedStringNullableFilterObjectSchema: z.ZodType<Prisma.NestedStringNullableFilter, Prisma.NestedStringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([z.string(), z.lazy(() => NestedStringNullableFilterObjectSchema)]).optional().nullable()
}).strict();
export const NestedStringNullableFilterObjectZodSchema = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([z.string(), z.lazy(() => NestedStringNullableFilterObjectSchema)]).optional().nullable()
}).strict();


// File: NestedDateTimeFilter.schema.ts


export const NestedDateTimeFilterObjectSchema: z.ZodType<Prisma.NestedDateTimeFilter, Prisma.NestedDateTimeFilter> = z.object({
  equals: z.union([z.date(), z.iso.datetime()]).optional(),
  in: z.union([z.date().array(), z.iso.datetime().array()]).optional(),
  notIn: z.union([z.date().array(), z.iso.datetime().array()]).optional(),
  lt: z.union([z.date(), z.iso.datetime()]).optional(),
  lte: z.union([z.date(), z.iso.datetime()]).optional(),
  gt: z.union([z.date(), z.iso.datetime()]).optional(),
  gte: z.union([z.date(), z.iso.datetime()]).optional(),
  not: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NestedDateTimeFilterObjectSchema)]).optional()
}).strict();
export const NestedDateTimeFilterObjectZodSchema = z.object({
  equals: z.union([z.date(), z.iso.datetime()]).optional(),
  in: z.union([z.date().array(), z.iso.datetime().array()]).optional(),
  notIn: z.union([z.date().array(), z.iso.datetime().array()]).optional(),
  lt: z.union([z.date(), z.iso.datetime()]).optional(),
  lte: z.union([z.date(), z.iso.datetime()]).optional(),
  gt: z.union([z.date(), z.iso.datetime()]).optional(),
  gte: z.union([z.date(), z.iso.datetime()]).optional(),
  not: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NestedDateTimeFilterObjectSchema)]).optional()
}).strict();


// File: NestedBoolNullableFilter.schema.ts


export const NestedBoolNullableFilterObjectSchema: z.ZodType<Prisma.NestedBoolNullableFilter, Prisma.NestedBoolNullableFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([z.boolean(), z.lazy(() => NestedBoolNullableFilterObjectSchema)]).optional().nullable()
}).strict();
export const NestedBoolNullableFilterObjectZodSchema = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([z.boolean(), z.lazy(() => NestedBoolNullableFilterObjectSchema)]).optional().nullable()
}).strict();


// File: NestedDateTimeNullableFilter.schema.ts


export const NestedDateTimeNullableFilterObjectSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter, Prisma.NestedDateTimeNullableFilter> = z.object({
  equals: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  in: z.union([z.date().array(), z.iso.datetime().array()]).optional().nullable(),
  notIn: z.union([z.date().array(), z.iso.datetime().array()]).optional().nullable(),
  lt: z.union([z.date(), z.iso.datetime()]).optional(),
  lte: z.union([z.date(), z.iso.datetime()]).optional(),
  gt: z.union([z.date(), z.iso.datetime()]).optional(),
  gte: z.union([z.date(), z.iso.datetime()]).optional(),
  not: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NestedDateTimeNullableFilterObjectSchema)]).optional().nullable()
}).strict();
export const NestedDateTimeNullableFilterObjectZodSchema = z.object({
  equals: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  in: z.union([z.date().array(), z.iso.datetime().array()]).optional().nullable(),
  notIn: z.union([z.date().array(), z.iso.datetime().array()]).optional().nullable(),
  lt: z.union([z.date(), z.iso.datetime()]).optional(),
  lte: z.union([z.date(), z.iso.datetime()]).optional(),
  gt: z.union([z.date(), z.iso.datetime()]).optional(),
  gte: z.union([z.date(), z.iso.datetime()]).optional(),
  not: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NestedDateTimeNullableFilterObjectSchema)]).optional().nullable()
}).strict();


// File: NestedStringWithAggregatesFilter.schema.ts

export const NestedStringWithAggregatesFilterObjectSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter, Prisma.NestedStringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([z.string(), z.lazy(() => NestedStringWithAggregatesFilterObjectSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedStringFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedStringFilterObjectSchema).optional()
}).strict();
export const NestedStringWithAggregatesFilterObjectZodSchema = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([z.string(), z.lazy(() => NestedStringWithAggregatesFilterObjectSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedStringFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedStringFilterObjectSchema).optional()
}).strict();


// File: NestedIntFilter.schema.ts


export const NestedIntFilterObjectSchema: z.ZodType<Prisma.NestedIntFilter, Prisma.NestedIntFilter> = z.object({
  equals: z.number().int().optional(),
  in: z.number().int().array().optional(),
  notIn: z.number().int().array().optional(),
  lt: z.number().int().optional(),
  lte: z.number().int().optional(),
  gt: z.number().int().optional(),
  gte: z.number().int().optional(),
  not: z.union([z.number().int(), z.lazy(() => NestedIntFilterObjectSchema)]).optional()
}).strict();
export const NestedIntFilterObjectZodSchema = z.object({
  equals: z.number().int().optional(),
  in: z.number().int().array().optional(),
  notIn: z.number().int().array().optional(),
  lt: z.number().int().optional(),
  lte: z.number().int().optional(),
  gt: z.number().int().optional(),
  gte: z.number().int().optional(),
  not: z.union([z.number().int(), z.lazy(() => NestedIntFilterObjectSchema)]).optional()
}).strict();


// File: NestedBoolWithAggregatesFilter.schema.ts

export const NestedBoolWithAggregatesFilterObjectSchema: z.ZodType<Prisma.NestedBoolWithAggregatesFilter, Prisma.NestedBoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([z.boolean(), z.lazy(() => NestedBoolWithAggregatesFilterObjectSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterObjectSchema).optional()
}).strict();
export const NestedBoolWithAggregatesFilterObjectZodSchema = z.object({
  equals: z.boolean().optional(),
  not: z.union([z.boolean(), z.lazy(() => NestedBoolWithAggregatesFilterObjectSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterObjectSchema).optional()
}).strict();


// File: NestedStringNullableWithAggregatesFilter.schema.ts

export const NestedStringNullableWithAggregatesFilterObjectSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter, Prisma.NestedStringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([z.string(), z.lazy(() => NestedStringNullableWithAggregatesFilterObjectSchema)]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterObjectSchema).optional()
}).strict();
export const NestedStringNullableWithAggregatesFilterObjectZodSchema = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([z.string(), z.lazy(() => NestedStringNullableWithAggregatesFilterObjectSchema)]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterObjectSchema).optional()
}).strict();


// File: NestedIntNullableFilter.schema.ts


export const NestedIntNullableFilterObjectSchema: z.ZodType<Prisma.NestedIntNullableFilter, Prisma.NestedIntNullableFilter> = z.object({
  equals: z.number().int().optional().nullable(),
  in: z.number().int().array().optional().nullable(),
  notIn: z.number().int().array().optional().nullable(),
  lt: z.number().int().optional(),
  lte: z.number().int().optional(),
  gt: z.number().int().optional(),
  gte: z.number().int().optional(),
  not: z.union([z.number().int(), z.lazy(() => NestedIntNullableFilterObjectSchema)]).optional().nullable()
}).strict();
export const NestedIntNullableFilterObjectZodSchema = z.object({
  equals: z.number().int().optional().nullable(),
  in: z.number().int().array().optional().nullable(),
  notIn: z.number().int().array().optional().nullable(),
  lt: z.number().int().optional(),
  lte: z.number().int().optional(),
  gt: z.number().int().optional(),
  gte: z.number().int().optional(),
  not: z.union([z.number().int(), z.lazy(() => NestedIntNullableFilterObjectSchema)]).optional().nullable()
}).strict();


// File: NestedDateTimeWithAggregatesFilter.schema.ts

export const NestedDateTimeWithAggregatesFilterObjectSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter, Prisma.NestedDateTimeWithAggregatesFilter> = z.object({
  equals: z.union([z.date(), z.iso.datetime()]).optional(),
  in: z.union([z.date().array(), z.iso.datetime().array()]).optional(),
  notIn: z.union([z.date().array(), z.iso.datetime().array()]).optional(),
  lt: z.union([z.date(), z.iso.datetime()]).optional(),
  lte: z.union([z.date(), z.iso.datetime()]).optional(),
  gt: z.union([z.date(), z.iso.datetime()]).optional(),
  gte: z.union([z.date(), z.iso.datetime()]).optional(),
  not: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NestedDateTimeWithAggregatesFilterObjectSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterObjectSchema).optional()
}).strict();
export const NestedDateTimeWithAggregatesFilterObjectZodSchema = z.object({
  equals: z.union([z.date(), z.iso.datetime()]).optional(),
  in: z.union([z.date().array(), z.iso.datetime().array()]).optional(),
  notIn: z.union([z.date().array(), z.iso.datetime().array()]).optional(),
  lt: z.union([z.date(), z.iso.datetime()]).optional(),
  lte: z.union([z.date(), z.iso.datetime()]).optional(),
  gt: z.union([z.date(), z.iso.datetime()]).optional(),
  gte: z.union([z.date(), z.iso.datetime()]).optional(),
  not: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NestedDateTimeWithAggregatesFilterObjectSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterObjectSchema).optional()
}).strict();


// File: NestedBoolNullableWithAggregatesFilter.schema.ts

export const NestedBoolNullableWithAggregatesFilterObjectSchema: z.ZodType<Prisma.NestedBoolNullableWithAggregatesFilter, Prisma.NestedBoolNullableWithAggregatesFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([z.boolean(), z.lazy(() => NestedBoolNullableWithAggregatesFilterObjectSchema)]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterObjectSchema).optional()
}).strict();
export const NestedBoolNullableWithAggregatesFilterObjectZodSchema = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([z.boolean(), z.lazy(() => NestedBoolNullableWithAggregatesFilterObjectSchema)]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterObjectSchema).optional()
}).strict();


// File: NestedDateTimeNullableWithAggregatesFilter.schema.ts

export const NestedDateTimeNullableWithAggregatesFilterObjectSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter, Prisma.NestedDateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  in: z.union([z.date().array(), z.iso.datetime().array()]).optional().nullable(),
  notIn: z.union([z.date().array(), z.iso.datetime().array()]).optional().nullable(),
  lt: z.union([z.date(), z.iso.datetime()]).optional(),
  lte: z.union([z.date(), z.iso.datetime()]).optional(),
  gt: z.union([z.date(), z.iso.datetime()]).optional(),
  gte: z.union([z.date(), z.iso.datetime()]).optional(),
  not: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NestedDateTimeNullableWithAggregatesFilterObjectSchema)]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterObjectSchema).optional()
}).strict();
export const NestedDateTimeNullableWithAggregatesFilterObjectZodSchema = z.object({
  equals: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  in: z.union([z.date().array(), z.iso.datetime().array()]).optional().nullable(),
  notIn: z.union([z.date().array(), z.iso.datetime().array()]).optional().nullable(),
  lt: z.union([z.date(), z.iso.datetime()]).optional(),
  lte: z.union([z.date(), z.iso.datetime()]).optional(),
  gt: z.union([z.date(), z.iso.datetime()]).optional(),
  gte: z.union([z.date(), z.iso.datetime()]).optional(),
  not: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NestedDateTimeNullableWithAggregatesFilterObjectSchema)]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterObjectSchema).optional()
}).strict();


// File: NestedIntWithAggregatesFilter.schema.ts

export const NestedIntWithAggregatesFilterObjectSchema: z.ZodType<Prisma.NestedIntWithAggregatesFilter, Prisma.NestedIntWithAggregatesFilter> = z.object({
  equals: z.number().int().optional(),
  in: z.number().int().array().optional(),
  notIn: z.number().int().array().optional(),
  lt: z.number().int().optional(),
  lte: z.number().int().optional(),
  gt: z.number().int().optional(),
  gte: z.number().int().optional(),
  not: z.union([z.number().int(), z.lazy(() => NestedIntWithAggregatesFilterObjectSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterObjectSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterObjectSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedIntFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedIntFilterObjectSchema).optional()
}).strict();
export const NestedIntWithAggregatesFilterObjectZodSchema = z.object({
  equals: z.number().int().optional(),
  in: z.number().int().array().optional(),
  notIn: z.number().int().array().optional(),
  lt: z.number().int().optional(),
  lte: z.number().int().optional(),
  gt: z.number().int().optional(),
  gte: z.number().int().optional(),
  not: z.union([z.number().int(), z.lazy(() => NestedIntWithAggregatesFilterObjectSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterObjectSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterObjectSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedIntFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedIntFilterObjectSchema).optional()
}).strict();


// File: NestedFloatFilter.schema.ts


export const NestedFloatFilterObjectSchema: z.ZodType<Prisma.NestedFloatFilter, Prisma.NestedFloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([z.number(), z.lazy(() => NestedFloatFilterObjectSchema)]).optional()
}).strict();
export const NestedFloatFilterObjectZodSchema = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([z.number(), z.lazy(() => NestedFloatFilterObjectSchema)]).optional()
}).strict();


// File: NestedEnumPurchaseTypeFilter.schema.ts

export const NestedEnumPurchaseTypeFilterObjectSchema: z.ZodType<Prisma.NestedEnumPurchaseTypeFilter, Prisma.NestedEnumPurchaseTypeFilter> = z.object({
  equals: PurchaseTypeSchema.optional(),
  in: PurchaseTypeSchema.array().optional(),
  notIn: PurchaseTypeSchema.array().optional(),
  not: z.union([PurchaseTypeSchema, z.lazy(() => NestedEnumPurchaseTypeFilterObjectSchema)]).optional()
}).strict();
export const NestedEnumPurchaseTypeFilterObjectZodSchema = z.object({
  equals: PurchaseTypeSchema.optional(),
  in: PurchaseTypeSchema.array().optional(),
  notIn: PurchaseTypeSchema.array().optional(),
  not: z.union([PurchaseTypeSchema, z.lazy(() => NestedEnumPurchaseTypeFilterObjectSchema)]).optional()
}).strict();


// File: NestedEnumPurchaseTypeWithAggregatesFilter.schema.ts

export const NestedEnumPurchaseTypeWithAggregatesFilterObjectSchema: z.ZodType<Prisma.NestedEnumPurchaseTypeWithAggregatesFilter, Prisma.NestedEnumPurchaseTypeWithAggregatesFilter> = z.object({
  equals: PurchaseTypeSchema.optional(),
  in: PurchaseTypeSchema.array().optional(),
  notIn: PurchaseTypeSchema.array().optional(),
  not: z.union([PurchaseTypeSchema, z.lazy(() => NestedEnumPurchaseTypeWithAggregatesFilterObjectSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedEnumPurchaseTypeFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedEnumPurchaseTypeFilterObjectSchema).optional()
}).strict();
export const NestedEnumPurchaseTypeWithAggregatesFilterObjectZodSchema = z.object({
  equals: PurchaseTypeSchema.optional(),
  in: PurchaseTypeSchema.array().optional(),
  notIn: PurchaseTypeSchema.array().optional(),
  not: z.union([PurchaseTypeSchema, z.lazy(() => NestedEnumPurchaseTypeWithAggregatesFilterObjectSchema)]).optional(),
  _count: z.lazy(() => NestedIntFilterObjectSchema).optional(),
  _min: z.lazy(() => NestedEnumPurchaseTypeFilterObjectSchema).optional(),
  _max: z.lazy(() => NestedEnumPurchaseTypeFilterObjectSchema).optional()
}).strict();


// File: NestedJsonFilter.schema.ts


const literalSchema = z.union([z.string(), z.number(), z.boolean()]);
const jsonSchema = z.lazy(() =>
  z.union([literalSchema, z.array(jsonSchema.nullable()), z.record(z.string(), jsonSchema.nullable())])
);

export const NestedJsonFilterObjectSchema: z.ZodType<Prisma.NestedJsonFilter, Prisma.NestedJsonFilter> = z.object({
  equals: jsonSchema.optional(),
  path: z.string().array().optional(),
  mode: QueryModeSchema.optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: jsonSchema.optional().nullable(),
  array_ends_with: jsonSchema.optional().nullable(),
  array_contains: jsonSchema.optional().nullable(),
  lt: jsonSchema.optional(),
  lte: jsonSchema.optional(),
  gt: jsonSchema.optional(),
  gte: jsonSchema.optional(),
  not: jsonSchema.optional()
}).strict();
export const NestedJsonFilterObjectZodSchema = z.object({
  equals: jsonSchema.optional(),
  path: z.string().array().optional(),
  mode: QueryModeSchema.optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_starts_with: jsonSchema.optional().nullable(),
  array_ends_with: jsonSchema.optional().nullable(),
  array_contains: jsonSchema.optional().nullable(),
  lt: jsonSchema.optional(),
  lte: jsonSchema.optional(),
  gt: jsonSchema.optional(),
  gte: jsonSchema.optional(),
  not: jsonSchema.optional()
}).strict();


// File: SessionCreateWithoutUserInput.schema.ts


export const SessionCreateWithoutUserInputObjectSchema: z.ZodType<Prisma.SessionCreateWithoutUserInput, Prisma.SessionCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  token: z.string(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()])
}).strict();
export const SessionCreateWithoutUserInputObjectZodSchema = z.object({
  id: z.string().optional(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  token: z.string(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()])
}).strict();


// File: SessionUncheckedCreateWithoutUserInput.schema.ts


export const SessionUncheckedCreateWithoutUserInputObjectSchema: z.ZodType<Prisma.SessionUncheckedCreateWithoutUserInput, Prisma.SessionUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  token: z.string(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()])
}).strict();
export const SessionUncheckedCreateWithoutUserInputObjectZodSchema = z.object({
  id: z.string().optional(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  token: z.string(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()])
}).strict();


// File: SessionCreateOrConnectWithoutUserInput.schema.ts

export const SessionCreateOrConnectWithoutUserInputObjectSchema: z.ZodType<Prisma.SessionCreateOrConnectWithoutUserInput, Prisma.SessionCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => SessionCreateWithoutUserInputObjectSchema), z.lazy(() => SessionUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();
export const SessionCreateOrConnectWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => SessionWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => SessionCreateWithoutUserInputObjectSchema), z.lazy(() => SessionUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();


// File: SessionCreateManyUserInputEnvelope.schema.ts

export const SessionCreateManyUserInputEnvelopeObjectSchema: z.ZodType<Prisma.SessionCreateManyUserInputEnvelope, Prisma.SessionCreateManyUserInputEnvelope> = z.object({
  data: z.union([z.lazy(() => SessionCreateManyUserInputObjectSchema), z.lazy(() => SessionCreateManyUserInputObjectSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
export const SessionCreateManyUserInputEnvelopeObjectZodSchema = z.object({
  data: z.union([z.lazy(() => SessionCreateManyUserInputObjectSchema), z.lazy(() => SessionCreateManyUserInputObjectSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();


// File: AccountCreateWithoutUserInput.schema.ts


export const AccountCreateWithoutUserInputObjectSchema: z.ZodType<Prisma.AccountCreateWithoutUserInput, Prisma.AccountCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  expiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  password: z.string().optional().nullable(),
  accessTokenExpiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  scope: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()])
}).strict();
export const AccountCreateWithoutUserInputObjectZodSchema = z.object({
  id: z.string().optional(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  expiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  password: z.string().optional().nullable(),
  accessTokenExpiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  scope: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()])
}).strict();


// File: AccountUncheckedCreateWithoutUserInput.schema.ts


export const AccountUncheckedCreateWithoutUserInputObjectSchema: z.ZodType<Prisma.AccountUncheckedCreateWithoutUserInput, Prisma.AccountUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  expiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  password: z.string().optional().nullable(),
  accessTokenExpiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  scope: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()])
}).strict();
export const AccountUncheckedCreateWithoutUserInputObjectZodSchema = z.object({
  id: z.string().optional(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  expiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  password: z.string().optional().nullable(),
  accessTokenExpiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  scope: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()])
}).strict();


// File: AccountCreateOrConnectWithoutUserInput.schema.ts

export const AccountCreateOrConnectWithoutUserInputObjectSchema: z.ZodType<Prisma.AccountCreateOrConnectWithoutUserInput, Prisma.AccountCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => AccountCreateWithoutUserInputObjectSchema), z.lazy(() => AccountUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();
export const AccountCreateOrConnectWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => AccountWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => AccountCreateWithoutUserInputObjectSchema), z.lazy(() => AccountUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();


// File: AccountCreateManyUserInputEnvelope.schema.ts

export const AccountCreateManyUserInputEnvelopeObjectSchema: z.ZodType<Prisma.AccountCreateManyUserInputEnvelope, Prisma.AccountCreateManyUserInputEnvelope> = z.object({
  data: z.union([z.lazy(() => AccountCreateManyUserInputObjectSchema), z.lazy(() => AccountCreateManyUserInputObjectSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
export const AccountCreateManyUserInputEnvelopeObjectZodSchema = z.object({
  data: z.union([z.lazy(() => AccountCreateManyUserInputObjectSchema), z.lazy(() => AccountCreateManyUserInputObjectSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();


// File: PasskeyCreateWithoutUserInput.schema.ts


export const PasskeyCreateWithoutUserInputObjectSchema: z.ZodType<Prisma.PasskeyCreateWithoutUserInput, Prisma.PasskeyCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  publicKey: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional().nullable()
}).strict();
export const PasskeyCreateWithoutUserInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  publicKey: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional().nullable()
}).strict();


// File: PasskeyUncheckedCreateWithoutUserInput.schema.ts


export const PasskeyUncheckedCreateWithoutUserInputObjectSchema: z.ZodType<Prisma.PasskeyUncheckedCreateWithoutUserInput, Prisma.PasskeyUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  publicKey: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional().nullable()
}).strict();
export const PasskeyUncheckedCreateWithoutUserInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  publicKey: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional().nullable()
}).strict();


// File: PasskeyCreateOrConnectWithoutUserInput.schema.ts

export const PasskeyCreateOrConnectWithoutUserInputObjectSchema: z.ZodType<Prisma.PasskeyCreateOrConnectWithoutUserInput, Prisma.PasskeyCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => PasskeyWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => PasskeyCreateWithoutUserInputObjectSchema), z.lazy(() => PasskeyUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();
export const PasskeyCreateOrConnectWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => PasskeyWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => PasskeyCreateWithoutUserInputObjectSchema), z.lazy(() => PasskeyUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();


// File: PasskeyCreateManyUserInputEnvelope.schema.ts

export const PasskeyCreateManyUserInputEnvelopeObjectSchema: z.ZodType<Prisma.PasskeyCreateManyUserInputEnvelope, Prisma.PasskeyCreateManyUserInputEnvelope> = z.object({
  data: z.union([z.lazy(() => PasskeyCreateManyUserInputObjectSchema), z.lazy(() => PasskeyCreateManyUserInputObjectSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
export const PasskeyCreateManyUserInputEnvelopeObjectZodSchema = z.object({
  data: z.union([z.lazy(() => PasskeyCreateManyUserInputObjectSchema), z.lazy(() => PasskeyCreateManyUserInputObjectSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();


// File: InvitationCreateWithoutUserInput.schema.ts

export const InvitationCreateWithoutUserInputObjectSchema: z.ZodType<Prisma.InvitationCreateWithoutUserInput, Prisma.InvitationCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutInvitationsInputObjectSchema)
}).strict();
export const InvitationCreateWithoutUserInputObjectZodSchema = z.object({
  id: z.string().optional(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutInvitationsInputObjectSchema)
}).strict();


// File: InvitationUncheckedCreateWithoutUserInput.schema.ts


export const InvitationUncheckedCreateWithoutUserInputObjectSchema: z.ZodType<Prisma.InvitationUncheckedCreateWithoutUserInput, Prisma.InvitationUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  organizationId: z.string(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.union([z.date(), z.iso.datetime()])
}).strict();
export const InvitationUncheckedCreateWithoutUserInputObjectZodSchema = z.object({
  id: z.string().optional(),
  organizationId: z.string(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.union([z.date(), z.iso.datetime()])
}).strict();


// File: InvitationCreateOrConnectWithoutUserInput.schema.ts

export const InvitationCreateOrConnectWithoutUserInputObjectSchema: z.ZodType<Prisma.InvitationCreateOrConnectWithoutUserInput, Prisma.InvitationCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => InvitationCreateWithoutUserInputObjectSchema), z.lazy(() => InvitationUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();
export const InvitationCreateOrConnectWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => InvitationCreateWithoutUserInputObjectSchema), z.lazy(() => InvitationUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();


// File: InvitationCreateManyUserInputEnvelope.schema.ts

export const InvitationCreateManyUserInputEnvelopeObjectSchema: z.ZodType<Prisma.InvitationCreateManyUserInputEnvelope, Prisma.InvitationCreateManyUserInputEnvelope> = z.object({
  data: z.union([z.lazy(() => InvitationCreateManyUserInputObjectSchema), z.lazy(() => InvitationCreateManyUserInputObjectSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
export const InvitationCreateManyUserInputEnvelopeObjectZodSchema = z.object({
  data: z.union([z.lazy(() => InvitationCreateManyUserInputObjectSchema), z.lazy(() => InvitationCreateManyUserInputObjectSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();


// File: PurchaseCreateWithoutUserInput.schema.ts

export const PurchaseCreateWithoutUserInputObjectSchema: z.ZodType<Prisma.PurchaseCreateWithoutUserInput, Prisma.PurchaseCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  type: PurchaseTypeSchema,
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutPurchasesInputObjectSchema).optional()
}).strict();
export const PurchaseCreateWithoutUserInputObjectZodSchema = z.object({
  id: z.string().optional(),
  type: PurchaseTypeSchema,
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutPurchasesInputObjectSchema).optional()
}).strict();


// File: PurchaseUncheckedCreateWithoutUserInput.schema.ts

export const PurchaseUncheckedCreateWithoutUserInputObjectSchema: z.ZodType<Prisma.PurchaseUncheckedCreateWithoutUserInput, Prisma.PurchaseUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  organizationId: z.string().optional().nullable(),
  type: PurchaseTypeSchema,
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional()
}).strict();
export const PurchaseUncheckedCreateWithoutUserInputObjectZodSchema = z.object({
  id: z.string().optional(),
  organizationId: z.string().optional().nullable(),
  type: PurchaseTypeSchema,
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional()
}).strict();


// File: PurchaseCreateOrConnectWithoutUserInput.schema.ts

export const PurchaseCreateOrConnectWithoutUserInputObjectSchema: z.ZodType<Prisma.PurchaseCreateOrConnectWithoutUserInput, Prisma.PurchaseCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => PurchaseWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => PurchaseCreateWithoutUserInputObjectSchema), z.lazy(() => PurchaseUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();
export const PurchaseCreateOrConnectWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => PurchaseWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => PurchaseCreateWithoutUserInputObjectSchema), z.lazy(() => PurchaseUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();


// File: PurchaseCreateManyUserInputEnvelope.schema.ts

export const PurchaseCreateManyUserInputEnvelopeObjectSchema: z.ZodType<Prisma.PurchaseCreateManyUserInputEnvelope, Prisma.PurchaseCreateManyUserInputEnvelope> = z.object({
  data: z.union([z.lazy(() => PurchaseCreateManyUserInputObjectSchema), z.lazy(() => PurchaseCreateManyUserInputObjectSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
export const PurchaseCreateManyUserInputEnvelopeObjectZodSchema = z.object({
  data: z.union([z.lazy(() => PurchaseCreateManyUserInputObjectSchema), z.lazy(() => PurchaseCreateManyUserInputObjectSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();


// File: MemberCreateWithoutUserInput.schema.ts

export const MemberCreateWithoutUserInputObjectSchema: z.ZodType<Prisma.MemberCreateWithoutUserInput, Prisma.MemberCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  role: z.string(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutMembersInputObjectSchema)
}).strict();
export const MemberCreateWithoutUserInputObjectZodSchema = z.object({
  id: z.string().optional(),
  role: z.string(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutMembersInputObjectSchema)
}).strict();


// File: MemberUncheckedCreateWithoutUserInput.schema.ts


export const MemberUncheckedCreateWithoutUserInputObjectSchema: z.ZodType<Prisma.MemberUncheckedCreateWithoutUserInput, Prisma.MemberUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  organizationId: z.string(),
  role: z.string(),
  createdAt: z.union([z.date(), z.iso.datetime()])
}).strict();
export const MemberUncheckedCreateWithoutUserInputObjectZodSchema = z.object({
  id: z.string().optional(),
  organizationId: z.string(),
  role: z.string(),
  createdAt: z.union([z.date(), z.iso.datetime()])
}).strict();


// File: MemberCreateOrConnectWithoutUserInput.schema.ts

export const MemberCreateOrConnectWithoutUserInputObjectSchema: z.ZodType<Prisma.MemberCreateOrConnectWithoutUserInput, Prisma.MemberCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => MemberCreateWithoutUserInputObjectSchema), z.lazy(() => MemberUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();
export const MemberCreateOrConnectWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => MemberWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => MemberCreateWithoutUserInputObjectSchema), z.lazy(() => MemberUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();


// File: MemberCreateManyUserInputEnvelope.schema.ts

export const MemberCreateManyUserInputEnvelopeObjectSchema: z.ZodType<Prisma.MemberCreateManyUserInputEnvelope, Prisma.MemberCreateManyUserInputEnvelope> = z.object({
  data: z.union([z.lazy(() => MemberCreateManyUserInputObjectSchema), z.lazy(() => MemberCreateManyUserInputObjectSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
export const MemberCreateManyUserInputEnvelopeObjectZodSchema = z.object({
  data: z.union([z.lazy(() => MemberCreateManyUserInputObjectSchema), z.lazy(() => MemberCreateManyUserInputObjectSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();


// File: TwoFactorCreateWithoutUserInput.schema.ts


export const TwoFactorCreateWithoutUserInputObjectSchema: z.ZodType<Prisma.TwoFactorCreateWithoutUserInput, Prisma.TwoFactorCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  secret: z.string(),
  backupCodes: z.string()
}).strict();
export const TwoFactorCreateWithoutUserInputObjectZodSchema = z.object({
  id: z.string().optional(),
  secret: z.string(),
  backupCodes: z.string()
}).strict();


// File: TwoFactorUncheckedCreateWithoutUserInput.schema.ts


export const TwoFactorUncheckedCreateWithoutUserInputObjectSchema: z.ZodType<Prisma.TwoFactorUncheckedCreateWithoutUserInput, Prisma.TwoFactorUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  secret: z.string(),
  backupCodes: z.string()
}).strict();
export const TwoFactorUncheckedCreateWithoutUserInputObjectZodSchema = z.object({
  id: z.string().optional(),
  secret: z.string(),
  backupCodes: z.string()
}).strict();


// File: TwoFactorCreateOrConnectWithoutUserInput.schema.ts

export const TwoFactorCreateOrConnectWithoutUserInputObjectSchema: z.ZodType<Prisma.TwoFactorCreateOrConnectWithoutUserInput, Prisma.TwoFactorCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => TwoFactorWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => TwoFactorCreateWithoutUserInputObjectSchema), z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();
export const TwoFactorCreateOrConnectWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => TwoFactorWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => TwoFactorCreateWithoutUserInputObjectSchema), z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();


// File: TwoFactorCreateManyUserInputEnvelope.schema.ts

export const TwoFactorCreateManyUserInputEnvelopeObjectSchema: z.ZodType<Prisma.TwoFactorCreateManyUserInputEnvelope, Prisma.TwoFactorCreateManyUserInputEnvelope> = z.object({
  data: z.union([z.lazy(() => TwoFactorCreateManyUserInputObjectSchema), z.lazy(() => TwoFactorCreateManyUserInputObjectSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
export const TwoFactorCreateManyUserInputEnvelopeObjectZodSchema = z.object({
  data: z.union([z.lazy(() => TwoFactorCreateManyUserInputObjectSchema), z.lazy(() => TwoFactorCreateManyUserInputObjectSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();


// File: AiChatCreateWithoutUserInput.schema.ts


const literalSchema = z.union([z.string(), z.number(), z.boolean()]);
const jsonSchema = z.lazy(() =>
  z.union([literalSchema, z.array(jsonSchema.nullable()), z.record(z.string(), jsonSchema.nullable())])
);

export const AiChatCreateWithoutUserInputObjectSchema: z.ZodType<Prisma.AiChatCreateWithoutUserInput, Prisma.AiChatCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  title: z.string().optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutAiChatsInputObjectSchema).optional()
}).strict();
export const AiChatCreateWithoutUserInputObjectZodSchema = z.object({
  id: z.string().optional(),
  title: z.string().optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutAiChatsInputObjectSchema).optional()
}).strict();


// File: AiChatUncheckedCreateWithoutUserInput.schema.ts


const literalSchema = z.union([z.string(), z.number(), z.boolean()]);
const jsonSchema = z.lazy(() =>
  z.union([literalSchema, z.array(jsonSchema.nullable()), z.record(z.string(), jsonSchema.nullable())])
);

export const AiChatUncheckedCreateWithoutUserInputObjectSchema: z.ZodType<Prisma.AiChatUncheckedCreateWithoutUserInput, Prisma.AiChatUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  organizationId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional()
}).strict();
export const AiChatUncheckedCreateWithoutUserInputObjectZodSchema = z.object({
  id: z.string().optional(),
  organizationId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional()
}).strict();


// File: AiChatCreateOrConnectWithoutUserInput.schema.ts

export const AiChatCreateOrConnectWithoutUserInputObjectSchema: z.ZodType<Prisma.AiChatCreateOrConnectWithoutUserInput, Prisma.AiChatCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => AiChatWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => AiChatCreateWithoutUserInputObjectSchema), z.lazy(() => AiChatUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();
export const AiChatCreateOrConnectWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => AiChatWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => AiChatCreateWithoutUserInputObjectSchema), z.lazy(() => AiChatUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();


// File: AiChatCreateManyUserInputEnvelope.schema.ts

export const AiChatCreateManyUserInputEnvelopeObjectSchema: z.ZodType<Prisma.AiChatCreateManyUserInputEnvelope, Prisma.AiChatCreateManyUserInputEnvelope> = z.object({
  data: z.union([z.lazy(() => AiChatCreateManyUserInputObjectSchema), z.lazy(() => AiChatCreateManyUserInputObjectSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
export const AiChatCreateManyUserInputEnvelopeObjectZodSchema = z.object({
  data: z.union([z.lazy(() => AiChatCreateManyUserInputObjectSchema), z.lazy(() => AiChatCreateManyUserInputObjectSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();


// File: SessionUpsertWithWhereUniqueWithoutUserInput.schema.ts

export const SessionUpsertWithWhereUniqueWithoutUserInputObjectSchema: z.ZodType<Prisma.SessionUpsertWithWhereUniqueWithoutUserInput, Prisma.SessionUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputObjectSchema),
  update: z.union([z.lazy(() => SessionUpdateWithoutUserInputObjectSchema), z.lazy(() => SessionUncheckedUpdateWithoutUserInputObjectSchema)]),
  create: z.union([z.lazy(() => SessionCreateWithoutUserInputObjectSchema), z.lazy(() => SessionUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();
export const SessionUpsertWithWhereUniqueWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => SessionWhereUniqueInputObjectSchema),
  update: z.union([z.lazy(() => SessionUpdateWithoutUserInputObjectSchema), z.lazy(() => SessionUncheckedUpdateWithoutUserInputObjectSchema)]),
  create: z.union([z.lazy(() => SessionCreateWithoutUserInputObjectSchema), z.lazy(() => SessionUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();


// File: SessionUpdateWithWhereUniqueWithoutUserInput.schema.ts

export const SessionUpdateWithWhereUniqueWithoutUserInputObjectSchema: z.ZodType<Prisma.SessionUpdateWithWhereUniqueWithoutUserInput, Prisma.SessionUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputObjectSchema),
  data: z.union([z.lazy(() => SessionUpdateWithoutUserInputObjectSchema), z.lazy(() => SessionUncheckedUpdateWithoutUserInputObjectSchema)])
}).strict();
export const SessionUpdateWithWhereUniqueWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => SessionWhereUniqueInputObjectSchema),
  data: z.union([z.lazy(() => SessionUpdateWithoutUserInputObjectSchema), z.lazy(() => SessionUncheckedUpdateWithoutUserInputObjectSchema)])
}).strict();


// File: SessionUpdateManyWithWhereWithoutUserInput.schema.ts

export const SessionUpdateManyWithWhereWithoutUserInputObjectSchema: z.ZodType<Prisma.SessionUpdateManyWithWhereWithoutUserInput, Prisma.SessionUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => SessionScalarWhereInputObjectSchema),
  data: z.union([z.lazy(() => SessionUpdateManyMutationInputObjectSchema), z.lazy(() => SessionUncheckedUpdateManyWithoutUserInputObjectSchema)])
}).strict();
export const SessionUpdateManyWithWhereWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => SessionScalarWhereInputObjectSchema),
  data: z.union([z.lazy(() => SessionUpdateManyMutationInputObjectSchema), z.lazy(() => SessionUncheckedUpdateManyWithoutUserInputObjectSchema)])
}).strict();


// File: SessionScalarWhereInput.schema.ts

export const SessionScalarWhereInputObjectSchema: z.ZodType<Prisma.SessionScalarWhereInput, Prisma.SessionScalarWhereInput> = z.object({
  AND: z.union([z.lazy(() => SessionScalarWhereInputObjectSchema), z.lazy(() => SessionScalarWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => SessionScalarWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => SessionScalarWhereInputObjectSchema), z.lazy(() => SessionScalarWhereInputObjectSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  expiresAt: z.union([z.lazy(() => DateTimeFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional(),
  ipAddress: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  userAgent: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  userId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  impersonatedBy: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  activeOrganizationId: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  token: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional()
}).strict();
export const SessionScalarWhereInputObjectZodSchema = z.object({
  AND: z.union([z.lazy(() => SessionScalarWhereInputObjectSchema), z.lazy(() => SessionScalarWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => SessionScalarWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => SessionScalarWhereInputObjectSchema), z.lazy(() => SessionScalarWhereInputObjectSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  expiresAt: z.union([z.lazy(() => DateTimeFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional(),
  ipAddress: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  userAgent: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  userId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  impersonatedBy: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  activeOrganizationId: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  token: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional()
}).strict();


// File: AccountUpsertWithWhereUniqueWithoutUserInput.schema.ts

export const AccountUpsertWithWhereUniqueWithoutUserInputObjectSchema: z.ZodType<Prisma.AccountUpsertWithWhereUniqueWithoutUserInput, Prisma.AccountUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputObjectSchema),
  update: z.union([z.lazy(() => AccountUpdateWithoutUserInputObjectSchema), z.lazy(() => AccountUncheckedUpdateWithoutUserInputObjectSchema)]),
  create: z.union([z.lazy(() => AccountCreateWithoutUserInputObjectSchema), z.lazy(() => AccountUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();
export const AccountUpsertWithWhereUniqueWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => AccountWhereUniqueInputObjectSchema),
  update: z.union([z.lazy(() => AccountUpdateWithoutUserInputObjectSchema), z.lazy(() => AccountUncheckedUpdateWithoutUserInputObjectSchema)]),
  create: z.union([z.lazy(() => AccountCreateWithoutUserInputObjectSchema), z.lazy(() => AccountUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();


// File: AccountUpdateWithWhereUniqueWithoutUserInput.schema.ts

export const AccountUpdateWithWhereUniqueWithoutUserInputObjectSchema: z.ZodType<Prisma.AccountUpdateWithWhereUniqueWithoutUserInput, Prisma.AccountUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputObjectSchema),
  data: z.union([z.lazy(() => AccountUpdateWithoutUserInputObjectSchema), z.lazy(() => AccountUncheckedUpdateWithoutUserInputObjectSchema)])
}).strict();
export const AccountUpdateWithWhereUniqueWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => AccountWhereUniqueInputObjectSchema),
  data: z.union([z.lazy(() => AccountUpdateWithoutUserInputObjectSchema), z.lazy(() => AccountUncheckedUpdateWithoutUserInputObjectSchema)])
}).strict();


// File: AccountUpdateManyWithWhereWithoutUserInput.schema.ts

export const AccountUpdateManyWithWhereWithoutUserInputObjectSchema: z.ZodType<Prisma.AccountUpdateManyWithWhereWithoutUserInput, Prisma.AccountUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => AccountScalarWhereInputObjectSchema),
  data: z.union([z.lazy(() => AccountUpdateManyMutationInputObjectSchema), z.lazy(() => AccountUncheckedUpdateManyWithoutUserInputObjectSchema)])
}).strict();
export const AccountUpdateManyWithWhereWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => AccountScalarWhereInputObjectSchema),
  data: z.union([z.lazy(() => AccountUpdateManyMutationInputObjectSchema), z.lazy(() => AccountUncheckedUpdateManyWithoutUserInputObjectSchema)])
}).strict();


// File: AccountScalarWhereInput.schema.ts

export const AccountScalarWhereInputObjectSchema: z.ZodType<Prisma.AccountScalarWhereInput, Prisma.AccountScalarWhereInput> = z.object({
  AND: z.union([z.lazy(() => AccountScalarWhereInputObjectSchema), z.lazy(() => AccountScalarWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => AccountScalarWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => AccountScalarWhereInputObjectSchema), z.lazy(() => AccountScalarWhereInputObjectSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  accountId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  providerId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  accessToken: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  refreshToken: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  idToken: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  expiresAt: z.union([z.lazy(() => DateTimeNullableFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional().nullable(),
  password: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.lazy(() => DateTimeNullableFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.lazy(() => DateTimeNullableFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional().nullable(),
  scope: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional()
}).strict();
export const AccountScalarWhereInputObjectZodSchema = z.object({
  AND: z.union([z.lazy(() => AccountScalarWhereInputObjectSchema), z.lazy(() => AccountScalarWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => AccountScalarWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => AccountScalarWhereInputObjectSchema), z.lazy(() => AccountScalarWhereInputObjectSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  accountId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  providerId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  accessToken: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  refreshToken: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  idToken: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  expiresAt: z.union([z.lazy(() => DateTimeNullableFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional().nullable(),
  password: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.lazy(() => DateTimeNullableFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.lazy(() => DateTimeNullableFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional().nullable(),
  scope: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional()
}).strict();


// File: PasskeyUpsertWithWhereUniqueWithoutUserInput.schema.ts

export const PasskeyUpsertWithWhereUniqueWithoutUserInputObjectSchema: z.ZodType<Prisma.PasskeyUpsertWithWhereUniqueWithoutUserInput, Prisma.PasskeyUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => PasskeyWhereUniqueInputObjectSchema),
  update: z.union([z.lazy(() => PasskeyUpdateWithoutUserInputObjectSchema), z.lazy(() => PasskeyUncheckedUpdateWithoutUserInputObjectSchema)]),
  create: z.union([z.lazy(() => PasskeyCreateWithoutUserInputObjectSchema), z.lazy(() => PasskeyUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();
export const PasskeyUpsertWithWhereUniqueWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => PasskeyWhereUniqueInputObjectSchema),
  update: z.union([z.lazy(() => PasskeyUpdateWithoutUserInputObjectSchema), z.lazy(() => PasskeyUncheckedUpdateWithoutUserInputObjectSchema)]),
  create: z.union([z.lazy(() => PasskeyCreateWithoutUserInputObjectSchema), z.lazy(() => PasskeyUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();


// File: PasskeyUpdateWithWhereUniqueWithoutUserInput.schema.ts

export const PasskeyUpdateWithWhereUniqueWithoutUserInputObjectSchema: z.ZodType<Prisma.PasskeyUpdateWithWhereUniqueWithoutUserInput, Prisma.PasskeyUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => PasskeyWhereUniqueInputObjectSchema),
  data: z.union([z.lazy(() => PasskeyUpdateWithoutUserInputObjectSchema), z.lazy(() => PasskeyUncheckedUpdateWithoutUserInputObjectSchema)])
}).strict();
export const PasskeyUpdateWithWhereUniqueWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => PasskeyWhereUniqueInputObjectSchema),
  data: z.union([z.lazy(() => PasskeyUpdateWithoutUserInputObjectSchema), z.lazy(() => PasskeyUncheckedUpdateWithoutUserInputObjectSchema)])
}).strict();


// File: PasskeyUpdateManyWithWhereWithoutUserInput.schema.ts

export const PasskeyUpdateManyWithWhereWithoutUserInputObjectSchema: z.ZodType<Prisma.PasskeyUpdateManyWithWhereWithoutUserInput, Prisma.PasskeyUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => PasskeyScalarWhereInputObjectSchema),
  data: z.union([z.lazy(() => PasskeyUpdateManyMutationInputObjectSchema), z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserInputObjectSchema)])
}).strict();
export const PasskeyUpdateManyWithWhereWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => PasskeyScalarWhereInputObjectSchema),
  data: z.union([z.lazy(() => PasskeyUpdateManyMutationInputObjectSchema), z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserInputObjectSchema)])
}).strict();


// File: PasskeyScalarWhereInput.schema.ts

export const PasskeyScalarWhereInputObjectSchema: z.ZodType<Prisma.PasskeyScalarWhereInput, Prisma.PasskeyScalarWhereInput> = z.object({
  AND: z.union([z.lazy(() => PasskeyScalarWhereInputObjectSchema), z.lazy(() => PasskeyScalarWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => PasskeyScalarWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => PasskeyScalarWhereInputObjectSchema), z.lazy(() => PasskeyScalarWhereInputObjectSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  name: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  publicKey: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  credentialID: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  counter: z.union([z.lazy(() => IntFilterObjectSchema), z.number().int()]).optional(),
  deviceType: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  backedUp: z.union([z.lazy(() => BoolFilterObjectSchema), z.boolean()]).optional(),
  transports: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeNullableFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional().nullable()
}).strict();
export const PasskeyScalarWhereInputObjectZodSchema = z.object({
  AND: z.union([z.lazy(() => PasskeyScalarWhereInputObjectSchema), z.lazy(() => PasskeyScalarWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => PasskeyScalarWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => PasskeyScalarWhereInputObjectSchema), z.lazy(() => PasskeyScalarWhereInputObjectSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  name: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  publicKey: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  credentialID: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  counter: z.union([z.lazy(() => IntFilterObjectSchema), z.number().int()]).optional(),
  deviceType: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  backedUp: z.union([z.lazy(() => BoolFilterObjectSchema), z.boolean()]).optional(),
  transports: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeNullableFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional().nullable()
}).strict();


// File: InvitationUpsertWithWhereUniqueWithoutUserInput.schema.ts

export const InvitationUpsertWithWhereUniqueWithoutUserInputObjectSchema: z.ZodType<Prisma.InvitationUpsertWithWhereUniqueWithoutUserInput, Prisma.InvitationUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputObjectSchema),
  update: z.union([z.lazy(() => InvitationUpdateWithoutUserInputObjectSchema), z.lazy(() => InvitationUncheckedUpdateWithoutUserInputObjectSchema)]),
  create: z.union([z.lazy(() => InvitationCreateWithoutUserInputObjectSchema), z.lazy(() => InvitationUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();
export const InvitationUpsertWithWhereUniqueWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputObjectSchema),
  update: z.union([z.lazy(() => InvitationUpdateWithoutUserInputObjectSchema), z.lazy(() => InvitationUncheckedUpdateWithoutUserInputObjectSchema)]),
  create: z.union([z.lazy(() => InvitationCreateWithoutUserInputObjectSchema), z.lazy(() => InvitationUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();


// File: InvitationUpdateWithWhereUniqueWithoutUserInput.schema.ts

export const InvitationUpdateWithWhereUniqueWithoutUserInputObjectSchema: z.ZodType<Prisma.InvitationUpdateWithWhereUniqueWithoutUserInput, Prisma.InvitationUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputObjectSchema),
  data: z.union([z.lazy(() => InvitationUpdateWithoutUserInputObjectSchema), z.lazy(() => InvitationUncheckedUpdateWithoutUserInputObjectSchema)])
}).strict();
export const InvitationUpdateWithWhereUniqueWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputObjectSchema),
  data: z.union([z.lazy(() => InvitationUpdateWithoutUserInputObjectSchema), z.lazy(() => InvitationUncheckedUpdateWithoutUserInputObjectSchema)])
}).strict();


// File: InvitationUpdateManyWithWhereWithoutUserInput.schema.ts

export const InvitationUpdateManyWithWhereWithoutUserInputObjectSchema: z.ZodType<Prisma.InvitationUpdateManyWithWhereWithoutUserInput, Prisma.InvitationUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => InvitationScalarWhereInputObjectSchema),
  data: z.union([z.lazy(() => InvitationUpdateManyMutationInputObjectSchema), z.lazy(() => InvitationUncheckedUpdateManyWithoutUserInputObjectSchema)])
}).strict();
export const InvitationUpdateManyWithWhereWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => InvitationScalarWhereInputObjectSchema),
  data: z.union([z.lazy(() => InvitationUpdateManyMutationInputObjectSchema), z.lazy(() => InvitationUncheckedUpdateManyWithoutUserInputObjectSchema)])
}).strict();


// File: InvitationScalarWhereInput.schema.ts

export const InvitationScalarWhereInputObjectSchema: z.ZodType<Prisma.InvitationScalarWhereInput, Prisma.InvitationScalarWhereInput> = z.object({
  AND: z.union([z.lazy(() => InvitationScalarWhereInputObjectSchema), z.lazy(() => InvitationScalarWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => InvitationScalarWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => InvitationScalarWhereInputObjectSchema), z.lazy(() => InvitationScalarWhereInputObjectSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  organizationId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  email: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  role: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  status: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  expiresAt: z.union([z.lazy(() => DateTimeFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional(),
  inviterId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional()
}).strict();
export const InvitationScalarWhereInputObjectZodSchema = z.object({
  AND: z.union([z.lazy(() => InvitationScalarWhereInputObjectSchema), z.lazy(() => InvitationScalarWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => InvitationScalarWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => InvitationScalarWhereInputObjectSchema), z.lazy(() => InvitationScalarWhereInputObjectSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  organizationId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  email: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  role: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  status: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  expiresAt: z.union([z.lazy(() => DateTimeFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional(),
  inviterId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional()
}).strict();


// File: PurchaseUpsertWithWhereUniqueWithoutUserInput.schema.ts

export const PurchaseUpsertWithWhereUniqueWithoutUserInputObjectSchema: z.ZodType<Prisma.PurchaseUpsertWithWhereUniqueWithoutUserInput, Prisma.PurchaseUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => PurchaseWhereUniqueInputObjectSchema),
  update: z.union([z.lazy(() => PurchaseUpdateWithoutUserInputObjectSchema), z.lazy(() => PurchaseUncheckedUpdateWithoutUserInputObjectSchema)]),
  create: z.union([z.lazy(() => PurchaseCreateWithoutUserInputObjectSchema), z.lazy(() => PurchaseUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();
export const PurchaseUpsertWithWhereUniqueWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => PurchaseWhereUniqueInputObjectSchema),
  update: z.union([z.lazy(() => PurchaseUpdateWithoutUserInputObjectSchema), z.lazy(() => PurchaseUncheckedUpdateWithoutUserInputObjectSchema)]),
  create: z.union([z.lazy(() => PurchaseCreateWithoutUserInputObjectSchema), z.lazy(() => PurchaseUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();


// File: PurchaseUpdateWithWhereUniqueWithoutUserInput.schema.ts

export const PurchaseUpdateWithWhereUniqueWithoutUserInputObjectSchema: z.ZodType<Prisma.PurchaseUpdateWithWhereUniqueWithoutUserInput, Prisma.PurchaseUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => PurchaseWhereUniqueInputObjectSchema),
  data: z.union([z.lazy(() => PurchaseUpdateWithoutUserInputObjectSchema), z.lazy(() => PurchaseUncheckedUpdateWithoutUserInputObjectSchema)])
}).strict();
export const PurchaseUpdateWithWhereUniqueWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => PurchaseWhereUniqueInputObjectSchema),
  data: z.union([z.lazy(() => PurchaseUpdateWithoutUserInputObjectSchema), z.lazy(() => PurchaseUncheckedUpdateWithoutUserInputObjectSchema)])
}).strict();


// File: PurchaseUpdateManyWithWhereWithoutUserInput.schema.ts

export const PurchaseUpdateManyWithWhereWithoutUserInputObjectSchema: z.ZodType<Prisma.PurchaseUpdateManyWithWhereWithoutUserInput, Prisma.PurchaseUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => PurchaseScalarWhereInputObjectSchema),
  data: z.union([z.lazy(() => PurchaseUpdateManyMutationInputObjectSchema), z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserInputObjectSchema)])
}).strict();
export const PurchaseUpdateManyWithWhereWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => PurchaseScalarWhereInputObjectSchema),
  data: z.union([z.lazy(() => PurchaseUpdateManyMutationInputObjectSchema), z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserInputObjectSchema)])
}).strict();


// File: PurchaseScalarWhereInput.schema.ts

export const PurchaseScalarWhereInputObjectSchema: z.ZodType<Prisma.PurchaseScalarWhereInput, Prisma.PurchaseScalarWhereInput> = z.object({
  AND: z.union([z.lazy(() => PurchaseScalarWhereInputObjectSchema), z.lazy(() => PurchaseScalarWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => PurchaseScalarWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => PurchaseScalarWhereInputObjectSchema), z.lazy(() => PurchaseScalarWhereInputObjectSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  organizationId: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  userId: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  type: z.union([z.lazy(() => EnumPurchaseTypeFilterObjectSchema), PurchaseTypeSchema]).optional(),
  customerId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  subscriptionId: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  productId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  status: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional()
}).strict();
export const PurchaseScalarWhereInputObjectZodSchema = z.object({
  AND: z.union([z.lazy(() => PurchaseScalarWhereInputObjectSchema), z.lazy(() => PurchaseScalarWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => PurchaseScalarWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => PurchaseScalarWhereInputObjectSchema), z.lazy(() => PurchaseScalarWhereInputObjectSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  organizationId: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  userId: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  type: z.union([z.lazy(() => EnumPurchaseTypeFilterObjectSchema), PurchaseTypeSchema]).optional(),
  customerId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  subscriptionId: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  productId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  status: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  createdAt: z.union([z.lazy(() => DateTimeFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional()
}).strict();


// File: MemberUpsertWithWhereUniqueWithoutUserInput.schema.ts

export const MemberUpsertWithWhereUniqueWithoutUserInputObjectSchema: z.ZodType<Prisma.MemberUpsertWithWhereUniqueWithoutUserInput, Prisma.MemberUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputObjectSchema),
  update: z.union([z.lazy(() => MemberUpdateWithoutUserInputObjectSchema), z.lazy(() => MemberUncheckedUpdateWithoutUserInputObjectSchema)]),
  create: z.union([z.lazy(() => MemberCreateWithoutUserInputObjectSchema), z.lazy(() => MemberUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();
export const MemberUpsertWithWhereUniqueWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => MemberWhereUniqueInputObjectSchema),
  update: z.union([z.lazy(() => MemberUpdateWithoutUserInputObjectSchema), z.lazy(() => MemberUncheckedUpdateWithoutUserInputObjectSchema)]),
  create: z.union([z.lazy(() => MemberCreateWithoutUserInputObjectSchema), z.lazy(() => MemberUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();


// File: MemberUpdateWithWhereUniqueWithoutUserInput.schema.ts

export const MemberUpdateWithWhereUniqueWithoutUserInputObjectSchema: z.ZodType<Prisma.MemberUpdateWithWhereUniqueWithoutUserInput, Prisma.MemberUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputObjectSchema),
  data: z.union([z.lazy(() => MemberUpdateWithoutUserInputObjectSchema), z.lazy(() => MemberUncheckedUpdateWithoutUserInputObjectSchema)])
}).strict();
export const MemberUpdateWithWhereUniqueWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => MemberWhereUniqueInputObjectSchema),
  data: z.union([z.lazy(() => MemberUpdateWithoutUserInputObjectSchema), z.lazy(() => MemberUncheckedUpdateWithoutUserInputObjectSchema)])
}).strict();


// File: MemberUpdateManyWithWhereWithoutUserInput.schema.ts

export const MemberUpdateManyWithWhereWithoutUserInputObjectSchema: z.ZodType<Prisma.MemberUpdateManyWithWhereWithoutUserInput, Prisma.MemberUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => MemberScalarWhereInputObjectSchema),
  data: z.union([z.lazy(() => MemberUpdateManyMutationInputObjectSchema), z.lazy(() => MemberUncheckedUpdateManyWithoutUserInputObjectSchema)])
}).strict();
export const MemberUpdateManyWithWhereWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => MemberScalarWhereInputObjectSchema),
  data: z.union([z.lazy(() => MemberUpdateManyMutationInputObjectSchema), z.lazy(() => MemberUncheckedUpdateManyWithoutUserInputObjectSchema)])
}).strict();


// File: MemberScalarWhereInput.schema.ts

export const MemberScalarWhereInputObjectSchema: z.ZodType<Prisma.MemberScalarWhereInput, Prisma.MemberScalarWhereInput> = z.object({
  AND: z.union([z.lazy(() => MemberScalarWhereInputObjectSchema), z.lazy(() => MemberScalarWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => MemberScalarWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => MemberScalarWhereInputObjectSchema), z.lazy(() => MemberScalarWhereInputObjectSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  organizationId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  role: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional()
}).strict();
export const MemberScalarWhereInputObjectZodSchema = z.object({
  AND: z.union([z.lazy(() => MemberScalarWhereInputObjectSchema), z.lazy(() => MemberScalarWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => MemberScalarWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => MemberScalarWhereInputObjectSchema), z.lazy(() => MemberScalarWhereInputObjectSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  organizationId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  role: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  createdAt: z.union([z.lazy(() => DateTimeFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional()
}).strict();


// File: TwoFactorUpsertWithWhereUniqueWithoutUserInput.schema.ts

export const TwoFactorUpsertWithWhereUniqueWithoutUserInputObjectSchema: z.ZodType<Prisma.TwoFactorUpsertWithWhereUniqueWithoutUserInput, Prisma.TwoFactorUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TwoFactorWhereUniqueInputObjectSchema),
  update: z.union([z.lazy(() => TwoFactorUpdateWithoutUserInputObjectSchema), z.lazy(() => TwoFactorUncheckedUpdateWithoutUserInputObjectSchema)]),
  create: z.union([z.lazy(() => TwoFactorCreateWithoutUserInputObjectSchema), z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();
export const TwoFactorUpsertWithWhereUniqueWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => TwoFactorWhereUniqueInputObjectSchema),
  update: z.union([z.lazy(() => TwoFactorUpdateWithoutUserInputObjectSchema), z.lazy(() => TwoFactorUncheckedUpdateWithoutUserInputObjectSchema)]),
  create: z.union([z.lazy(() => TwoFactorCreateWithoutUserInputObjectSchema), z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();


// File: TwoFactorUpdateWithWhereUniqueWithoutUserInput.schema.ts

export const TwoFactorUpdateWithWhereUniqueWithoutUserInputObjectSchema: z.ZodType<Prisma.TwoFactorUpdateWithWhereUniqueWithoutUserInput, Prisma.TwoFactorUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TwoFactorWhereUniqueInputObjectSchema),
  data: z.union([z.lazy(() => TwoFactorUpdateWithoutUserInputObjectSchema), z.lazy(() => TwoFactorUncheckedUpdateWithoutUserInputObjectSchema)])
}).strict();
export const TwoFactorUpdateWithWhereUniqueWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => TwoFactorWhereUniqueInputObjectSchema),
  data: z.union([z.lazy(() => TwoFactorUpdateWithoutUserInputObjectSchema), z.lazy(() => TwoFactorUncheckedUpdateWithoutUserInputObjectSchema)])
}).strict();


// File: TwoFactorUpdateManyWithWhereWithoutUserInput.schema.ts

export const TwoFactorUpdateManyWithWhereWithoutUserInputObjectSchema: z.ZodType<Prisma.TwoFactorUpdateManyWithWhereWithoutUserInput, Prisma.TwoFactorUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => TwoFactorScalarWhereInputObjectSchema),
  data: z.union([z.lazy(() => TwoFactorUpdateManyMutationInputObjectSchema), z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserInputObjectSchema)])
}).strict();
export const TwoFactorUpdateManyWithWhereWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => TwoFactorScalarWhereInputObjectSchema),
  data: z.union([z.lazy(() => TwoFactorUpdateManyMutationInputObjectSchema), z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserInputObjectSchema)])
}).strict();


// File: TwoFactorScalarWhereInput.schema.ts

export const TwoFactorScalarWhereInputObjectSchema: z.ZodType<Prisma.TwoFactorScalarWhereInput, Prisma.TwoFactorScalarWhereInput> = z.object({
  AND: z.union([z.lazy(() => TwoFactorScalarWhereInputObjectSchema), z.lazy(() => TwoFactorScalarWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => TwoFactorScalarWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => TwoFactorScalarWhereInputObjectSchema), z.lazy(() => TwoFactorScalarWhereInputObjectSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  secret: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  backupCodes: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional()
}).strict();
export const TwoFactorScalarWhereInputObjectZodSchema = z.object({
  AND: z.union([z.lazy(() => TwoFactorScalarWhereInputObjectSchema), z.lazy(() => TwoFactorScalarWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => TwoFactorScalarWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => TwoFactorScalarWhereInputObjectSchema), z.lazy(() => TwoFactorScalarWhereInputObjectSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  secret: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  backupCodes: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  userId: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional()
}).strict();


// File: AiChatUpsertWithWhereUniqueWithoutUserInput.schema.ts

export const AiChatUpsertWithWhereUniqueWithoutUserInputObjectSchema: z.ZodType<Prisma.AiChatUpsertWithWhereUniqueWithoutUserInput, Prisma.AiChatUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AiChatWhereUniqueInputObjectSchema),
  update: z.union([z.lazy(() => AiChatUpdateWithoutUserInputObjectSchema), z.lazy(() => AiChatUncheckedUpdateWithoutUserInputObjectSchema)]),
  create: z.union([z.lazy(() => AiChatCreateWithoutUserInputObjectSchema), z.lazy(() => AiChatUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();
export const AiChatUpsertWithWhereUniqueWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => AiChatWhereUniqueInputObjectSchema),
  update: z.union([z.lazy(() => AiChatUpdateWithoutUserInputObjectSchema), z.lazy(() => AiChatUncheckedUpdateWithoutUserInputObjectSchema)]),
  create: z.union([z.lazy(() => AiChatCreateWithoutUserInputObjectSchema), z.lazy(() => AiChatUncheckedCreateWithoutUserInputObjectSchema)])
}).strict();


// File: AiChatUpdateWithWhereUniqueWithoutUserInput.schema.ts

export const AiChatUpdateWithWhereUniqueWithoutUserInputObjectSchema: z.ZodType<Prisma.AiChatUpdateWithWhereUniqueWithoutUserInput, Prisma.AiChatUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AiChatWhereUniqueInputObjectSchema),
  data: z.union([z.lazy(() => AiChatUpdateWithoutUserInputObjectSchema), z.lazy(() => AiChatUncheckedUpdateWithoutUserInputObjectSchema)])
}).strict();
export const AiChatUpdateWithWhereUniqueWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => AiChatWhereUniqueInputObjectSchema),
  data: z.union([z.lazy(() => AiChatUpdateWithoutUserInputObjectSchema), z.lazy(() => AiChatUncheckedUpdateWithoutUserInputObjectSchema)])
}).strict();


// File: AiChatUpdateManyWithWhereWithoutUserInput.schema.ts

export const AiChatUpdateManyWithWhereWithoutUserInputObjectSchema: z.ZodType<Prisma.AiChatUpdateManyWithWhereWithoutUserInput, Prisma.AiChatUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => AiChatScalarWhereInputObjectSchema),
  data: z.union([z.lazy(() => AiChatUpdateManyMutationInputObjectSchema), z.lazy(() => AiChatUncheckedUpdateManyWithoutUserInputObjectSchema)])
}).strict();
export const AiChatUpdateManyWithWhereWithoutUserInputObjectZodSchema = z.object({
  where: z.lazy(() => AiChatScalarWhereInputObjectSchema),
  data: z.union([z.lazy(() => AiChatUpdateManyMutationInputObjectSchema), z.lazy(() => AiChatUncheckedUpdateManyWithoutUserInputObjectSchema)])
}).strict();


// File: AiChatScalarWhereInput.schema.ts

export const AiChatScalarWhereInputObjectSchema: z.ZodType<Prisma.AiChatScalarWhereInput, Prisma.AiChatScalarWhereInput> = z.object({
  AND: z.union([z.lazy(() => AiChatScalarWhereInputObjectSchema), z.lazy(() => AiChatScalarWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => AiChatScalarWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => AiChatScalarWhereInputObjectSchema), z.lazy(() => AiChatScalarWhereInputObjectSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  organizationId: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  userId: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  title: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  messages: z.lazy(() => JsonFilterObjectSchema).optional(),
  createdAt: z.union([z.lazy(() => DateTimeFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional()
}).strict();
export const AiChatScalarWhereInputObjectZodSchema = z.object({
  AND: z.union([z.lazy(() => AiChatScalarWhereInputObjectSchema), z.lazy(() => AiChatScalarWhereInputObjectSchema).array()]).optional(),
  OR: z.lazy(() => AiChatScalarWhereInputObjectSchema).array().optional(),
  NOT: z.union([z.lazy(() => AiChatScalarWhereInputObjectSchema), z.lazy(() => AiChatScalarWhereInputObjectSchema).array()]).optional(),
  id: z.union([z.lazy(() => StringFilterObjectSchema), z.string()]).optional(),
  organizationId: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  userId: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  title: z.union([z.lazy(() => StringNullableFilterObjectSchema), z.string()]).optional().nullable(),
  messages: z.lazy(() => JsonFilterObjectSchema).optional(),
  createdAt: z.union([z.lazy(() => DateTimeFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional(),
  updatedAt: z.union([z.lazy(() => DateTimeFilterObjectSchema), z.union([z.date(), z.iso.datetime()])]).optional()
}).strict();


// File: UserCreateWithoutSessionsInput.schema.ts

export const UserCreateWithoutSessionsInputObjectSchema: z.ZodType<Prisma.UserCreateWithoutSessionsInput, Prisma.UserCreateWithoutSessionsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();
export const UserCreateWithoutSessionsInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();


// File: UserUncheckedCreateWithoutSessionsInput.schema.ts

export const UserUncheckedCreateWithoutSessionsInputObjectSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutSessionsInput, Prisma.UserUncheckedCreateWithoutSessionsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();
export const UserUncheckedCreateWithoutSessionsInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();


// File: UserCreateOrConnectWithoutSessionsInput.schema.ts

export const UserCreateOrConnectWithoutSessionsInputObjectSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutSessionsInput, Prisma.UserCreateOrConnectWithoutSessionsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => UserCreateWithoutSessionsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutSessionsInputObjectSchema)])
}).strict();
export const UserCreateOrConnectWithoutSessionsInputObjectZodSchema = z.object({
  where: z.lazy(() => UserWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => UserCreateWithoutSessionsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutSessionsInputObjectSchema)])
}).strict();


// File: UserUpsertWithoutSessionsInput.schema.ts

export const UserUpsertWithoutSessionsInputObjectSchema: z.ZodType<Prisma.UserUpsertWithoutSessionsInput, Prisma.UserUpsertWithoutSessionsInput> = z.object({
  update: z.union([z.lazy(() => UserUpdateWithoutSessionsInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutSessionsInputObjectSchema)]),
  create: z.union([z.lazy(() => UserCreateWithoutSessionsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutSessionsInputObjectSchema)]),
  where: z.lazy(() => UserWhereInputObjectSchema).optional()
}).strict();
export const UserUpsertWithoutSessionsInputObjectZodSchema = z.object({
  update: z.union([z.lazy(() => UserUpdateWithoutSessionsInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutSessionsInputObjectSchema)]),
  create: z.union([z.lazy(() => UserCreateWithoutSessionsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutSessionsInputObjectSchema)]),
  where: z.lazy(() => UserWhereInputObjectSchema).optional()
}).strict();


// File: UserUpdateToOneWithWhereWithoutSessionsInput.schema.ts

export const UserUpdateToOneWithWhereWithoutSessionsInputObjectSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutSessionsInput, Prisma.UserUpdateToOneWithWhereWithoutSessionsInput> = z.object({
  where: z.lazy(() => UserWhereInputObjectSchema).optional(),
  data: z.union([z.lazy(() => UserUpdateWithoutSessionsInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutSessionsInputObjectSchema)])
}).strict();
export const UserUpdateToOneWithWhereWithoutSessionsInputObjectZodSchema = z.object({
  where: z.lazy(() => UserWhereInputObjectSchema).optional(),
  data: z.union([z.lazy(() => UserUpdateWithoutSessionsInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutSessionsInputObjectSchema)])
}).strict();


// File: UserUpdateWithoutSessionsInput.schema.ts

export const UserUpdateWithoutSessionsInputObjectSchema: z.ZodType<Prisma.UserUpdateWithoutSessionsInput, Prisma.UserUpdateWithoutSessionsInput> = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();
export const UserUpdateWithoutSessionsInputObjectZodSchema = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();


// File: UserUncheckedUpdateWithoutSessionsInput.schema.ts

export const UserUncheckedUpdateWithoutSessionsInputObjectSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutSessionsInput, Prisma.UserUncheckedUpdateWithoutSessionsInput> = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  updatedAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();
export const UserUncheckedUpdateWithoutSessionsInputObjectZodSchema = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  updatedAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();


// File: UserCreateWithoutAccountsInput.schema.ts

export const UserCreateWithoutAccountsInputObjectSchema: z.ZodType<Prisma.UserCreateWithoutAccountsInput, Prisma.UserCreateWithoutAccountsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();
export const UserCreateWithoutAccountsInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();


// File: UserUncheckedCreateWithoutAccountsInput.schema.ts

export const UserUncheckedCreateWithoutAccountsInputObjectSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutAccountsInput, Prisma.UserUncheckedCreateWithoutAccountsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();
export const UserUncheckedCreateWithoutAccountsInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();


// File: UserCreateOrConnectWithoutAccountsInput.schema.ts

export const UserCreateOrConnectWithoutAccountsInputObjectSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutAccountsInput, Prisma.UserCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => UserCreateWithoutAccountsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutAccountsInputObjectSchema)])
}).strict();
export const UserCreateOrConnectWithoutAccountsInputObjectZodSchema = z.object({
  where: z.lazy(() => UserWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => UserCreateWithoutAccountsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutAccountsInputObjectSchema)])
}).strict();


// File: UserUpsertWithoutAccountsInput.schema.ts

export const UserUpsertWithoutAccountsInputObjectSchema: z.ZodType<Prisma.UserUpsertWithoutAccountsInput, Prisma.UserUpsertWithoutAccountsInput> = z.object({
  update: z.union([z.lazy(() => UserUpdateWithoutAccountsInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutAccountsInputObjectSchema)]),
  create: z.union([z.lazy(() => UserCreateWithoutAccountsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutAccountsInputObjectSchema)]),
  where: z.lazy(() => UserWhereInputObjectSchema).optional()
}).strict();
export const UserUpsertWithoutAccountsInputObjectZodSchema = z.object({
  update: z.union([z.lazy(() => UserUpdateWithoutAccountsInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutAccountsInputObjectSchema)]),
  create: z.union([z.lazy(() => UserCreateWithoutAccountsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutAccountsInputObjectSchema)]),
  where: z.lazy(() => UserWhereInputObjectSchema).optional()
}).strict();


// File: UserUpdateToOneWithWhereWithoutAccountsInput.schema.ts

export const UserUpdateToOneWithWhereWithoutAccountsInputObjectSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutAccountsInput, Prisma.UserUpdateToOneWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => UserWhereInputObjectSchema).optional(),
  data: z.union([z.lazy(() => UserUpdateWithoutAccountsInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutAccountsInputObjectSchema)])
}).strict();
export const UserUpdateToOneWithWhereWithoutAccountsInputObjectZodSchema = z.object({
  where: z.lazy(() => UserWhereInputObjectSchema).optional(),
  data: z.union([z.lazy(() => UserUpdateWithoutAccountsInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutAccountsInputObjectSchema)])
}).strict();


// File: UserUpdateWithoutAccountsInput.schema.ts

export const UserUpdateWithoutAccountsInputObjectSchema: z.ZodType<Prisma.UserUpdateWithoutAccountsInput, Prisma.UserUpdateWithoutAccountsInput> = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();
export const UserUpdateWithoutAccountsInputObjectZodSchema = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();


// File: UserUncheckedUpdateWithoutAccountsInput.schema.ts

export const UserUncheckedUpdateWithoutAccountsInputObjectSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutAccountsInput, Prisma.UserUncheckedUpdateWithoutAccountsInput> = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  updatedAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();
export const UserUncheckedUpdateWithoutAccountsInputObjectZodSchema = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  updatedAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();


// File: UserCreateWithoutPasskeysInput.schema.ts

export const UserCreateWithoutPasskeysInputObjectSchema: z.ZodType<Prisma.UserCreateWithoutPasskeysInput, Prisma.UserCreateWithoutPasskeysInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();
export const UserCreateWithoutPasskeysInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();


// File: UserUncheckedCreateWithoutPasskeysInput.schema.ts

export const UserUncheckedCreateWithoutPasskeysInputObjectSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutPasskeysInput, Prisma.UserUncheckedCreateWithoutPasskeysInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();
export const UserUncheckedCreateWithoutPasskeysInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();


// File: UserCreateOrConnectWithoutPasskeysInput.schema.ts

export const UserCreateOrConnectWithoutPasskeysInputObjectSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutPasskeysInput, Prisma.UserCreateOrConnectWithoutPasskeysInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => UserCreateWithoutPasskeysInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutPasskeysInputObjectSchema)])
}).strict();
export const UserCreateOrConnectWithoutPasskeysInputObjectZodSchema = z.object({
  where: z.lazy(() => UserWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => UserCreateWithoutPasskeysInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutPasskeysInputObjectSchema)])
}).strict();


// File: UserUpsertWithoutPasskeysInput.schema.ts

export const UserUpsertWithoutPasskeysInputObjectSchema: z.ZodType<Prisma.UserUpsertWithoutPasskeysInput, Prisma.UserUpsertWithoutPasskeysInput> = z.object({
  update: z.union([z.lazy(() => UserUpdateWithoutPasskeysInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutPasskeysInputObjectSchema)]),
  create: z.union([z.lazy(() => UserCreateWithoutPasskeysInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutPasskeysInputObjectSchema)]),
  where: z.lazy(() => UserWhereInputObjectSchema).optional()
}).strict();
export const UserUpsertWithoutPasskeysInputObjectZodSchema = z.object({
  update: z.union([z.lazy(() => UserUpdateWithoutPasskeysInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutPasskeysInputObjectSchema)]),
  create: z.union([z.lazy(() => UserCreateWithoutPasskeysInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutPasskeysInputObjectSchema)]),
  where: z.lazy(() => UserWhereInputObjectSchema).optional()
}).strict();


// File: UserUpdateToOneWithWhereWithoutPasskeysInput.schema.ts

export const UserUpdateToOneWithWhereWithoutPasskeysInputObjectSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutPasskeysInput, Prisma.UserUpdateToOneWithWhereWithoutPasskeysInput> = z.object({
  where: z.lazy(() => UserWhereInputObjectSchema).optional(),
  data: z.union([z.lazy(() => UserUpdateWithoutPasskeysInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutPasskeysInputObjectSchema)])
}).strict();
export const UserUpdateToOneWithWhereWithoutPasskeysInputObjectZodSchema = z.object({
  where: z.lazy(() => UserWhereInputObjectSchema).optional(),
  data: z.union([z.lazy(() => UserUpdateWithoutPasskeysInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutPasskeysInputObjectSchema)])
}).strict();


// File: UserUpdateWithoutPasskeysInput.schema.ts

export const UserUpdateWithoutPasskeysInputObjectSchema: z.ZodType<Prisma.UserUpdateWithoutPasskeysInput, Prisma.UserUpdateWithoutPasskeysInput> = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();
export const UserUpdateWithoutPasskeysInputObjectZodSchema = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();


// File: UserUncheckedUpdateWithoutPasskeysInput.schema.ts

export const UserUncheckedUpdateWithoutPasskeysInputObjectSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutPasskeysInput, Prisma.UserUncheckedUpdateWithoutPasskeysInput> = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  updatedAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();
export const UserUncheckedUpdateWithoutPasskeysInputObjectZodSchema = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  updatedAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();


// File: UserCreateWithoutTwofactorsInput.schema.ts

export const UserCreateWithoutTwofactorsInputObjectSchema: z.ZodType<Prisma.UserCreateWithoutTwofactorsInput, Prisma.UserCreateWithoutTwofactorsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();
export const UserCreateWithoutTwofactorsInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();


// File: UserUncheckedCreateWithoutTwofactorsInput.schema.ts

export const UserUncheckedCreateWithoutTwofactorsInputObjectSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutTwofactorsInput, Prisma.UserUncheckedCreateWithoutTwofactorsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();
export const UserUncheckedCreateWithoutTwofactorsInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();


// File: UserCreateOrConnectWithoutTwofactorsInput.schema.ts

export const UserCreateOrConnectWithoutTwofactorsInputObjectSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutTwofactorsInput, Prisma.UserCreateOrConnectWithoutTwofactorsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => UserCreateWithoutTwofactorsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutTwofactorsInputObjectSchema)])
}).strict();
export const UserCreateOrConnectWithoutTwofactorsInputObjectZodSchema = z.object({
  where: z.lazy(() => UserWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => UserCreateWithoutTwofactorsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutTwofactorsInputObjectSchema)])
}).strict();


// File: UserUpsertWithoutTwofactorsInput.schema.ts

export const UserUpsertWithoutTwofactorsInputObjectSchema: z.ZodType<Prisma.UserUpsertWithoutTwofactorsInput, Prisma.UserUpsertWithoutTwofactorsInput> = z.object({
  update: z.union([z.lazy(() => UserUpdateWithoutTwofactorsInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutTwofactorsInputObjectSchema)]),
  create: z.union([z.lazy(() => UserCreateWithoutTwofactorsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutTwofactorsInputObjectSchema)]),
  where: z.lazy(() => UserWhereInputObjectSchema).optional()
}).strict();
export const UserUpsertWithoutTwofactorsInputObjectZodSchema = z.object({
  update: z.union([z.lazy(() => UserUpdateWithoutTwofactorsInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutTwofactorsInputObjectSchema)]),
  create: z.union([z.lazy(() => UserCreateWithoutTwofactorsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutTwofactorsInputObjectSchema)]),
  where: z.lazy(() => UserWhereInputObjectSchema).optional()
}).strict();


// File: UserUpdateToOneWithWhereWithoutTwofactorsInput.schema.ts

export const UserUpdateToOneWithWhereWithoutTwofactorsInputObjectSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutTwofactorsInput, Prisma.UserUpdateToOneWithWhereWithoutTwofactorsInput> = z.object({
  where: z.lazy(() => UserWhereInputObjectSchema).optional(),
  data: z.union([z.lazy(() => UserUpdateWithoutTwofactorsInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutTwofactorsInputObjectSchema)])
}).strict();
export const UserUpdateToOneWithWhereWithoutTwofactorsInputObjectZodSchema = z.object({
  where: z.lazy(() => UserWhereInputObjectSchema).optional(),
  data: z.union([z.lazy(() => UserUpdateWithoutTwofactorsInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutTwofactorsInputObjectSchema)])
}).strict();


// File: UserUpdateWithoutTwofactorsInput.schema.ts

export const UserUpdateWithoutTwofactorsInputObjectSchema: z.ZodType<Prisma.UserUpdateWithoutTwofactorsInput, Prisma.UserUpdateWithoutTwofactorsInput> = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();
export const UserUpdateWithoutTwofactorsInputObjectZodSchema = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();


// File: UserUncheckedUpdateWithoutTwofactorsInput.schema.ts

export const UserUncheckedUpdateWithoutTwofactorsInputObjectSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutTwofactorsInput, Prisma.UserUncheckedUpdateWithoutTwofactorsInput> = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  updatedAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();
export const UserUncheckedUpdateWithoutTwofactorsInputObjectZodSchema = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  updatedAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();


// File: MemberCreateWithoutOrganizationInput.schema.ts

export const MemberCreateWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.MemberCreateWithoutOrganizationInput, Prisma.MemberCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  role: z.string(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  user: z.lazy(() => UserCreateNestedOneWithoutMembersInputObjectSchema)
}).strict();
export const MemberCreateWithoutOrganizationInputObjectZodSchema = z.object({
  id: z.string().optional(),
  role: z.string(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  user: z.lazy(() => UserCreateNestedOneWithoutMembersInputObjectSchema)
}).strict();


// File: MemberUncheckedCreateWithoutOrganizationInput.schema.ts


export const MemberUncheckedCreateWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.MemberUncheckedCreateWithoutOrganizationInput, Prisma.MemberUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  role: z.string(),
  createdAt: z.union([z.date(), z.iso.datetime()])
}).strict();
export const MemberUncheckedCreateWithoutOrganizationInputObjectZodSchema = z.object({
  id: z.string().optional(),
  userId: z.string(),
  role: z.string(),
  createdAt: z.union([z.date(), z.iso.datetime()])
}).strict();


// File: MemberCreateOrConnectWithoutOrganizationInput.schema.ts

export const MemberCreateOrConnectWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.MemberCreateOrConnectWithoutOrganizationInput, Prisma.MemberCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => MemberCreateWithoutOrganizationInputObjectSchema), z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputObjectSchema)])
}).strict();
export const MemberCreateOrConnectWithoutOrganizationInputObjectZodSchema = z.object({
  where: z.lazy(() => MemberWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => MemberCreateWithoutOrganizationInputObjectSchema), z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputObjectSchema)])
}).strict();


// File: MemberCreateManyOrganizationInputEnvelope.schema.ts

export const MemberCreateManyOrganizationInputEnvelopeObjectSchema: z.ZodType<Prisma.MemberCreateManyOrganizationInputEnvelope, Prisma.MemberCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([z.lazy(() => MemberCreateManyOrganizationInputObjectSchema), z.lazy(() => MemberCreateManyOrganizationInputObjectSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
export const MemberCreateManyOrganizationInputEnvelopeObjectZodSchema = z.object({
  data: z.union([z.lazy(() => MemberCreateManyOrganizationInputObjectSchema), z.lazy(() => MemberCreateManyOrganizationInputObjectSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();


// File: InvitationCreateWithoutOrganizationInput.schema.ts

export const InvitationCreateWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.InvitationCreateWithoutOrganizationInput, Prisma.InvitationCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  user: z.lazy(() => UserCreateNestedOneWithoutInvitationsInputObjectSchema)
}).strict();
export const InvitationCreateWithoutOrganizationInputObjectZodSchema = z.object({
  id: z.string().optional(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  user: z.lazy(() => UserCreateNestedOneWithoutInvitationsInputObjectSchema)
}).strict();


// File: InvitationUncheckedCreateWithoutOrganizationInput.schema.ts


export const InvitationUncheckedCreateWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.InvitationUncheckedCreateWithoutOrganizationInput, Prisma.InvitationUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  inviterId: z.string()
}).strict();
export const InvitationUncheckedCreateWithoutOrganizationInputObjectZodSchema = z.object({
  id: z.string().optional(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  inviterId: z.string()
}).strict();


// File: InvitationCreateOrConnectWithoutOrganizationInput.schema.ts

export const InvitationCreateOrConnectWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.InvitationCreateOrConnectWithoutOrganizationInput, Prisma.InvitationCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => InvitationCreateWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputObjectSchema)])
}).strict();
export const InvitationCreateOrConnectWithoutOrganizationInputObjectZodSchema = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => InvitationCreateWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputObjectSchema)])
}).strict();


// File: InvitationCreateManyOrganizationInputEnvelope.schema.ts

export const InvitationCreateManyOrganizationInputEnvelopeObjectSchema: z.ZodType<Prisma.InvitationCreateManyOrganizationInputEnvelope, Prisma.InvitationCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([z.lazy(() => InvitationCreateManyOrganizationInputObjectSchema), z.lazy(() => InvitationCreateManyOrganizationInputObjectSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
export const InvitationCreateManyOrganizationInputEnvelopeObjectZodSchema = z.object({
  data: z.union([z.lazy(() => InvitationCreateManyOrganizationInputObjectSchema), z.lazy(() => InvitationCreateManyOrganizationInputObjectSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();


// File: PurchaseCreateWithoutOrganizationInput.schema.ts

export const PurchaseCreateWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.PurchaseCreateWithoutOrganizationInput, Prisma.PurchaseCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  type: PurchaseTypeSchema,
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutPurchasesInputObjectSchema).optional()
}).strict();
export const PurchaseCreateWithoutOrganizationInputObjectZodSchema = z.object({
  id: z.string().optional(),
  type: PurchaseTypeSchema,
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutPurchasesInputObjectSchema).optional()
}).strict();


// File: PurchaseUncheckedCreateWithoutOrganizationInput.schema.ts

export const PurchaseUncheckedCreateWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.PurchaseUncheckedCreateWithoutOrganizationInput, Prisma.PurchaseUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  userId: z.string().optional().nullable(),
  type: PurchaseTypeSchema,
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional()
}).strict();
export const PurchaseUncheckedCreateWithoutOrganizationInputObjectZodSchema = z.object({
  id: z.string().optional(),
  userId: z.string().optional().nullable(),
  type: PurchaseTypeSchema,
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional()
}).strict();


// File: PurchaseCreateOrConnectWithoutOrganizationInput.schema.ts

export const PurchaseCreateOrConnectWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.PurchaseCreateOrConnectWithoutOrganizationInput, Prisma.PurchaseCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => PurchaseWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => PurchaseCreateWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputObjectSchema)])
}).strict();
export const PurchaseCreateOrConnectWithoutOrganizationInputObjectZodSchema = z.object({
  where: z.lazy(() => PurchaseWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => PurchaseCreateWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputObjectSchema)])
}).strict();


// File: PurchaseCreateManyOrganizationInputEnvelope.schema.ts

export const PurchaseCreateManyOrganizationInputEnvelopeObjectSchema: z.ZodType<Prisma.PurchaseCreateManyOrganizationInputEnvelope, Prisma.PurchaseCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([z.lazy(() => PurchaseCreateManyOrganizationInputObjectSchema), z.lazy(() => PurchaseCreateManyOrganizationInputObjectSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
export const PurchaseCreateManyOrganizationInputEnvelopeObjectZodSchema = z.object({
  data: z.union([z.lazy(() => PurchaseCreateManyOrganizationInputObjectSchema), z.lazy(() => PurchaseCreateManyOrganizationInputObjectSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();


// File: AiChatCreateWithoutOrganizationInput.schema.ts


const literalSchema = z.union([z.string(), z.number(), z.boolean()]);
const jsonSchema = z.lazy(() =>
  z.union([literalSchema, z.array(jsonSchema.nullable()), z.record(z.string(), jsonSchema.nullable())])
);

export const AiChatCreateWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.AiChatCreateWithoutOrganizationInput, Prisma.AiChatCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  title: z.string().optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutAiChatsInputObjectSchema).optional()
}).strict();
export const AiChatCreateWithoutOrganizationInputObjectZodSchema = z.object({
  id: z.string().optional(),
  title: z.string().optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutAiChatsInputObjectSchema).optional()
}).strict();


// File: AiChatUncheckedCreateWithoutOrganizationInput.schema.ts


const literalSchema = z.union([z.string(), z.number(), z.boolean()]);
const jsonSchema = z.lazy(() =>
  z.union([literalSchema, z.array(jsonSchema.nullable()), z.record(z.string(), jsonSchema.nullable())])
);

export const AiChatUncheckedCreateWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.AiChatUncheckedCreateWithoutOrganizationInput, Prisma.AiChatUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  userId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional()
}).strict();
export const AiChatUncheckedCreateWithoutOrganizationInputObjectZodSchema = z.object({
  id: z.string().optional(),
  userId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional()
}).strict();


// File: AiChatCreateOrConnectWithoutOrganizationInput.schema.ts

export const AiChatCreateOrConnectWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.AiChatCreateOrConnectWithoutOrganizationInput, Prisma.AiChatCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => AiChatWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => AiChatCreateWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputObjectSchema)])
}).strict();
export const AiChatCreateOrConnectWithoutOrganizationInputObjectZodSchema = z.object({
  where: z.lazy(() => AiChatWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => AiChatCreateWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputObjectSchema)])
}).strict();


// File: AiChatCreateManyOrganizationInputEnvelope.schema.ts

export const AiChatCreateManyOrganizationInputEnvelopeObjectSchema: z.ZodType<Prisma.AiChatCreateManyOrganizationInputEnvelope, Prisma.AiChatCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([z.lazy(() => AiChatCreateManyOrganizationInputObjectSchema), z.lazy(() => AiChatCreateManyOrganizationInputObjectSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();
export const AiChatCreateManyOrganizationInputEnvelopeObjectZodSchema = z.object({
  data: z.union([z.lazy(() => AiChatCreateManyOrganizationInputObjectSchema), z.lazy(() => AiChatCreateManyOrganizationInputObjectSchema).array()]),
  skipDuplicates: z.boolean().optional()
}).strict();


// File: MemberUpsertWithWhereUniqueWithoutOrganizationInput.schema.ts

export const MemberUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.MemberUpsertWithWhereUniqueWithoutOrganizationInput, Prisma.MemberUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputObjectSchema),
  update: z.union([z.lazy(() => MemberUpdateWithoutOrganizationInputObjectSchema), z.lazy(() => MemberUncheckedUpdateWithoutOrganizationInputObjectSchema)]),
  create: z.union([z.lazy(() => MemberCreateWithoutOrganizationInputObjectSchema), z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputObjectSchema)])
}).strict();
export const MemberUpsertWithWhereUniqueWithoutOrganizationInputObjectZodSchema = z.object({
  where: z.lazy(() => MemberWhereUniqueInputObjectSchema),
  update: z.union([z.lazy(() => MemberUpdateWithoutOrganizationInputObjectSchema), z.lazy(() => MemberUncheckedUpdateWithoutOrganizationInputObjectSchema)]),
  create: z.union([z.lazy(() => MemberCreateWithoutOrganizationInputObjectSchema), z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputObjectSchema)])
}).strict();


// File: MemberUpdateWithWhereUniqueWithoutOrganizationInput.schema.ts

export const MemberUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.MemberUpdateWithWhereUniqueWithoutOrganizationInput, Prisma.MemberUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputObjectSchema),
  data: z.union([z.lazy(() => MemberUpdateWithoutOrganizationInputObjectSchema), z.lazy(() => MemberUncheckedUpdateWithoutOrganizationInputObjectSchema)])
}).strict();
export const MemberUpdateWithWhereUniqueWithoutOrganizationInputObjectZodSchema = z.object({
  where: z.lazy(() => MemberWhereUniqueInputObjectSchema),
  data: z.union([z.lazy(() => MemberUpdateWithoutOrganizationInputObjectSchema), z.lazy(() => MemberUncheckedUpdateWithoutOrganizationInputObjectSchema)])
}).strict();


// File: MemberUpdateManyWithWhereWithoutOrganizationInput.schema.ts

export const MemberUpdateManyWithWhereWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.MemberUpdateManyWithWhereWithoutOrganizationInput, Prisma.MemberUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MemberScalarWhereInputObjectSchema),
  data: z.union([z.lazy(() => MemberUpdateManyMutationInputObjectSchema), z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationInputObjectSchema)])
}).strict();
export const MemberUpdateManyWithWhereWithoutOrganizationInputObjectZodSchema = z.object({
  where: z.lazy(() => MemberScalarWhereInputObjectSchema),
  data: z.union([z.lazy(() => MemberUpdateManyMutationInputObjectSchema), z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationInputObjectSchema)])
}).strict();


// File: InvitationUpsertWithWhereUniqueWithoutOrganizationInput.schema.ts

export const InvitationUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.InvitationUpsertWithWhereUniqueWithoutOrganizationInput, Prisma.InvitationUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputObjectSchema),
  update: z.union([z.lazy(() => InvitationUpdateWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationUncheckedUpdateWithoutOrganizationInputObjectSchema)]),
  create: z.union([z.lazy(() => InvitationCreateWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputObjectSchema)])
}).strict();
export const InvitationUpsertWithWhereUniqueWithoutOrganizationInputObjectZodSchema = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputObjectSchema),
  update: z.union([z.lazy(() => InvitationUpdateWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationUncheckedUpdateWithoutOrganizationInputObjectSchema)]),
  create: z.union([z.lazy(() => InvitationCreateWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputObjectSchema)])
}).strict();


// File: InvitationUpdateWithWhereUniqueWithoutOrganizationInput.schema.ts

export const InvitationUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.InvitationUpdateWithWhereUniqueWithoutOrganizationInput, Prisma.InvitationUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputObjectSchema),
  data: z.union([z.lazy(() => InvitationUpdateWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationUncheckedUpdateWithoutOrganizationInputObjectSchema)])
}).strict();
export const InvitationUpdateWithWhereUniqueWithoutOrganizationInputObjectZodSchema = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputObjectSchema),
  data: z.union([z.lazy(() => InvitationUpdateWithoutOrganizationInputObjectSchema), z.lazy(() => InvitationUncheckedUpdateWithoutOrganizationInputObjectSchema)])
}).strict();


// File: InvitationUpdateManyWithWhereWithoutOrganizationInput.schema.ts

export const InvitationUpdateManyWithWhereWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.InvitationUpdateManyWithWhereWithoutOrganizationInput, Prisma.InvitationUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => InvitationScalarWhereInputObjectSchema),
  data: z.union([z.lazy(() => InvitationUpdateManyMutationInputObjectSchema), z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationInputObjectSchema)])
}).strict();
export const InvitationUpdateManyWithWhereWithoutOrganizationInputObjectZodSchema = z.object({
  where: z.lazy(() => InvitationScalarWhereInputObjectSchema),
  data: z.union([z.lazy(() => InvitationUpdateManyMutationInputObjectSchema), z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationInputObjectSchema)])
}).strict();


// File: PurchaseUpsertWithWhereUniqueWithoutOrganizationInput.schema.ts

export const PurchaseUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.PurchaseUpsertWithWhereUniqueWithoutOrganizationInput, Prisma.PurchaseUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => PurchaseWhereUniqueInputObjectSchema),
  update: z.union([z.lazy(() => PurchaseUpdateWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseUncheckedUpdateWithoutOrganizationInputObjectSchema)]),
  create: z.union([z.lazy(() => PurchaseCreateWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputObjectSchema)])
}).strict();
export const PurchaseUpsertWithWhereUniqueWithoutOrganizationInputObjectZodSchema = z.object({
  where: z.lazy(() => PurchaseWhereUniqueInputObjectSchema),
  update: z.union([z.lazy(() => PurchaseUpdateWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseUncheckedUpdateWithoutOrganizationInputObjectSchema)]),
  create: z.union([z.lazy(() => PurchaseCreateWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseUncheckedCreateWithoutOrganizationInputObjectSchema)])
}).strict();


// File: PurchaseUpdateWithWhereUniqueWithoutOrganizationInput.schema.ts

export const PurchaseUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.PurchaseUpdateWithWhereUniqueWithoutOrganizationInput, Prisma.PurchaseUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => PurchaseWhereUniqueInputObjectSchema),
  data: z.union([z.lazy(() => PurchaseUpdateWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseUncheckedUpdateWithoutOrganizationInputObjectSchema)])
}).strict();
export const PurchaseUpdateWithWhereUniqueWithoutOrganizationInputObjectZodSchema = z.object({
  where: z.lazy(() => PurchaseWhereUniqueInputObjectSchema),
  data: z.union([z.lazy(() => PurchaseUpdateWithoutOrganizationInputObjectSchema), z.lazy(() => PurchaseUncheckedUpdateWithoutOrganizationInputObjectSchema)])
}).strict();


// File: PurchaseUpdateManyWithWhereWithoutOrganizationInput.schema.ts

export const PurchaseUpdateManyWithWhereWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.PurchaseUpdateManyWithWhereWithoutOrganizationInput, Prisma.PurchaseUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => PurchaseScalarWhereInputObjectSchema),
  data: z.union([z.lazy(() => PurchaseUpdateManyMutationInputObjectSchema), z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationInputObjectSchema)])
}).strict();
export const PurchaseUpdateManyWithWhereWithoutOrganizationInputObjectZodSchema = z.object({
  where: z.lazy(() => PurchaseScalarWhereInputObjectSchema),
  data: z.union([z.lazy(() => PurchaseUpdateManyMutationInputObjectSchema), z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationInputObjectSchema)])
}).strict();


// File: AiChatUpsertWithWhereUniqueWithoutOrganizationInput.schema.ts

export const AiChatUpsertWithWhereUniqueWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.AiChatUpsertWithWhereUniqueWithoutOrganizationInput, Prisma.AiChatUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => AiChatWhereUniqueInputObjectSchema),
  update: z.union([z.lazy(() => AiChatUpdateWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatUncheckedUpdateWithoutOrganizationInputObjectSchema)]),
  create: z.union([z.lazy(() => AiChatCreateWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputObjectSchema)])
}).strict();
export const AiChatUpsertWithWhereUniqueWithoutOrganizationInputObjectZodSchema = z.object({
  where: z.lazy(() => AiChatWhereUniqueInputObjectSchema),
  update: z.union([z.lazy(() => AiChatUpdateWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatUncheckedUpdateWithoutOrganizationInputObjectSchema)]),
  create: z.union([z.lazy(() => AiChatCreateWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatUncheckedCreateWithoutOrganizationInputObjectSchema)])
}).strict();


// File: AiChatUpdateWithWhereUniqueWithoutOrganizationInput.schema.ts

export const AiChatUpdateWithWhereUniqueWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.AiChatUpdateWithWhereUniqueWithoutOrganizationInput, Prisma.AiChatUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => AiChatWhereUniqueInputObjectSchema),
  data: z.union([z.lazy(() => AiChatUpdateWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatUncheckedUpdateWithoutOrganizationInputObjectSchema)])
}).strict();
export const AiChatUpdateWithWhereUniqueWithoutOrganizationInputObjectZodSchema = z.object({
  where: z.lazy(() => AiChatWhereUniqueInputObjectSchema),
  data: z.union([z.lazy(() => AiChatUpdateWithoutOrganizationInputObjectSchema), z.lazy(() => AiChatUncheckedUpdateWithoutOrganizationInputObjectSchema)])
}).strict();


// File: AiChatUpdateManyWithWhereWithoutOrganizationInput.schema.ts

export const AiChatUpdateManyWithWhereWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.AiChatUpdateManyWithWhereWithoutOrganizationInput, Prisma.AiChatUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => AiChatScalarWhereInputObjectSchema),
  data: z.union([z.lazy(() => AiChatUpdateManyMutationInputObjectSchema), z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationInputObjectSchema)])
}).strict();
export const AiChatUpdateManyWithWhereWithoutOrganizationInputObjectZodSchema = z.object({
  where: z.lazy(() => AiChatScalarWhereInputObjectSchema),
  data: z.union([z.lazy(() => AiChatUpdateManyMutationInputObjectSchema), z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationInputObjectSchema)])
}).strict();


// File: OrganizationCreateWithoutMembersInput.schema.ts

export const OrganizationCreateWithoutMembersInputObjectSchema: z.ZodType<Prisma.OrganizationCreateWithoutMembersInput, Prisma.OrganizationCreateWithoutMembersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputObjectSchema).optional()
}).strict();
export const OrganizationCreateWithoutMembersInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputObjectSchema).optional()
}).strict();


// File: OrganizationUncheckedCreateWithoutMembersInput.schema.ts

export const OrganizationUncheckedCreateWithoutMembersInputObjectSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutMembersInput, Prisma.OrganizationUncheckedCreateWithoutMembersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional()
}).strict();
export const OrganizationUncheckedCreateWithoutMembersInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional()
}).strict();


// File: OrganizationCreateOrConnectWithoutMembersInput.schema.ts

export const OrganizationCreateOrConnectWithoutMembersInputObjectSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutMembersInput, Prisma.OrganizationCreateOrConnectWithoutMembersInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => OrganizationCreateWithoutMembersInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutMembersInputObjectSchema)])
}).strict();
export const OrganizationCreateOrConnectWithoutMembersInputObjectZodSchema = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => OrganizationCreateWithoutMembersInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutMembersInputObjectSchema)])
}).strict();


// File: UserCreateWithoutMembersInput.schema.ts

export const UserCreateWithoutMembersInputObjectSchema: z.ZodType<Prisma.UserCreateWithoutMembersInput, Prisma.UserCreateWithoutMembersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();
export const UserCreateWithoutMembersInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();


// File: UserUncheckedCreateWithoutMembersInput.schema.ts

export const UserUncheckedCreateWithoutMembersInputObjectSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutMembersInput, Prisma.UserUncheckedCreateWithoutMembersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();
export const UserUncheckedCreateWithoutMembersInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();


// File: UserCreateOrConnectWithoutMembersInput.schema.ts

export const UserCreateOrConnectWithoutMembersInputObjectSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutMembersInput, Prisma.UserCreateOrConnectWithoutMembersInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => UserCreateWithoutMembersInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutMembersInputObjectSchema)])
}).strict();
export const UserCreateOrConnectWithoutMembersInputObjectZodSchema = z.object({
  where: z.lazy(() => UserWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => UserCreateWithoutMembersInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutMembersInputObjectSchema)])
}).strict();


// File: OrganizationUpsertWithoutMembersInput.schema.ts

export const OrganizationUpsertWithoutMembersInputObjectSchema: z.ZodType<Prisma.OrganizationUpsertWithoutMembersInput, Prisma.OrganizationUpsertWithoutMembersInput> = z.object({
  update: z.union([z.lazy(() => OrganizationUpdateWithoutMembersInputObjectSchema), z.lazy(() => OrganizationUncheckedUpdateWithoutMembersInputObjectSchema)]),
  create: z.union([z.lazy(() => OrganizationCreateWithoutMembersInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutMembersInputObjectSchema)]),
  where: z.lazy(() => OrganizationWhereInputObjectSchema).optional()
}).strict();
export const OrganizationUpsertWithoutMembersInputObjectZodSchema = z.object({
  update: z.union([z.lazy(() => OrganizationUpdateWithoutMembersInputObjectSchema), z.lazy(() => OrganizationUncheckedUpdateWithoutMembersInputObjectSchema)]),
  create: z.union([z.lazy(() => OrganizationCreateWithoutMembersInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutMembersInputObjectSchema)]),
  where: z.lazy(() => OrganizationWhereInputObjectSchema).optional()
}).strict();


// File: OrganizationUpdateToOneWithWhereWithoutMembersInput.schema.ts

export const OrganizationUpdateToOneWithWhereWithoutMembersInputObjectSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutMembersInput, Prisma.OrganizationUpdateToOneWithWhereWithoutMembersInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputObjectSchema).optional(),
  data: z.union([z.lazy(() => OrganizationUpdateWithoutMembersInputObjectSchema), z.lazy(() => OrganizationUncheckedUpdateWithoutMembersInputObjectSchema)])
}).strict();
export const OrganizationUpdateToOneWithWhereWithoutMembersInputObjectZodSchema = z.object({
  where: z.lazy(() => OrganizationWhereInputObjectSchema).optional(),
  data: z.union([z.lazy(() => OrganizationUpdateWithoutMembersInputObjectSchema), z.lazy(() => OrganizationUncheckedUpdateWithoutMembersInputObjectSchema)])
}).strict();


// File: OrganizationUpdateWithoutMembersInput.schema.ts

export const OrganizationUpdateWithoutMembersInputObjectSchema: z.ZodType<Prisma.OrganizationUpdateWithoutMembersInput, Prisma.OrganizationUpdateWithoutMembersInput> = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  slug: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  logo: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  metadata: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputObjectSchema).optional()
}).strict();
export const OrganizationUpdateWithoutMembersInputObjectZodSchema = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  slug: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  logo: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  metadata: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputObjectSchema).optional()
}).strict();


// File: OrganizationUncheckedUpdateWithoutMembersInput.schema.ts

export const OrganizationUncheckedUpdateWithoutMembersInputObjectSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutMembersInput, Prisma.OrganizationUncheckedUpdateWithoutMembersInput> = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  slug: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  logo: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  metadata: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional()
}).strict();
export const OrganizationUncheckedUpdateWithoutMembersInputObjectZodSchema = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  slug: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  logo: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  metadata: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional()
}).strict();


// File: UserUpsertWithoutMembersInput.schema.ts

export const UserUpsertWithoutMembersInputObjectSchema: z.ZodType<Prisma.UserUpsertWithoutMembersInput, Prisma.UserUpsertWithoutMembersInput> = z.object({
  update: z.union([z.lazy(() => UserUpdateWithoutMembersInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutMembersInputObjectSchema)]),
  create: z.union([z.lazy(() => UserCreateWithoutMembersInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutMembersInputObjectSchema)]),
  where: z.lazy(() => UserWhereInputObjectSchema).optional()
}).strict();
export const UserUpsertWithoutMembersInputObjectZodSchema = z.object({
  update: z.union([z.lazy(() => UserUpdateWithoutMembersInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutMembersInputObjectSchema)]),
  create: z.union([z.lazy(() => UserCreateWithoutMembersInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutMembersInputObjectSchema)]),
  where: z.lazy(() => UserWhereInputObjectSchema).optional()
}).strict();


// File: UserUpdateToOneWithWhereWithoutMembersInput.schema.ts

export const UserUpdateToOneWithWhereWithoutMembersInputObjectSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutMembersInput, Prisma.UserUpdateToOneWithWhereWithoutMembersInput> = z.object({
  where: z.lazy(() => UserWhereInputObjectSchema).optional(),
  data: z.union([z.lazy(() => UserUpdateWithoutMembersInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutMembersInputObjectSchema)])
}).strict();
export const UserUpdateToOneWithWhereWithoutMembersInputObjectZodSchema = z.object({
  where: z.lazy(() => UserWhereInputObjectSchema).optional(),
  data: z.union([z.lazy(() => UserUpdateWithoutMembersInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutMembersInputObjectSchema)])
}).strict();


// File: UserUpdateWithoutMembersInput.schema.ts

export const UserUpdateWithoutMembersInputObjectSchema: z.ZodType<Prisma.UserUpdateWithoutMembersInput, Prisma.UserUpdateWithoutMembersInput> = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();
export const UserUpdateWithoutMembersInputObjectZodSchema = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();


// File: UserUncheckedUpdateWithoutMembersInput.schema.ts

export const UserUncheckedUpdateWithoutMembersInputObjectSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutMembersInput, Prisma.UserUncheckedUpdateWithoutMembersInput> = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  updatedAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();
export const UserUncheckedUpdateWithoutMembersInputObjectZodSchema = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  updatedAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();


// File: OrganizationCreateWithoutInvitationsInput.schema.ts

export const OrganizationCreateWithoutInvitationsInputObjectSchema: z.ZodType<Prisma.OrganizationCreateWithoutInvitationsInput, Prisma.OrganizationCreateWithoutInvitationsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputObjectSchema).optional()
}).strict();
export const OrganizationCreateWithoutInvitationsInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputObjectSchema).optional()
}).strict();


// File: OrganizationUncheckedCreateWithoutInvitationsInput.schema.ts

export const OrganizationUncheckedCreateWithoutInvitationsInputObjectSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutInvitationsInput, Prisma.OrganizationUncheckedCreateWithoutInvitationsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional()
}).strict();
export const OrganizationUncheckedCreateWithoutInvitationsInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional()
}).strict();


// File: OrganizationCreateOrConnectWithoutInvitationsInput.schema.ts

export const OrganizationCreateOrConnectWithoutInvitationsInputObjectSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutInvitationsInput, Prisma.OrganizationCreateOrConnectWithoutInvitationsInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => OrganizationCreateWithoutInvitationsInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutInvitationsInputObjectSchema)])
}).strict();
export const OrganizationCreateOrConnectWithoutInvitationsInputObjectZodSchema = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => OrganizationCreateWithoutInvitationsInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutInvitationsInputObjectSchema)])
}).strict();


// File: UserCreateWithoutInvitationsInput.schema.ts

export const UserCreateWithoutInvitationsInputObjectSchema: z.ZodType<Prisma.UserCreateWithoutInvitationsInput, Prisma.UserCreateWithoutInvitationsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();
export const UserCreateWithoutInvitationsInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();


// File: UserUncheckedCreateWithoutInvitationsInput.schema.ts

export const UserUncheckedCreateWithoutInvitationsInputObjectSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutInvitationsInput, Prisma.UserUncheckedCreateWithoutInvitationsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();
export const UserUncheckedCreateWithoutInvitationsInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();


// File: UserCreateOrConnectWithoutInvitationsInput.schema.ts

export const UserCreateOrConnectWithoutInvitationsInputObjectSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutInvitationsInput, Prisma.UserCreateOrConnectWithoutInvitationsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => UserCreateWithoutInvitationsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutInvitationsInputObjectSchema)])
}).strict();
export const UserCreateOrConnectWithoutInvitationsInputObjectZodSchema = z.object({
  where: z.lazy(() => UserWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => UserCreateWithoutInvitationsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutInvitationsInputObjectSchema)])
}).strict();


// File: OrganizationUpsertWithoutInvitationsInput.schema.ts

export const OrganizationUpsertWithoutInvitationsInputObjectSchema: z.ZodType<Prisma.OrganizationUpsertWithoutInvitationsInput, Prisma.OrganizationUpsertWithoutInvitationsInput> = z.object({
  update: z.union([z.lazy(() => OrganizationUpdateWithoutInvitationsInputObjectSchema), z.lazy(() => OrganizationUncheckedUpdateWithoutInvitationsInputObjectSchema)]),
  create: z.union([z.lazy(() => OrganizationCreateWithoutInvitationsInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutInvitationsInputObjectSchema)]),
  where: z.lazy(() => OrganizationWhereInputObjectSchema).optional()
}).strict();
export const OrganizationUpsertWithoutInvitationsInputObjectZodSchema = z.object({
  update: z.union([z.lazy(() => OrganizationUpdateWithoutInvitationsInputObjectSchema), z.lazy(() => OrganizationUncheckedUpdateWithoutInvitationsInputObjectSchema)]),
  create: z.union([z.lazy(() => OrganizationCreateWithoutInvitationsInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutInvitationsInputObjectSchema)]),
  where: z.lazy(() => OrganizationWhereInputObjectSchema).optional()
}).strict();


// File: OrganizationUpdateToOneWithWhereWithoutInvitationsInput.schema.ts

export const OrganizationUpdateToOneWithWhereWithoutInvitationsInputObjectSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutInvitationsInput, Prisma.OrganizationUpdateToOneWithWhereWithoutInvitationsInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputObjectSchema).optional(),
  data: z.union([z.lazy(() => OrganizationUpdateWithoutInvitationsInputObjectSchema), z.lazy(() => OrganizationUncheckedUpdateWithoutInvitationsInputObjectSchema)])
}).strict();
export const OrganizationUpdateToOneWithWhereWithoutInvitationsInputObjectZodSchema = z.object({
  where: z.lazy(() => OrganizationWhereInputObjectSchema).optional(),
  data: z.union([z.lazy(() => OrganizationUpdateWithoutInvitationsInputObjectSchema), z.lazy(() => OrganizationUncheckedUpdateWithoutInvitationsInputObjectSchema)])
}).strict();


// File: OrganizationUpdateWithoutInvitationsInput.schema.ts

export const OrganizationUpdateWithoutInvitationsInputObjectSchema: z.ZodType<Prisma.OrganizationUpdateWithoutInvitationsInput, Prisma.OrganizationUpdateWithoutInvitationsInput> = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  slug: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  logo: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  metadata: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputObjectSchema).optional()
}).strict();
export const OrganizationUpdateWithoutInvitationsInputObjectZodSchema = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  slug: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  logo: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  metadata: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputObjectSchema).optional()
}).strict();


// File: OrganizationUncheckedUpdateWithoutInvitationsInput.schema.ts

export const OrganizationUncheckedUpdateWithoutInvitationsInputObjectSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutInvitationsInput, Prisma.OrganizationUncheckedUpdateWithoutInvitationsInput> = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  slug: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  logo: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  metadata: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional()
}).strict();
export const OrganizationUncheckedUpdateWithoutInvitationsInputObjectZodSchema = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  slug: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  logo: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  metadata: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional()
}).strict();


// File: UserUpsertWithoutInvitationsInput.schema.ts

export const UserUpsertWithoutInvitationsInputObjectSchema: z.ZodType<Prisma.UserUpsertWithoutInvitationsInput, Prisma.UserUpsertWithoutInvitationsInput> = z.object({
  update: z.union([z.lazy(() => UserUpdateWithoutInvitationsInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutInvitationsInputObjectSchema)]),
  create: z.union([z.lazy(() => UserCreateWithoutInvitationsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutInvitationsInputObjectSchema)]),
  where: z.lazy(() => UserWhereInputObjectSchema).optional()
}).strict();
export const UserUpsertWithoutInvitationsInputObjectZodSchema = z.object({
  update: z.union([z.lazy(() => UserUpdateWithoutInvitationsInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutInvitationsInputObjectSchema)]),
  create: z.union([z.lazy(() => UserCreateWithoutInvitationsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutInvitationsInputObjectSchema)]),
  where: z.lazy(() => UserWhereInputObjectSchema).optional()
}).strict();


// File: UserUpdateToOneWithWhereWithoutInvitationsInput.schema.ts

export const UserUpdateToOneWithWhereWithoutInvitationsInputObjectSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutInvitationsInput, Prisma.UserUpdateToOneWithWhereWithoutInvitationsInput> = z.object({
  where: z.lazy(() => UserWhereInputObjectSchema).optional(),
  data: z.union([z.lazy(() => UserUpdateWithoutInvitationsInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutInvitationsInputObjectSchema)])
}).strict();
export const UserUpdateToOneWithWhereWithoutInvitationsInputObjectZodSchema = z.object({
  where: z.lazy(() => UserWhereInputObjectSchema).optional(),
  data: z.union([z.lazy(() => UserUpdateWithoutInvitationsInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutInvitationsInputObjectSchema)])
}).strict();


// File: UserUpdateWithoutInvitationsInput.schema.ts

export const UserUpdateWithoutInvitationsInputObjectSchema: z.ZodType<Prisma.UserUpdateWithoutInvitationsInput, Prisma.UserUpdateWithoutInvitationsInput> = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();
export const UserUpdateWithoutInvitationsInputObjectZodSchema = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();


// File: UserUncheckedUpdateWithoutInvitationsInput.schema.ts

export const UserUncheckedUpdateWithoutInvitationsInputObjectSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutInvitationsInput, Prisma.UserUncheckedUpdateWithoutInvitationsInput> = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  updatedAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();
export const UserUncheckedUpdateWithoutInvitationsInputObjectZodSchema = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  updatedAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();


// File: OrganizationCreateWithoutPurchasesInput.schema.ts

export const OrganizationCreateWithoutPurchasesInputObjectSchema: z.ZodType<Prisma.OrganizationCreateWithoutPurchasesInput, Prisma.OrganizationCreateWithoutPurchasesInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputObjectSchema).optional()
}).strict();
export const OrganizationCreateWithoutPurchasesInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutOrganizationInputObjectSchema).optional()
}).strict();


// File: OrganizationUncheckedCreateWithoutPurchasesInput.schema.ts

export const OrganizationUncheckedCreateWithoutPurchasesInputObjectSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutPurchasesInput, Prisma.OrganizationUncheckedCreateWithoutPurchasesInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional()
}).strict();
export const OrganizationUncheckedCreateWithoutPurchasesInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional()
}).strict();


// File: OrganizationCreateOrConnectWithoutPurchasesInput.schema.ts

export const OrganizationCreateOrConnectWithoutPurchasesInputObjectSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutPurchasesInput, Prisma.OrganizationCreateOrConnectWithoutPurchasesInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => OrganizationCreateWithoutPurchasesInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutPurchasesInputObjectSchema)])
}).strict();
export const OrganizationCreateOrConnectWithoutPurchasesInputObjectZodSchema = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => OrganizationCreateWithoutPurchasesInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutPurchasesInputObjectSchema)])
}).strict();


// File: UserCreateWithoutPurchasesInput.schema.ts

export const UserCreateWithoutPurchasesInputObjectSchema: z.ZodType<Prisma.UserCreateWithoutPurchasesInput, Prisma.UserCreateWithoutPurchasesInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();
export const UserCreateWithoutPurchasesInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();


// File: UserUncheckedCreateWithoutPurchasesInput.schema.ts

export const UserUncheckedCreateWithoutPurchasesInputObjectSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutPurchasesInput, Prisma.UserUncheckedCreateWithoutPurchasesInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();
export const UserUncheckedCreateWithoutPurchasesInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();


// File: UserCreateOrConnectWithoutPurchasesInput.schema.ts

export const UserCreateOrConnectWithoutPurchasesInputObjectSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutPurchasesInput, Prisma.UserCreateOrConnectWithoutPurchasesInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => UserCreateWithoutPurchasesInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutPurchasesInputObjectSchema)])
}).strict();
export const UserCreateOrConnectWithoutPurchasesInputObjectZodSchema = z.object({
  where: z.lazy(() => UserWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => UserCreateWithoutPurchasesInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutPurchasesInputObjectSchema)])
}).strict();


// File: OrganizationUpsertWithoutPurchasesInput.schema.ts

export const OrganizationUpsertWithoutPurchasesInputObjectSchema: z.ZodType<Prisma.OrganizationUpsertWithoutPurchasesInput, Prisma.OrganizationUpsertWithoutPurchasesInput> = z.object({
  update: z.union([z.lazy(() => OrganizationUpdateWithoutPurchasesInputObjectSchema), z.lazy(() => OrganizationUncheckedUpdateWithoutPurchasesInputObjectSchema)]),
  create: z.union([z.lazy(() => OrganizationCreateWithoutPurchasesInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutPurchasesInputObjectSchema)]),
  where: z.lazy(() => OrganizationWhereInputObjectSchema).optional()
}).strict();
export const OrganizationUpsertWithoutPurchasesInputObjectZodSchema = z.object({
  update: z.union([z.lazy(() => OrganizationUpdateWithoutPurchasesInputObjectSchema), z.lazy(() => OrganizationUncheckedUpdateWithoutPurchasesInputObjectSchema)]),
  create: z.union([z.lazy(() => OrganizationCreateWithoutPurchasesInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutPurchasesInputObjectSchema)]),
  where: z.lazy(() => OrganizationWhereInputObjectSchema).optional()
}).strict();


// File: OrganizationUpdateToOneWithWhereWithoutPurchasesInput.schema.ts

export const OrganizationUpdateToOneWithWhereWithoutPurchasesInputObjectSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutPurchasesInput, Prisma.OrganizationUpdateToOneWithWhereWithoutPurchasesInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputObjectSchema).optional(),
  data: z.union([z.lazy(() => OrganizationUpdateWithoutPurchasesInputObjectSchema), z.lazy(() => OrganizationUncheckedUpdateWithoutPurchasesInputObjectSchema)])
}).strict();
export const OrganizationUpdateToOneWithWhereWithoutPurchasesInputObjectZodSchema = z.object({
  where: z.lazy(() => OrganizationWhereInputObjectSchema).optional(),
  data: z.union([z.lazy(() => OrganizationUpdateWithoutPurchasesInputObjectSchema), z.lazy(() => OrganizationUncheckedUpdateWithoutPurchasesInputObjectSchema)])
}).strict();


// File: OrganizationUpdateWithoutPurchasesInput.schema.ts

export const OrganizationUpdateWithoutPurchasesInputObjectSchema: z.ZodType<Prisma.OrganizationUpdateWithoutPurchasesInput, Prisma.OrganizationUpdateWithoutPurchasesInput> = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  slug: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  logo: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  metadata: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputObjectSchema).optional()
}).strict();
export const OrganizationUpdateWithoutPurchasesInputObjectZodSchema = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  slug: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  logo: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  metadata: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutOrganizationNestedInputObjectSchema).optional()
}).strict();


// File: OrganizationUncheckedUpdateWithoutPurchasesInput.schema.ts

export const OrganizationUncheckedUpdateWithoutPurchasesInputObjectSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutPurchasesInput, Prisma.OrganizationUncheckedUpdateWithoutPurchasesInput> = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  slug: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  logo: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  metadata: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional()
}).strict();
export const OrganizationUncheckedUpdateWithoutPurchasesInputObjectZodSchema = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  slug: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  logo: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  metadata: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional()
}).strict();


// File: UserUpsertWithoutPurchasesInput.schema.ts

export const UserUpsertWithoutPurchasesInputObjectSchema: z.ZodType<Prisma.UserUpsertWithoutPurchasesInput, Prisma.UserUpsertWithoutPurchasesInput> = z.object({
  update: z.union([z.lazy(() => UserUpdateWithoutPurchasesInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutPurchasesInputObjectSchema)]),
  create: z.union([z.lazy(() => UserCreateWithoutPurchasesInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutPurchasesInputObjectSchema)]),
  where: z.lazy(() => UserWhereInputObjectSchema).optional()
}).strict();
export const UserUpsertWithoutPurchasesInputObjectZodSchema = z.object({
  update: z.union([z.lazy(() => UserUpdateWithoutPurchasesInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutPurchasesInputObjectSchema)]),
  create: z.union([z.lazy(() => UserCreateWithoutPurchasesInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutPurchasesInputObjectSchema)]),
  where: z.lazy(() => UserWhereInputObjectSchema).optional()
}).strict();


// File: UserUpdateToOneWithWhereWithoutPurchasesInput.schema.ts

export const UserUpdateToOneWithWhereWithoutPurchasesInputObjectSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutPurchasesInput, Prisma.UserUpdateToOneWithWhereWithoutPurchasesInput> = z.object({
  where: z.lazy(() => UserWhereInputObjectSchema).optional(),
  data: z.union([z.lazy(() => UserUpdateWithoutPurchasesInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutPurchasesInputObjectSchema)])
}).strict();
export const UserUpdateToOneWithWhereWithoutPurchasesInputObjectZodSchema = z.object({
  where: z.lazy(() => UserWhereInputObjectSchema).optional(),
  data: z.union([z.lazy(() => UserUpdateWithoutPurchasesInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutPurchasesInputObjectSchema)])
}).strict();


// File: UserUpdateWithoutPurchasesInput.schema.ts

export const UserUpdateWithoutPurchasesInputObjectSchema: z.ZodType<Prisma.UserUpdateWithoutPurchasesInput, Prisma.UserUpdateWithoutPurchasesInput> = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();
export const UserUpdateWithoutPurchasesInputObjectZodSchema = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();


// File: UserUncheckedUpdateWithoutPurchasesInput.schema.ts

export const UserUncheckedUpdateWithoutPurchasesInputObjectSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutPurchasesInput, Prisma.UserUncheckedUpdateWithoutPurchasesInput> = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  updatedAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();
export const UserUncheckedUpdateWithoutPurchasesInputObjectZodSchema = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  updatedAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  aiChats: z.lazy(() => AiChatUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();


// File: OrganizationCreateWithoutAiChatsInput.schema.ts

export const OrganizationCreateWithoutAiChatsInputObjectSchema: z.ZodType<Prisma.OrganizationCreateWithoutAiChatsInput, Prisma.OrganizationCreateWithoutAiChatsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputObjectSchema).optional()
}).strict();
export const OrganizationCreateWithoutAiChatsInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutOrganizationInputObjectSchema).optional()
}).strict();


// File: OrganizationUncheckedCreateWithoutAiChatsInput.schema.ts

export const OrganizationUncheckedCreateWithoutAiChatsInputObjectSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutAiChatsInput, Prisma.OrganizationUncheckedCreateWithoutAiChatsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional()
}).strict();
export const OrganizationUncheckedCreateWithoutAiChatsInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  metadata: z.string().optional().nullable(),
  paymentsCustomerId: z.string().optional().nullable(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutOrganizationInputObjectSchema).optional()
}).strict();


// File: OrganizationCreateOrConnectWithoutAiChatsInput.schema.ts

export const OrganizationCreateOrConnectWithoutAiChatsInputObjectSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutAiChatsInput, Prisma.OrganizationCreateOrConnectWithoutAiChatsInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => OrganizationCreateWithoutAiChatsInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutAiChatsInputObjectSchema)])
}).strict();
export const OrganizationCreateOrConnectWithoutAiChatsInputObjectZodSchema = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => OrganizationCreateWithoutAiChatsInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutAiChatsInputObjectSchema)])
}).strict();


// File: UserCreateWithoutAiChatsInput.schema.ts

export const UserCreateWithoutAiChatsInputObjectSchema: z.ZodType<Prisma.UserCreateWithoutAiChatsInput, Prisma.UserCreateWithoutAiChatsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();
export const UserCreateWithoutAiChatsInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();


// File: UserUncheckedCreateWithoutAiChatsInput.schema.ts

export const UserUncheckedCreateWithoutAiChatsInputObjectSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutAiChatsInput, Prisma.UserUncheckedCreateWithoutAiChatsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();
export const UserUncheckedCreateWithoutAiChatsInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()]),
  username: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputObjectSchema).optional()
}).strict();


// File: UserCreateOrConnectWithoutAiChatsInput.schema.ts

export const UserCreateOrConnectWithoutAiChatsInputObjectSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutAiChatsInput, Prisma.UserCreateOrConnectWithoutAiChatsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => UserCreateWithoutAiChatsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutAiChatsInputObjectSchema)])
}).strict();
export const UserCreateOrConnectWithoutAiChatsInputObjectZodSchema = z.object({
  where: z.lazy(() => UserWhereUniqueInputObjectSchema),
  create: z.union([z.lazy(() => UserCreateWithoutAiChatsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutAiChatsInputObjectSchema)])
}).strict();


// File: OrganizationUpsertWithoutAiChatsInput.schema.ts

export const OrganizationUpsertWithoutAiChatsInputObjectSchema: z.ZodType<Prisma.OrganizationUpsertWithoutAiChatsInput, Prisma.OrganizationUpsertWithoutAiChatsInput> = z.object({
  update: z.union([z.lazy(() => OrganizationUpdateWithoutAiChatsInputObjectSchema), z.lazy(() => OrganizationUncheckedUpdateWithoutAiChatsInputObjectSchema)]),
  create: z.union([z.lazy(() => OrganizationCreateWithoutAiChatsInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutAiChatsInputObjectSchema)]),
  where: z.lazy(() => OrganizationWhereInputObjectSchema).optional()
}).strict();
export const OrganizationUpsertWithoutAiChatsInputObjectZodSchema = z.object({
  update: z.union([z.lazy(() => OrganizationUpdateWithoutAiChatsInputObjectSchema), z.lazy(() => OrganizationUncheckedUpdateWithoutAiChatsInputObjectSchema)]),
  create: z.union([z.lazy(() => OrganizationCreateWithoutAiChatsInputObjectSchema), z.lazy(() => OrganizationUncheckedCreateWithoutAiChatsInputObjectSchema)]),
  where: z.lazy(() => OrganizationWhereInputObjectSchema).optional()
}).strict();


// File: OrganizationUpdateToOneWithWhereWithoutAiChatsInput.schema.ts

export const OrganizationUpdateToOneWithWhereWithoutAiChatsInputObjectSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutAiChatsInput, Prisma.OrganizationUpdateToOneWithWhereWithoutAiChatsInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputObjectSchema).optional(),
  data: z.union([z.lazy(() => OrganizationUpdateWithoutAiChatsInputObjectSchema), z.lazy(() => OrganizationUncheckedUpdateWithoutAiChatsInputObjectSchema)])
}).strict();
export const OrganizationUpdateToOneWithWhereWithoutAiChatsInputObjectZodSchema = z.object({
  where: z.lazy(() => OrganizationWhereInputObjectSchema).optional(),
  data: z.union([z.lazy(() => OrganizationUpdateWithoutAiChatsInputObjectSchema), z.lazy(() => OrganizationUncheckedUpdateWithoutAiChatsInputObjectSchema)])
}).strict();


// File: OrganizationUpdateWithoutAiChatsInput.schema.ts

export const OrganizationUpdateWithoutAiChatsInputObjectSchema: z.ZodType<Prisma.OrganizationUpdateWithoutAiChatsInput, Prisma.OrganizationUpdateWithoutAiChatsInput> = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  slug: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  logo: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  metadata: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputObjectSchema).optional()
}).strict();
export const OrganizationUpdateWithoutAiChatsInputObjectZodSchema = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  slug: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  logo: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  metadata: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutOrganizationNestedInputObjectSchema).optional()
}).strict();


// File: OrganizationUncheckedUpdateWithoutAiChatsInput.schema.ts

export const OrganizationUncheckedUpdateWithoutAiChatsInputObjectSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutAiChatsInput, Prisma.OrganizationUncheckedUpdateWithoutAiChatsInput> = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  slug: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  logo: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  metadata: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional()
}).strict();
export const OrganizationUncheckedUpdateWithoutAiChatsInputObjectZodSchema = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  slug: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  logo: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  metadata: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutOrganizationNestedInputObjectSchema).optional()
}).strict();


// File: UserUpsertWithoutAiChatsInput.schema.ts

export const UserUpsertWithoutAiChatsInputObjectSchema: z.ZodType<Prisma.UserUpsertWithoutAiChatsInput, Prisma.UserUpsertWithoutAiChatsInput> = z.object({
  update: z.union([z.lazy(() => UserUpdateWithoutAiChatsInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutAiChatsInputObjectSchema)]),
  create: z.union([z.lazy(() => UserCreateWithoutAiChatsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutAiChatsInputObjectSchema)]),
  where: z.lazy(() => UserWhereInputObjectSchema).optional()
}).strict();
export const UserUpsertWithoutAiChatsInputObjectZodSchema = z.object({
  update: z.union([z.lazy(() => UserUpdateWithoutAiChatsInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutAiChatsInputObjectSchema)]),
  create: z.union([z.lazy(() => UserCreateWithoutAiChatsInputObjectSchema), z.lazy(() => UserUncheckedCreateWithoutAiChatsInputObjectSchema)]),
  where: z.lazy(() => UserWhereInputObjectSchema).optional()
}).strict();


// File: UserUpdateToOneWithWhereWithoutAiChatsInput.schema.ts

export const UserUpdateToOneWithWhereWithoutAiChatsInputObjectSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutAiChatsInput, Prisma.UserUpdateToOneWithWhereWithoutAiChatsInput> = z.object({
  where: z.lazy(() => UserWhereInputObjectSchema).optional(),
  data: z.union([z.lazy(() => UserUpdateWithoutAiChatsInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutAiChatsInputObjectSchema)])
}).strict();
export const UserUpdateToOneWithWhereWithoutAiChatsInputObjectZodSchema = z.object({
  where: z.lazy(() => UserWhereInputObjectSchema).optional(),
  data: z.union([z.lazy(() => UserUpdateWithoutAiChatsInputObjectSchema), z.lazy(() => UserUncheckedUpdateWithoutAiChatsInputObjectSchema)])
}).strict();


// File: UserUpdateWithoutAiChatsInput.schema.ts

export const UserUpdateWithoutAiChatsInputObjectSchema: z.ZodType<Prisma.UserUpdateWithoutAiChatsInput, Prisma.UserUpdateWithoutAiChatsInput> = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();
export const UserUpdateWithoutAiChatsInputObjectZodSchema = z.object({
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();


// File: UserUncheckedUpdateWithoutAiChatsInput.schema.ts

export const UserUncheckedUpdateWithoutAiChatsInputObjectSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutAiChatsInput, Prisma.UserUncheckedUpdateWithoutAiChatsInput> = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  updatedAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();
export const UserUncheckedUpdateWithoutAiChatsInputObjectZodSchema = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  emailVerified: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  image: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  updatedAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  username: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banned: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banReason: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  banExpires: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  onboardingComplete: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  paymentsCustomerId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  locale: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  twoFactorEnabled: z.union([z.boolean(), z.lazy(() => NullableBoolFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  passkeys: z.lazy(() => PasskeyUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  purchases: z.lazy(() => PurchaseUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputObjectSchema).optional()
}).strict();


// File: SessionCreateManyUserInput.schema.ts


export const SessionCreateManyUserInputObjectSchema: z.ZodType<Prisma.SessionCreateManyUserInput, Prisma.SessionCreateManyUserInput> = z.object({
  id: z.string().optional(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  token: z.string(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()])
}).strict();
export const SessionCreateManyUserInputObjectZodSchema = z.object({
  id: z.string().optional(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  token: z.string(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()])
}).strict();


// File: AccountCreateManyUserInput.schema.ts


export const AccountCreateManyUserInputObjectSchema: z.ZodType<Prisma.AccountCreateManyUserInput, Prisma.AccountCreateManyUserInput> = z.object({
  id: z.string().optional(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  expiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  password: z.string().optional().nullable(),
  accessTokenExpiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  scope: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()])
}).strict();
export const AccountCreateManyUserInputObjectZodSchema = z.object({
  id: z.string().optional(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  expiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  password: z.string().optional().nullable(),
  accessTokenExpiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.date(), z.iso.datetime()]).optional().nullable(),
  scope: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]),
  updatedAt: z.union([z.date(), z.iso.datetime()])
}).strict();


// File: PasskeyCreateManyUserInput.schema.ts


export const PasskeyCreateManyUserInputObjectSchema: z.ZodType<Prisma.PasskeyCreateManyUserInput, Prisma.PasskeyCreateManyUserInput> = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  publicKey: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional().nullable()
}).strict();
export const PasskeyCreateManyUserInputObjectZodSchema = z.object({
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  publicKey: z.string(),
  credentialID: z.string(),
  counter: z.number().int(),
  deviceType: z.string(),
  backedUp: z.boolean(),
  transports: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional().nullable()
}).strict();


// File: InvitationCreateManyUserInput.schema.ts


export const InvitationCreateManyUserInputObjectSchema: z.ZodType<Prisma.InvitationCreateManyUserInput, Prisma.InvitationCreateManyUserInput> = z.object({
  id: z.string().optional(),
  organizationId: z.string(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.union([z.date(), z.iso.datetime()])
}).strict();
export const InvitationCreateManyUserInputObjectZodSchema = z.object({
  id: z.string().optional(),
  organizationId: z.string(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.union([z.date(), z.iso.datetime()])
}).strict();


// File: PurchaseCreateManyUserInput.schema.ts

export const PurchaseCreateManyUserInputObjectSchema: z.ZodType<Prisma.PurchaseCreateManyUserInput, Prisma.PurchaseCreateManyUserInput> = z.object({
  id: z.string().optional(),
  organizationId: z.string().optional().nullable(),
  type: PurchaseTypeSchema,
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional()
}).strict();
export const PurchaseCreateManyUserInputObjectZodSchema = z.object({
  id: z.string().optional(),
  organizationId: z.string().optional().nullable(),
  type: PurchaseTypeSchema,
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional()
}).strict();


// File: MemberCreateManyUserInput.schema.ts


export const MemberCreateManyUserInputObjectSchema: z.ZodType<Prisma.MemberCreateManyUserInput, Prisma.MemberCreateManyUserInput> = z.object({
  id: z.string().optional(),
  organizationId: z.string(),
  role: z.string(),
  createdAt: z.union([z.date(), z.iso.datetime()])
}).strict();
export const MemberCreateManyUserInputObjectZodSchema = z.object({
  id: z.string().optional(),
  organizationId: z.string(),
  role: z.string(),
  createdAt: z.union([z.date(), z.iso.datetime()])
}).strict();


// File: TwoFactorCreateManyUserInput.schema.ts


export const TwoFactorCreateManyUserInputObjectSchema: z.ZodType<Prisma.TwoFactorCreateManyUserInput, Prisma.TwoFactorCreateManyUserInput> = z.object({
  id: z.string().optional(),
  secret: z.string(),
  backupCodes: z.string()
}).strict();
export const TwoFactorCreateManyUserInputObjectZodSchema = z.object({
  id: z.string().optional(),
  secret: z.string(),
  backupCodes: z.string()
}).strict();


// File: AiChatCreateManyUserInput.schema.ts


const literalSchema = z.union([z.string(), z.number(), z.boolean()]);
const jsonSchema = z.lazy(() =>
  z.union([literalSchema, z.array(jsonSchema.nullable()), z.record(z.string(), jsonSchema.nullable())])
);

export const AiChatCreateManyUserInputObjectSchema: z.ZodType<Prisma.AiChatCreateManyUserInput, Prisma.AiChatCreateManyUserInput> = z.object({
  id: z.string().optional(),
  organizationId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional()
}).strict();
export const AiChatCreateManyUserInputObjectZodSchema = z.object({
  id: z.string().optional(),
  organizationId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional()
}).strict();


// File: SessionUpdateWithoutUserInput.schema.ts

export const SessionUpdateWithoutUserInputObjectSchema: z.ZodType<Prisma.SessionUpdateWithoutUserInput, Prisma.SessionUpdateWithoutUserInput> = z.object({
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  ipAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  userAgent: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  impersonatedBy: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  activeOrganizationId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  token: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const SessionUpdateWithoutUserInputObjectZodSchema = z.object({
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  ipAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  userAgent: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  impersonatedBy: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  activeOrganizationId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  token: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: SessionUncheckedUpdateWithoutUserInput.schema.ts

export const SessionUncheckedUpdateWithoutUserInputObjectSchema: z.ZodType<Prisma.SessionUncheckedUpdateWithoutUserInput, Prisma.SessionUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  ipAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  userAgent: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  impersonatedBy: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  activeOrganizationId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  token: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  updatedAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const SessionUncheckedUpdateWithoutUserInputObjectZodSchema = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  ipAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  userAgent: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  impersonatedBy: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  activeOrganizationId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  token: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  updatedAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: SessionUncheckedUpdateManyWithoutUserInput.schema.ts

export const SessionUncheckedUpdateManyWithoutUserInputObjectSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyWithoutUserInput, Prisma.SessionUncheckedUpdateManyWithoutUserInput> = z.object({
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  ipAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  userAgent: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  impersonatedBy: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  activeOrganizationId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  token: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const SessionUncheckedUpdateManyWithoutUserInputObjectZodSchema = z.object({
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  ipAddress: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  userAgent: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  impersonatedBy: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  activeOrganizationId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  token: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: AccountUpdateWithoutUserInput.schema.ts

export const AccountUpdateWithoutUserInputObjectSchema: z.ZodType<Prisma.AccountUpdateWithoutUserInput, Prisma.AccountUpdateWithoutUserInput> = z.object({
  accountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  providerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  accessToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  refreshToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  idToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  password: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  scope: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();
export const AccountUpdateWithoutUserInputObjectZodSchema = z.object({
  accountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  providerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  accessToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  refreshToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  idToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  password: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  scope: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();


// File: AccountUncheckedUpdateWithoutUserInput.schema.ts

export const AccountUncheckedUpdateWithoutUserInputObjectSchema: z.ZodType<Prisma.AccountUncheckedUpdateWithoutUserInput, Prisma.AccountUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  accountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  providerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  accessToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  refreshToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  idToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  password: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  scope: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  updatedAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const AccountUncheckedUpdateWithoutUserInputObjectZodSchema = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  accountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  providerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  accessToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  refreshToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  idToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  password: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  scope: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  updatedAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: AccountUncheckedUpdateManyWithoutUserInput.schema.ts

export const AccountUncheckedUpdateManyWithoutUserInputObjectSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyWithoutUserInput, Prisma.AccountUncheckedUpdateManyWithoutUserInput> = z.object({
  accountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  providerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  accessToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  refreshToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  idToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  password: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  scope: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();
export const AccountUncheckedUpdateManyWithoutUserInputObjectZodSchema = z.object({
  accountId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  providerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  accessToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  refreshToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  idToken: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  password: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  accessTokenExpiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  refreshTokenExpiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  scope: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();


// File: PasskeyUpdateWithoutUserInput.schema.ts

export const PasskeyUpdateWithoutUserInputObjectSchema: z.ZodType<Prisma.PasskeyUpdateWithoutUserInput, Prisma.PasskeyUpdateWithoutUserInput> = z.object({
  name: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  publicKey: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  credentialID: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  counter: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputObjectSchema)]).optional(),
  deviceType: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  backedUp: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  transports: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();
export const PasskeyUpdateWithoutUserInputObjectZodSchema = z.object({
  name: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  publicKey: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  credentialID: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  counter: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputObjectSchema)]).optional(),
  deviceType: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  backedUp: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  transports: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();


// File: PasskeyUncheckedUpdateWithoutUserInput.schema.ts

export const PasskeyUncheckedUpdateWithoutUserInputObjectSchema: z.ZodType<Prisma.PasskeyUncheckedUpdateWithoutUserInput, Prisma.PasskeyUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  publicKey: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  credentialID: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  counter: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputObjectSchema)]).optional(),
  deviceType: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  backedUp: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  transports: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();
export const PasskeyUncheckedUpdateWithoutUserInputObjectZodSchema = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  name: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  publicKey: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  credentialID: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  counter: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputObjectSchema)]).optional(),
  deviceType: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  backedUp: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  transports: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();


// File: PasskeyUncheckedUpdateManyWithoutUserInput.schema.ts

export const PasskeyUncheckedUpdateManyWithoutUserInputObjectSchema: z.ZodType<Prisma.PasskeyUncheckedUpdateManyWithoutUserInput, Prisma.PasskeyUncheckedUpdateManyWithoutUserInput> = z.object({
  name: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  publicKey: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  credentialID: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  counter: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputObjectSchema)]).optional(),
  deviceType: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  backedUp: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  transports: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();
export const PasskeyUncheckedUpdateManyWithoutUserInputObjectZodSchema = z.object({
  name: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  publicKey: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  credentialID: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  counter: z.union([z.number().int(), z.lazy(() => IntFieldUpdateOperationsInputObjectSchema)]).optional(),
  deviceType: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  backedUp: z.union([z.boolean(), z.lazy(() => BoolFieldUpdateOperationsInputObjectSchema)]).optional(),
  transports: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();


// File: InvitationUpdateWithoutUserInput.schema.ts

export const InvitationUpdateWithoutUserInputObjectSchema: z.ZodType<Prisma.InvitationUpdateWithoutUserInput, Prisma.InvitationUpdateWithoutUserInput> = z.object({
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutInvitationsNestedInputObjectSchema).optional()
}).strict();
export const InvitationUpdateWithoutUserInputObjectZodSchema = z.object({
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutInvitationsNestedInputObjectSchema).optional()
}).strict();


// File: InvitationUncheckedUpdateWithoutUserInput.schema.ts

export const InvitationUncheckedUpdateWithoutUserInputObjectSchema: z.ZodType<Prisma.InvitationUncheckedUpdateWithoutUserInput, Prisma.InvitationUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  organizationId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const InvitationUncheckedUpdateWithoutUserInputObjectZodSchema = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  organizationId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: InvitationUncheckedUpdateManyWithoutUserInput.schema.ts

export const InvitationUncheckedUpdateManyWithoutUserInputObjectSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyWithoutUserInput, Prisma.InvitationUncheckedUpdateManyWithoutUserInput> = z.object({
  organizationId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const InvitationUncheckedUpdateManyWithoutUserInputObjectZodSchema = z.object({
  organizationId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: PurchaseUpdateWithoutUserInput.schema.ts

export const PurchaseUpdateWithoutUserInputObjectSchema: z.ZodType<Prisma.PurchaseUpdateWithoutUserInput, Prisma.PurchaseUpdateWithoutUserInput> = z.object({
  type: z.union([PurchaseTypeSchema, z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputObjectSchema)]).optional(),
  customerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  subscriptionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  productId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  status: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutPurchasesNestedInputObjectSchema).optional()
}).strict();
export const PurchaseUpdateWithoutUserInputObjectZodSchema = z.object({
  type: z.union([PurchaseTypeSchema, z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputObjectSchema)]).optional(),
  customerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  subscriptionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  productId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  status: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutPurchasesNestedInputObjectSchema).optional()
}).strict();


// File: PurchaseUncheckedUpdateWithoutUserInput.schema.ts

export const PurchaseUncheckedUpdateWithoutUserInputObjectSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateWithoutUserInput, Prisma.PurchaseUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  organizationId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  type: z.union([PurchaseTypeSchema, z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputObjectSchema)]).optional(),
  customerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  subscriptionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  productId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  status: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  updatedAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const PurchaseUncheckedUpdateWithoutUserInputObjectZodSchema = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  organizationId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  type: z.union([PurchaseTypeSchema, z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputObjectSchema)]).optional(),
  customerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  subscriptionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  productId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  status: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  updatedAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: PurchaseUncheckedUpdateManyWithoutUserInput.schema.ts

export const PurchaseUncheckedUpdateManyWithoutUserInputObjectSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateManyWithoutUserInput, Prisma.PurchaseUncheckedUpdateManyWithoutUserInput> = z.object({
  organizationId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  type: z.union([PurchaseTypeSchema, z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputObjectSchema)]).optional(),
  customerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  subscriptionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  productId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  status: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();
export const PurchaseUncheckedUpdateManyWithoutUserInputObjectZodSchema = z.object({
  organizationId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  type: z.union([PurchaseTypeSchema, z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputObjectSchema)]).optional(),
  customerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  subscriptionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  productId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  status: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();


// File: MemberUpdateWithoutUserInput.schema.ts

export const MemberUpdateWithoutUserInputObjectSchema: z.ZodType<Prisma.MemberUpdateWithoutUserInput, Prisma.MemberUpdateWithoutUserInput> = z.object({
  role: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutMembersNestedInputObjectSchema).optional()
}).strict();
export const MemberUpdateWithoutUserInputObjectZodSchema = z.object({
  role: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutMembersNestedInputObjectSchema).optional()
}).strict();


// File: MemberUncheckedUpdateWithoutUserInput.schema.ts

export const MemberUncheckedUpdateWithoutUserInputObjectSchema: z.ZodType<Prisma.MemberUncheckedUpdateWithoutUserInput, Prisma.MemberUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  organizationId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const MemberUncheckedUpdateWithoutUserInputObjectZodSchema = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  organizationId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: MemberUncheckedUpdateManyWithoutUserInput.schema.ts

export const MemberUncheckedUpdateManyWithoutUserInputObjectSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyWithoutUserInput, Prisma.MemberUncheckedUpdateManyWithoutUserInput> = z.object({
  organizationId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const MemberUncheckedUpdateManyWithoutUserInputObjectZodSchema = z.object({
  organizationId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: TwoFactorUpdateWithoutUserInput.schema.ts

export const TwoFactorUpdateWithoutUserInputObjectSchema: z.ZodType<Prisma.TwoFactorUpdateWithoutUserInput, Prisma.TwoFactorUpdateWithoutUserInput> = z.object({
  secret: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  backupCodes: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const TwoFactorUpdateWithoutUserInputObjectZodSchema = z.object({
  secret: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  backupCodes: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: TwoFactorUncheckedUpdateWithoutUserInput.schema.ts

export const TwoFactorUncheckedUpdateWithoutUserInputObjectSchema: z.ZodType<Prisma.TwoFactorUncheckedUpdateWithoutUserInput, Prisma.TwoFactorUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  secret: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  backupCodes: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const TwoFactorUncheckedUpdateWithoutUserInputObjectZodSchema = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  secret: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  backupCodes: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: TwoFactorUncheckedUpdateManyWithoutUserInput.schema.ts

export const TwoFactorUncheckedUpdateManyWithoutUserInputObjectSchema: z.ZodType<Prisma.TwoFactorUncheckedUpdateManyWithoutUserInput, Prisma.TwoFactorUncheckedUpdateManyWithoutUserInput> = z.object({
  secret: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  backupCodes: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const TwoFactorUncheckedUpdateManyWithoutUserInputObjectZodSchema = z.object({
  secret: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  backupCodes: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: AiChatUpdateWithoutUserInput.schema.ts


const literalSchema = z.union([z.string(), z.number(), z.boolean()]);
const jsonSchema = z.lazy(() =>
  z.union([literalSchema, z.array(jsonSchema.nullable()), z.record(z.string(), jsonSchema.nullable())])
);

export const AiChatUpdateWithoutUserInputObjectSchema: z.ZodType<Prisma.AiChatUpdateWithoutUserInput, Prisma.AiChatUpdateWithoutUserInput> = z.object({
  title: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutAiChatsNestedInputObjectSchema).optional()
}).strict();
export const AiChatUpdateWithoutUserInputObjectZodSchema = z.object({
  title: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutAiChatsNestedInputObjectSchema).optional()
}).strict();


// File: AiChatUncheckedUpdateWithoutUserInput.schema.ts


const literalSchema = z.union([z.string(), z.number(), z.boolean()]);
const jsonSchema = z.lazy(() =>
  z.union([literalSchema, z.array(jsonSchema.nullable()), z.record(z.string(), jsonSchema.nullable())])
);

export const AiChatUncheckedUpdateWithoutUserInputObjectSchema: z.ZodType<Prisma.AiChatUncheckedUpdateWithoutUserInput, Prisma.AiChatUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  organizationId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  title: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  updatedAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const AiChatUncheckedUpdateWithoutUserInputObjectZodSchema = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  organizationId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  title: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  updatedAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: AiChatUncheckedUpdateManyWithoutUserInput.schema.ts


const literalSchema = z.union([z.string(), z.number(), z.boolean()]);
const jsonSchema = z.lazy(() =>
  z.union([literalSchema, z.array(jsonSchema.nullable()), z.record(z.string(), jsonSchema.nullable())])
);

export const AiChatUncheckedUpdateManyWithoutUserInputObjectSchema: z.ZodType<Prisma.AiChatUncheckedUpdateManyWithoutUserInput, Prisma.AiChatUncheckedUpdateManyWithoutUserInput> = z.object({
  organizationId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  title: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional()
}).strict();
export const AiChatUncheckedUpdateManyWithoutUserInputObjectZodSchema = z.object({
  organizationId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  title: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional()
}).strict();


// File: MemberCreateManyOrganizationInput.schema.ts


export const MemberCreateManyOrganizationInputObjectSchema: z.ZodType<Prisma.MemberCreateManyOrganizationInput, Prisma.MemberCreateManyOrganizationInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  role: z.string(),
  createdAt: z.union([z.date(), z.iso.datetime()])
}).strict();
export const MemberCreateManyOrganizationInputObjectZodSchema = z.object({
  id: z.string().optional(),
  userId: z.string(),
  role: z.string(),
  createdAt: z.union([z.date(), z.iso.datetime()])
}).strict();


// File: InvitationCreateManyOrganizationInput.schema.ts


export const InvitationCreateManyOrganizationInputObjectSchema: z.ZodType<Prisma.InvitationCreateManyOrganizationInput, Prisma.InvitationCreateManyOrganizationInput> = z.object({
  id: z.string().optional(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  inviterId: z.string()
}).strict();
export const InvitationCreateManyOrganizationInputObjectZodSchema = z.object({
  id: z.string().optional(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.union([z.date(), z.iso.datetime()]),
  inviterId: z.string()
}).strict();


// File: PurchaseCreateManyOrganizationInput.schema.ts

export const PurchaseCreateManyOrganizationInputObjectSchema: z.ZodType<Prisma.PurchaseCreateManyOrganizationInput, Prisma.PurchaseCreateManyOrganizationInput> = z.object({
  id: z.string().optional(),
  userId: z.string().optional().nullable(),
  type: PurchaseTypeSchema,
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional()
}).strict();
export const PurchaseCreateManyOrganizationInputObjectZodSchema = z.object({
  id: z.string().optional(),
  userId: z.string().optional().nullable(),
  type: PurchaseTypeSchema,
  customerId: z.string(),
  subscriptionId: z.string().optional().nullable(),
  productId: z.string(),
  status: z.string().optional().nullable(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional()
}).strict();


// File: AiChatCreateManyOrganizationInput.schema.ts


const literalSchema = z.union([z.string(), z.number(), z.boolean()]);
const jsonSchema = z.lazy(() =>
  z.union([literalSchema, z.array(jsonSchema.nullable()), z.record(z.string(), jsonSchema.nullable())])
);

export const AiChatCreateManyOrganizationInputObjectSchema: z.ZodType<Prisma.AiChatCreateManyOrganizationInput, Prisma.AiChatCreateManyOrganizationInput> = z.object({
  id: z.string().optional(),
  userId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional()
}).strict();
export const AiChatCreateManyOrganizationInputObjectZodSchema = z.object({
  id: z.string().optional(),
  userId: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional(),
  createdAt: z.union([z.date(), z.iso.datetime()]).optional(),
  updatedAt: z.union([z.date(), z.iso.datetime()]).optional()
}).strict();


// File: MemberUpdateWithoutOrganizationInput.schema.ts

export const MemberUpdateWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.MemberUpdateWithoutOrganizationInput, Prisma.MemberUpdateWithoutOrganizationInput> = z.object({
  role: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutMembersNestedInputObjectSchema).optional()
}).strict();
export const MemberUpdateWithoutOrganizationInputObjectZodSchema = z.object({
  role: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutMembersNestedInputObjectSchema).optional()
}).strict();


// File: MemberUncheckedUpdateWithoutOrganizationInput.schema.ts

export const MemberUncheckedUpdateWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.MemberUncheckedUpdateWithoutOrganizationInput, Prisma.MemberUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const MemberUncheckedUpdateWithoutOrganizationInputObjectZodSchema = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: MemberUncheckedUpdateManyWithoutOrganizationInput.schema.ts

export const MemberUncheckedUpdateManyWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyWithoutOrganizationInput, Prisma.MemberUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const MemberUncheckedUpdateManyWithoutOrganizationInputObjectZodSchema = z.object({
  userId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: InvitationUpdateWithoutOrganizationInput.schema.ts

export const InvitationUpdateWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.InvitationUpdateWithoutOrganizationInput, Prisma.InvitationUpdateWithoutOrganizationInput> = z.object({
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutInvitationsNestedInputObjectSchema).optional()
}).strict();
export const InvitationUpdateWithoutOrganizationInputObjectZodSchema = z.object({
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutInvitationsNestedInputObjectSchema).optional()
}).strict();


// File: InvitationUncheckedUpdateWithoutOrganizationInput.schema.ts

export const InvitationUncheckedUpdateWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.InvitationUncheckedUpdateWithoutOrganizationInput, Prisma.InvitationUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  inviterId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const InvitationUncheckedUpdateWithoutOrganizationInputObjectZodSchema = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  inviterId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: InvitationUncheckedUpdateManyWithoutOrganizationInput.schema.ts

export const InvitationUncheckedUpdateManyWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyWithoutOrganizationInput, Prisma.InvitationUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  inviterId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const InvitationUncheckedUpdateManyWithoutOrganizationInputObjectZodSchema = z.object({
  email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  role: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  expiresAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  inviterId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: PurchaseUpdateWithoutOrganizationInput.schema.ts

export const PurchaseUpdateWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.PurchaseUpdateWithoutOrganizationInput, Prisma.PurchaseUpdateWithoutOrganizationInput> = z.object({
  type: z.union([PurchaseTypeSchema, z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputObjectSchema)]).optional(),
  customerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  subscriptionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  productId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  status: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  user: z.lazy(() => UserUpdateOneWithoutPurchasesNestedInputObjectSchema).optional()
}).strict();
export const PurchaseUpdateWithoutOrganizationInputObjectZodSchema = z.object({
  type: z.union([PurchaseTypeSchema, z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputObjectSchema)]).optional(),
  customerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  subscriptionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  productId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  status: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  user: z.lazy(() => UserUpdateOneWithoutPurchasesNestedInputObjectSchema).optional()
}).strict();


// File: PurchaseUncheckedUpdateWithoutOrganizationInput.schema.ts

export const PurchaseUncheckedUpdateWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateWithoutOrganizationInput, Prisma.PurchaseUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  type: z.union([PurchaseTypeSchema, z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputObjectSchema)]).optional(),
  customerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  subscriptionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  productId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  status: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  updatedAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const PurchaseUncheckedUpdateWithoutOrganizationInputObjectZodSchema = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  type: z.union([PurchaseTypeSchema, z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputObjectSchema)]).optional(),
  customerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  subscriptionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  productId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  status: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  updatedAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: PurchaseUncheckedUpdateManyWithoutOrganizationInput.schema.ts

export const PurchaseUncheckedUpdateManyWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.PurchaseUncheckedUpdateManyWithoutOrganizationInput, Prisma.PurchaseUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  userId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  type: z.union([PurchaseTypeSchema, z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputObjectSchema)]).optional(),
  customerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  subscriptionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  productId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  status: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();
export const PurchaseUncheckedUpdateManyWithoutOrganizationInputObjectZodSchema = z.object({
  userId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  type: z.union([PurchaseTypeSchema, z.lazy(() => EnumPurchaseTypeFieldUpdateOperationsInputObjectSchema)]).optional(),
  customerId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  subscriptionId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  productId: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  status: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable()
}).strict();


// File: AiChatUpdateWithoutOrganizationInput.schema.ts


const literalSchema = z.union([z.string(), z.number(), z.boolean()]);
const jsonSchema = z.lazy(() =>
  z.union([literalSchema, z.array(jsonSchema.nullable()), z.record(z.string(), jsonSchema.nullable())])
);

export const AiChatUpdateWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.AiChatUpdateWithoutOrganizationInput, Prisma.AiChatUpdateWithoutOrganizationInput> = z.object({
  title: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional(),
  user: z.lazy(() => UserUpdateOneWithoutAiChatsNestedInputObjectSchema).optional()
}).strict();
export const AiChatUpdateWithoutOrganizationInputObjectZodSchema = z.object({
  title: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional(),
  user: z.lazy(() => UserUpdateOneWithoutAiChatsNestedInputObjectSchema).optional()
}).strict();


// File: AiChatUncheckedUpdateWithoutOrganizationInput.schema.ts


const literalSchema = z.union([z.string(), z.number(), z.boolean()]);
const jsonSchema = z.lazy(() =>
  z.union([literalSchema, z.array(jsonSchema.nullable()), z.record(z.string(), jsonSchema.nullable())])
);

export const AiChatUncheckedUpdateWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.AiChatUncheckedUpdateWithoutOrganizationInput, Prisma.AiChatUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  title: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  updatedAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();
export const AiChatUncheckedUpdateWithoutOrganizationInputObjectZodSchema = z.object({
  id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputObjectSchema)]).optional(),
  userId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  title: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional(),
  createdAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional(),
  updatedAt: z.union([z.union([z.date(), z.iso.datetime()]), z.lazy(() => DateTimeFieldUpdateOperationsInputObjectSchema)]).optional()
}).strict();


// File: AiChatUncheckedUpdateManyWithoutOrganizationInput.schema.ts


const literalSchema = z.union([z.string(), z.number(), z.boolean()]);
const jsonSchema = z.lazy(() =>
  z.union([literalSchema, z.array(jsonSchema.nullable()), z.record(z.string(), jsonSchema.nullable())])
);

export const AiChatUncheckedUpdateManyWithoutOrganizationInputObjectSchema: z.ZodType<Prisma.AiChatUncheckedUpdateManyWithoutOrganizationInput, Prisma.AiChatUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  userId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  title: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional()
}).strict();
export const AiChatUncheckedUpdateManyWithoutOrganizationInputObjectZodSchema = z.object({
  userId: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  title: z.union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputObjectSchema)]).optional().nullable(),
  messages: z.union([JsonNullValueInputSchema, jsonSchema]).optional()
}).strict();


// File: UserCountAggregateInput.schema.ts


export const UserCountAggregateInputObjectSchema: z.ZodType<Prisma.UserCountAggregateInputType, Prisma.UserCountAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  name: z.literal(true).optional(),
  email: z.literal(true).optional(),
  emailVerified: z.literal(true).optional(),
  image: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional(),
  username: z.literal(true).optional(),
  role: z.literal(true).optional(),
  banned: z.literal(true).optional(),
  banReason: z.literal(true).optional(),
  banExpires: z.literal(true).optional(),
  onboardingComplete: z.literal(true).optional(),
  paymentsCustomerId: z.literal(true).optional(),
  locale: z.literal(true).optional(),
  twoFactorEnabled: z.literal(true).optional(),
  _all: z.literal(true).optional()
}).strict();
export const UserCountAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  name: z.literal(true).optional(),
  email: z.literal(true).optional(),
  emailVerified: z.literal(true).optional(),
  image: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional(),
  username: z.literal(true).optional(),
  role: z.literal(true).optional(),
  banned: z.literal(true).optional(),
  banReason: z.literal(true).optional(),
  banExpires: z.literal(true).optional(),
  onboardingComplete: z.literal(true).optional(),
  paymentsCustomerId: z.literal(true).optional(),
  locale: z.literal(true).optional(),
  twoFactorEnabled: z.literal(true).optional(),
  _all: z.literal(true).optional()
}).strict();


// File: UserMinAggregateInput.schema.ts


export const UserMinAggregateInputObjectSchema: z.ZodType<Prisma.UserMinAggregateInputType, Prisma.UserMinAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  name: z.literal(true).optional(),
  email: z.literal(true).optional(),
  emailVerified: z.literal(true).optional(),
  image: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional(),
  username: z.literal(true).optional(),
  role: z.literal(true).optional(),
  banned: z.literal(true).optional(),
  banReason: z.literal(true).optional(),
  banExpires: z.literal(true).optional(),
  onboardingComplete: z.literal(true).optional(),
  paymentsCustomerId: z.literal(true).optional(),
  locale: z.literal(true).optional(),
  twoFactorEnabled: z.literal(true).optional()
}).strict();
export const UserMinAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  name: z.literal(true).optional(),
  email: z.literal(true).optional(),
  emailVerified: z.literal(true).optional(),
  image: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional(),
  username: z.literal(true).optional(),
  role: z.literal(true).optional(),
  banned: z.literal(true).optional(),
  banReason: z.literal(true).optional(),
  banExpires: z.literal(true).optional(),
  onboardingComplete: z.literal(true).optional(),
  paymentsCustomerId: z.literal(true).optional(),
  locale: z.literal(true).optional(),
  twoFactorEnabled: z.literal(true).optional()
}).strict();


// File: UserMaxAggregateInput.schema.ts


export const UserMaxAggregateInputObjectSchema: z.ZodType<Prisma.UserMaxAggregateInputType, Prisma.UserMaxAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  name: z.literal(true).optional(),
  email: z.literal(true).optional(),
  emailVerified: z.literal(true).optional(),
  image: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional(),
  username: z.literal(true).optional(),
  role: z.literal(true).optional(),
  banned: z.literal(true).optional(),
  banReason: z.literal(true).optional(),
  banExpires: z.literal(true).optional(),
  onboardingComplete: z.literal(true).optional(),
  paymentsCustomerId: z.literal(true).optional(),
  locale: z.literal(true).optional(),
  twoFactorEnabled: z.literal(true).optional()
}).strict();
export const UserMaxAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  name: z.literal(true).optional(),
  email: z.literal(true).optional(),
  emailVerified: z.literal(true).optional(),
  image: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional(),
  username: z.literal(true).optional(),
  role: z.literal(true).optional(),
  banned: z.literal(true).optional(),
  banReason: z.literal(true).optional(),
  banExpires: z.literal(true).optional(),
  onboardingComplete: z.literal(true).optional(),
  paymentsCustomerId: z.literal(true).optional(),
  locale: z.literal(true).optional(),
  twoFactorEnabled: z.literal(true).optional()
}).strict();


// File: SessionCountAggregateInput.schema.ts


export const SessionCountAggregateInputObjectSchema: z.ZodType<Prisma.SessionCountAggregateInputType, Prisma.SessionCountAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  expiresAt: z.literal(true).optional(),
  ipAddress: z.literal(true).optional(),
  userAgent: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  impersonatedBy: z.literal(true).optional(),
  activeOrganizationId: z.literal(true).optional(),
  token: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional(),
  _all: z.literal(true).optional()
}).strict();
export const SessionCountAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  expiresAt: z.literal(true).optional(),
  ipAddress: z.literal(true).optional(),
  userAgent: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  impersonatedBy: z.literal(true).optional(),
  activeOrganizationId: z.literal(true).optional(),
  token: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional(),
  _all: z.literal(true).optional()
}).strict();


// File: SessionMinAggregateInput.schema.ts


export const SessionMinAggregateInputObjectSchema: z.ZodType<Prisma.SessionMinAggregateInputType, Prisma.SessionMinAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  expiresAt: z.literal(true).optional(),
  ipAddress: z.literal(true).optional(),
  userAgent: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  impersonatedBy: z.literal(true).optional(),
  activeOrganizationId: z.literal(true).optional(),
  token: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional()
}).strict();
export const SessionMinAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  expiresAt: z.literal(true).optional(),
  ipAddress: z.literal(true).optional(),
  userAgent: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  impersonatedBy: z.literal(true).optional(),
  activeOrganizationId: z.literal(true).optional(),
  token: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional()
}).strict();


// File: SessionMaxAggregateInput.schema.ts


export const SessionMaxAggregateInputObjectSchema: z.ZodType<Prisma.SessionMaxAggregateInputType, Prisma.SessionMaxAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  expiresAt: z.literal(true).optional(),
  ipAddress: z.literal(true).optional(),
  userAgent: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  impersonatedBy: z.literal(true).optional(),
  activeOrganizationId: z.literal(true).optional(),
  token: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional()
}).strict();
export const SessionMaxAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  expiresAt: z.literal(true).optional(),
  ipAddress: z.literal(true).optional(),
  userAgent: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  impersonatedBy: z.literal(true).optional(),
  activeOrganizationId: z.literal(true).optional(),
  token: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional()
}).strict();


// File: AccountCountAggregateInput.schema.ts


export const AccountCountAggregateInputObjectSchema: z.ZodType<Prisma.AccountCountAggregateInputType, Prisma.AccountCountAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  accountId: z.literal(true).optional(),
  providerId: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  accessToken: z.literal(true).optional(),
  refreshToken: z.literal(true).optional(),
  idToken: z.literal(true).optional(),
  expiresAt: z.literal(true).optional(),
  password: z.literal(true).optional(),
  accessTokenExpiresAt: z.literal(true).optional(),
  refreshTokenExpiresAt: z.literal(true).optional(),
  scope: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional(),
  _all: z.literal(true).optional()
}).strict();
export const AccountCountAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  accountId: z.literal(true).optional(),
  providerId: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  accessToken: z.literal(true).optional(),
  refreshToken: z.literal(true).optional(),
  idToken: z.literal(true).optional(),
  expiresAt: z.literal(true).optional(),
  password: z.literal(true).optional(),
  accessTokenExpiresAt: z.literal(true).optional(),
  refreshTokenExpiresAt: z.literal(true).optional(),
  scope: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional(),
  _all: z.literal(true).optional()
}).strict();


// File: AccountMinAggregateInput.schema.ts


export const AccountMinAggregateInputObjectSchema: z.ZodType<Prisma.AccountMinAggregateInputType, Prisma.AccountMinAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  accountId: z.literal(true).optional(),
  providerId: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  accessToken: z.literal(true).optional(),
  refreshToken: z.literal(true).optional(),
  idToken: z.literal(true).optional(),
  expiresAt: z.literal(true).optional(),
  password: z.literal(true).optional(),
  accessTokenExpiresAt: z.literal(true).optional(),
  refreshTokenExpiresAt: z.literal(true).optional(),
  scope: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional()
}).strict();
export const AccountMinAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  accountId: z.literal(true).optional(),
  providerId: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  accessToken: z.literal(true).optional(),
  refreshToken: z.literal(true).optional(),
  idToken: z.literal(true).optional(),
  expiresAt: z.literal(true).optional(),
  password: z.literal(true).optional(),
  accessTokenExpiresAt: z.literal(true).optional(),
  refreshTokenExpiresAt: z.literal(true).optional(),
  scope: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional()
}).strict();


// File: AccountMaxAggregateInput.schema.ts


export const AccountMaxAggregateInputObjectSchema: z.ZodType<Prisma.AccountMaxAggregateInputType, Prisma.AccountMaxAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  accountId: z.literal(true).optional(),
  providerId: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  accessToken: z.literal(true).optional(),
  refreshToken: z.literal(true).optional(),
  idToken: z.literal(true).optional(),
  expiresAt: z.literal(true).optional(),
  password: z.literal(true).optional(),
  accessTokenExpiresAt: z.literal(true).optional(),
  refreshTokenExpiresAt: z.literal(true).optional(),
  scope: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional()
}).strict();
export const AccountMaxAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  accountId: z.literal(true).optional(),
  providerId: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  accessToken: z.literal(true).optional(),
  refreshToken: z.literal(true).optional(),
  idToken: z.literal(true).optional(),
  expiresAt: z.literal(true).optional(),
  password: z.literal(true).optional(),
  accessTokenExpiresAt: z.literal(true).optional(),
  refreshTokenExpiresAt: z.literal(true).optional(),
  scope: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional()
}).strict();


// File: VerificationCountAggregateInput.schema.ts


export const VerificationCountAggregateInputObjectSchema: z.ZodType<Prisma.VerificationCountAggregateInputType, Prisma.VerificationCountAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  identifier: z.literal(true).optional(),
  value: z.literal(true).optional(),
  expiresAt: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional(),
  _all: z.literal(true).optional()
}).strict();
export const VerificationCountAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  identifier: z.literal(true).optional(),
  value: z.literal(true).optional(),
  expiresAt: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional(),
  _all: z.literal(true).optional()
}).strict();


// File: VerificationMinAggregateInput.schema.ts


export const VerificationMinAggregateInputObjectSchema: z.ZodType<Prisma.VerificationMinAggregateInputType, Prisma.VerificationMinAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  identifier: z.literal(true).optional(),
  value: z.literal(true).optional(),
  expiresAt: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional()
}).strict();
export const VerificationMinAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  identifier: z.literal(true).optional(),
  value: z.literal(true).optional(),
  expiresAt: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional()
}).strict();


// File: VerificationMaxAggregateInput.schema.ts


export const VerificationMaxAggregateInputObjectSchema: z.ZodType<Prisma.VerificationMaxAggregateInputType, Prisma.VerificationMaxAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  identifier: z.literal(true).optional(),
  value: z.literal(true).optional(),
  expiresAt: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional()
}).strict();
export const VerificationMaxAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  identifier: z.literal(true).optional(),
  value: z.literal(true).optional(),
  expiresAt: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional()
}).strict();


// File: PasskeyCountAggregateInput.schema.ts


export const PasskeyCountAggregateInputObjectSchema: z.ZodType<Prisma.PasskeyCountAggregateInputType, Prisma.PasskeyCountAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  name: z.literal(true).optional(),
  publicKey: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  credentialID: z.literal(true).optional(),
  counter: z.literal(true).optional(),
  deviceType: z.literal(true).optional(),
  backedUp: z.literal(true).optional(),
  transports: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  _all: z.literal(true).optional()
}).strict();
export const PasskeyCountAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  name: z.literal(true).optional(),
  publicKey: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  credentialID: z.literal(true).optional(),
  counter: z.literal(true).optional(),
  deviceType: z.literal(true).optional(),
  backedUp: z.literal(true).optional(),
  transports: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  _all: z.literal(true).optional()
}).strict();


// File: PasskeyAvgAggregateInput.schema.ts


export const PasskeyAvgAggregateInputObjectSchema: z.ZodType<Prisma.PasskeyAvgAggregateInputType, Prisma.PasskeyAvgAggregateInputType> = z.object({
  counter: z.literal(true).optional()
}).strict();
export const PasskeyAvgAggregateInputObjectZodSchema = z.object({
  counter: z.literal(true).optional()
}).strict();


// File: PasskeySumAggregateInput.schema.ts


export const PasskeySumAggregateInputObjectSchema: z.ZodType<Prisma.PasskeySumAggregateInputType, Prisma.PasskeySumAggregateInputType> = z.object({
  counter: z.literal(true).optional()
}).strict();
export const PasskeySumAggregateInputObjectZodSchema = z.object({
  counter: z.literal(true).optional()
}).strict();


// File: PasskeyMinAggregateInput.schema.ts


export const PasskeyMinAggregateInputObjectSchema: z.ZodType<Prisma.PasskeyMinAggregateInputType, Prisma.PasskeyMinAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  name: z.literal(true).optional(),
  publicKey: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  credentialID: z.literal(true).optional(),
  counter: z.literal(true).optional(),
  deviceType: z.literal(true).optional(),
  backedUp: z.literal(true).optional(),
  transports: z.literal(true).optional(),
  createdAt: z.literal(true).optional()
}).strict();
export const PasskeyMinAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  name: z.literal(true).optional(),
  publicKey: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  credentialID: z.literal(true).optional(),
  counter: z.literal(true).optional(),
  deviceType: z.literal(true).optional(),
  backedUp: z.literal(true).optional(),
  transports: z.literal(true).optional(),
  createdAt: z.literal(true).optional()
}).strict();


// File: PasskeyMaxAggregateInput.schema.ts


export const PasskeyMaxAggregateInputObjectSchema: z.ZodType<Prisma.PasskeyMaxAggregateInputType, Prisma.PasskeyMaxAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  name: z.literal(true).optional(),
  publicKey: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  credentialID: z.literal(true).optional(),
  counter: z.literal(true).optional(),
  deviceType: z.literal(true).optional(),
  backedUp: z.literal(true).optional(),
  transports: z.literal(true).optional(),
  createdAt: z.literal(true).optional()
}).strict();
export const PasskeyMaxAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  name: z.literal(true).optional(),
  publicKey: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  credentialID: z.literal(true).optional(),
  counter: z.literal(true).optional(),
  deviceType: z.literal(true).optional(),
  backedUp: z.literal(true).optional(),
  transports: z.literal(true).optional(),
  createdAt: z.literal(true).optional()
}).strict();


// File: TwoFactorCountAggregateInput.schema.ts


export const TwoFactorCountAggregateInputObjectSchema: z.ZodType<Prisma.TwoFactorCountAggregateInputType, Prisma.TwoFactorCountAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  secret: z.literal(true).optional(),
  backupCodes: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  _all: z.literal(true).optional()
}).strict();
export const TwoFactorCountAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  secret: z.literal(true).optional(),
  backupCodes: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  _all: z.literal(true).optional()
}).strict();


// File: TwoFactorMinAggregateInput.schema.ts


export const TwoFactorMinAggregateInputObjectSchema: z.ZodType<Prisma.TwoFactorMinAggregateInputType, Prisma.TwoFactorMinAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  secret: z.literal(true).optional(),
  backupCodes: z.literal(true).optional(),
  userId: z.literal(true).optional()
}).strict();
export const TwoFactorMinAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  secret: z.literal(true).optional(),
  backupCodes: z.literal(true).optional(),
  userId: z.literal(true).optional()
}).strict();


// File: TwoFactorMaxAggregateInput.schema.ts


export const TwoFactorMaxAggregateInputObjectSchema: z.ZodType<Prisma.TwoFactorMaxAggregateInputType, Prisma.TwoFactorMaxAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  secret: z.literal(true).optional(),
  backupCodes: z.literal(true).optional(),
  userId: z.literal(true).optional()
}).strict();
export const TwoFactorMaxAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  secret: z.literal(true).optional(),
  backupCodes: z.literal(true).optional(),
  userId: z.literal(true).optional()
}).strict();


// File: OrganizationCountAggregateInput.schema.ts


export const OrganizationCountAggregateInputObjectSchema: z.ZodType<Prisma.OrganizationCountAggregateInputType, Prisma.OrganizationCountAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  name: z.literal(true).optional(),
  slug: z.literal(true).optional(),
  logo: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  metadata: z.literal(true).optional(),
  paymentsCustomerId: z.literal(true).optional(),
  _all: z.literal(true).optional()
}).strict();
export const OrganizationCountAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  name: z.literal(true).optional(),
  slug: z.literal(true).optional(),
  logo: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  metadata: z.literal(true).optional(),
  paymentsCustomerId: z.literal(true).optional(),
  _all: z.literal(true).optional()
}).strict();


// File: OrganizationMinAggregateInput.schema.ts


export const OrganizationMinAggregateInputObjectSchema: z.ZodType<Prisma.OrganizationMinAggregateInputType, Prisma.OrganizationMinAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  name: z.literal(true).optional(),
  slug: z.literal(true).optional(),
  logo: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  metadata: z.literal(true).optional(),
  paymentsCustomerId: z.literal(true).optional()
}).strict();
export const OrganizationMinAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  name: z.literal(true).optional(),
  slug: z.literal(true).optional(),
  logo: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  metadata: z.literal(true).optional(),
  paymentsCustomerId: z.literal(true).optional()
}).strict();


// File: OrganizationMaxAggregateInput.schema.ts


export const OrganizationMaxAggregateInputObjectSchema: z.ZodType<Prisma.OrganizationMaxAggregateInputType, Prisma.OrganizationMaxAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  name: z.literal(true).optional(),
  slug: z.literal(true).optional(),
  logo: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  metadata: z.literal(true).optional(),
  paymentsCustomerId: z.literal(true).optional()
}).strict();
export const OrganizationMaxAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  name: z.literal(true).optional(),
  slug: z.literal(true).optional(),
  logo: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  metadata: z.literal(true).optional(),
  paymentsCustomerId: z.literal(true).optional()
}).strict();


// File: MemberCountAggregateInput.schema.ts


export const MemberCountAggregateInputObjectSchema: z.ZodType<Prisma.MemberCountAggregateInputType, Prisma.MemberCountAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  organizationId: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  role: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  _all: z.literal(true).optional()
}).strict();
export const MemberCountAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  organizationId: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  role: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  _all: z.literal(true).optional()
}).strict();


// File: MemberMinAggregateInput.schema.ts


export const MemberMinAggregateInputObjectSchema: z.ZodType<Prisma.MemberMinAggregateInputType, Prisma.MemberMinAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  organizationId: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  role: z.literal(true).optional(),
  createdAt: z.literal(true).optional()
}).strict();
export const MemberMinAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  organizationId: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  role: z.literal(true).optional(),
  createdAt: z.literal(true).optional()
}).strict();


// File: MemberMaxAggregateInput.schema.ts


export const MemberMaxAggregateInputObjectSchema: z.ZodType<Prisma.MemberMaxAggregateInputType, Prisma.MemberMaxAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  organizationId: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  role: z.literal(true).optional(),
  createdAt: z.literal(true).optional()
}).strict();
export const MemberMaxAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  organizationId: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  role: z.literal(true).optional(),
  createdAt: z.literal(true).optional()
}).strict();


// File: InvitationCountAggregateInput.schema.ts


export const InvitationCountAggregateInputObjectSchema: z.ZodType<Prisma.InvitationCountAggregateInputType, Prisma.InvitationCountAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  organizationId: z.literal(true).optional(),
  email: z.literal(true).optional(),
  role: z.literal(true).optional(),
  status: z.literal(true).optional(),
  expiresAt: z.literal(true).optional(),
  inviterId: z.literal(true).optional(),
  _all: z.literal(true).optional()
}).strict();
export const InvitationCountAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  organizationId: z.literal(true).optional(),
  email: z.literal(true).optional(),
  role: z.literal(true).optional(),
  status: z.literal(true).optional(),
  expiresAt: z.literal(true).optional(),
  inviterId: z.literal(true).optional(),
  _all: z.literal(true).optional()
}).strict();


// File: InvitationMinAggregateInput.schema.ts


export const InvitationMinAggregateInputObjectSchema: z.ZodType<Prisma.InvitationMinAggregateInputType, Prisma.InvitationMinAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  organizationId: z.literal(true).optional(),
  email: z.literal(true).optional(),
  role: z.literal(true).optional(),
  status: z.literal(true).optional(),
  expiresAt: z.literal(true).optional(),
  inviterId: z.literal(true).optional()
}).strict();
export const InvitationMinAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  organizationId: z.literal(true).optional(),
  email: z.literal(true).optional(),
  role: z.literal(true).optional(),
  status: z.literal(true).optional(),
  expiresAt: z.literal(true).optional(),
  inviterId: z.literal(true).optional()
}).strict();


// File: InvitationMaxAggregateInput.schema.ts


export const InvitationMaxAggregateInputObjectSchema: z.ZodType<Prisma.InvitationMaxAggregateInputType, Prisma.InvitationMaxAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  organizationId: z.literal(true).optional(),
  email: z.literal(true).optional(),
  role: z.literal(true).optional(),
  status: z.literal(true).optional(),
  expiresAt: z.literal(true).optional(),
  inviterId: z.literal(true).optional()
}).strict();
export const InvitationMaxAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  organizationId: z.literal(true).optional(),
  email: z.literal(true).optional(),
  role: z.literal(true).optional(),
  status: z.literal(true).optional(),
  expiresAt: z.literal(true).optional(),
  inviterId: z.literal(true).optional()
}).strict();


// File: PurchaseCountAggregateInput.schema.ts


export const PurchaseCountAggregateInputObjectSchema: z.ZodType<Prisma.PurchaseCountAggregateInputType, Prisma.PurchaseCountAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  organizationId: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  type: z.literal(true).optional(),
  customerId: z.literal(true).optional(),
  subscriptionId: z.literal(true).optional(),
  productId: z.literal(true).optional(),
  status: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional(),
  _all: z.literal(true).optional()
}).strict();
export const PurchaseCountAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  organizationId: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  type: z.literal(true).optional(),
  customerId: z.literal(true).optional(),
  subscriptionId: z.literal(true).optional(),
  productId: z.literal(true).optional(),
  status: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional(),
  _all: z.literal(true).optional()
}).strict();


// File: PurchaseMinAggregateInput.schema.ts


export const PurchaseMinAggregateInputObjectSchema: z.ZodType<Prisma.PurchaseMinAggregateInputType, Prisma.PurchaseMinAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  organizationId: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  type: z.literal(true).optional(),
  customerId: z.literal(true).optional(),
  subscriptionId: z.literal(true).optional(),
  productId: z.literal(true).optional(),
  status: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional()
}).strict();
export const PurchaseMinAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  organizationId: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  type: z.literal(true).optional(),
  customerId: z.literal(true).optional(),
  subscriptionId: z.literal(true).optional(),
  productId: z.literal(true).optional(),
  status: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional()
}).strict();


// File: PurchaseMaxAggregateInput.schema.ts


export const PurchaseMaxAggregateInputObjectSchema: z.ZodType<Prisma.PurchaseMaxAggregateInputType, Prisma.PurchaseMaxAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  organizationId: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  type: z.literal(true).optional(),
  customerId: z.literal(true).optional(),
  subscriptionId: z.literal(true).optional(),
  productId: z.literal(true).optional(),
  status: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional()
}).strict();
export const PurchaseMaxAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  organizationId: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  type: z.literal(true).optional(),
  customerId: z.literal(true).optional(),
  subscriptionId: z.literal(true).optional(),
  productId: z.literal(true).optional(),
  status: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional()
}).strict();


// File: AiChatCountAggregateInput.schema.ts


export const AiChatCountAggregateInputObjectSchema: z.ZodType<Prisma.AiChatCountAggregateInputType, Prisma.AiChatCountAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  organizationId: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  title: z.literal(true).optional(),
  messages: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional(),
  _all: z.literal(true).optional()
}).strict();
export const AiChatCountAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  organizationId: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  title: z.literal(true).optional(),
  messages: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional(),
  _all: z.literal(true).optional()
}).strict();


// File: AiChatMinAggregateInput.schema.ts


export const AiChatMinAggregateInputObjectSchema: z.ZodType<Prisma.AiChatMinAggregateInputType, Prisma.AiChatMinAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  organizationId: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  title: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional()
}).strict();
export const AiChatMinAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  organizationId: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  title: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional()
}).strict();


// File: AiChatMaxAggregateInput.schema.ts


export const AiChatMaxAggregateInputObjectSchema: z.ZodType<Prisma.AiChatMaxAggregateInputType, Prisma.AiChatMaxAggregateInputType> = z.object({
  id: z.literal(true).optional(),
  organizationId: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  title: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional()
}).strict();
export const AiChatMaxAggregateInputObjectZodSchema = z.object({
  id: z.literal(true).optional(),
  organizationId: z.literal(true).optional(),
  userId: z.literal(true).optional(),
  title: z.literal(true).optional(),
  createdAt: z.literal(true).optional(),
  updatedAt: z.literal(true).optional()
}).strict();


// File: UserCountOutputTypeSelect.schema.ts


export const UserCountOutputTypeSelectObjectSchema: z.ZodType<Prisma.UserCountOutputTypeSelect, Prisma.UserCountOutputTypeSelect> = z.object({
  sessions: z.boolean().optional(),
  accounts: z.boolean().optional(),
  passkeys: z.boolean().optional(),
  invitations: z.boolean().optional(),
  purchases: z.boolean().optional(),
  members: z.boolean().optional(),
  twofactors: z.boolean().optional(),
  aiChats: z.boolean().optional()
}).strict();
export const UserCountOutputTypeSelectObjectZodSchema = z.object({
  sessions: z.boolean().optional(),
  accounts: z.boolean().optional(),
  passkeys: z.boolean().optional(),
  invitations: z.boolean().optional(),
  purchases: z.boolean().optional(),
  members: z.boolean().optional(),
  twofactors: z.boolean().optional(),
  aiChats: z.boolean().optional()
}).strict();


// File: OrganizationCountOutputTypeSelect.schema.ts


export const OrganizationCountOutputTypeSelectObjectSchema: z.ZodType<Prisma.OrganizationCountOutputTypeSelect, Prisma.OrganizationCountOutputTypeSelect> = z.object({
  members: z.boolean().optional(),
  invitations: z.boolean().optional(),
  purchases: z.boolean().optional(),
  aiChats: z.boolean().optional()
}).strict();
export const OrganizationCountOutputTypeSelectObjectZodSchema = z.object({
  members: z.boolean().optional(),
  invitations: z.boolean().optional(),
  purchases: z.boolean().optional(),
  aiChats: z.boolean().optional()
}).strict();


// File: UserCountOutputTypeArgs.schema.ts

export const UserCountOutputTypeArgsObjectSchema = z.object({
  select: z.lazy(() => UserCountOutputTypeSelectObjectSchema).optional()
}).strict();
export const UserCountOutputTypeArgsObjectZodSchema = z.object({
  select: z.lazy(() => UserCountOutputTypeSelectObjectSchema).optional()
}).strict();


// File: OrganizationCountOutputTypeArgs.schema.ts

export const OrganizationCountOutputTypeArgsObjectSchema = z.object({
  select: z.lazy(() => OrganizationCountOutputTypeSelectObjectSchema).optional()
}).strict();
export const OrganizationCountOutputTypeArgsObjectZodSchema = z.object({
  select: z.lazy(() => OrganizationCountOutputTypeSelectObjectSchema).optional()
}).strict();


// File: UserSelect.schema.ts

export const UserSelectObjectSchema: z.ZodType<Prisma.UserSelect, Prisma.UserSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  email: z.boolean().optional(),
  emailVerified: z.boolean().optional(),
  image: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  username: z.boolean().optional(),
  role: z.boolean().optional(),
  banned: z.boolean().optional(),
  banReason: z.boolean().optional(),
  banExpires: z.boolean().optional(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.boolean().optional(),
  locale: z.boolean().optional(),
  twoFactorEnabled: z.boolean().optional(),
  sessions: z.union([z.boolean(), z.lazy(() => SessionFindManySchema)]).optional(),
  accounts: z.union([z.boolean(), z.lazy(() => AccountFindManySchema)]).optional(),
  passkeys: z.union([z.boolean(), z.lazy(() => PasskeyFindManySchema)]).optional(),
  invitations: z.union([z.boolean(), z.lazy(() => InvitationFindManySchema)]).optional(),
  purchases: z.union([z.boolean(), z.lazy(() => PurchaseFindManySchema)]).optional(),
  members: z.union([z.boolean(), z.lazy(() => MemberFindManySchema)]).optional(),
  twofactors: z.union([z.boolean(), z.lazy(() => TwoFactorFindManySchema)]).optional(),
  aiChats: z.union([z.boolean(), z.lazy(() => AiChatFindManySchema)]).optional(),
  _count: z.union([z.boolean(), z.lazy(() => UserCountOutputTypeArgsObjectSchema)]).optional()
}).strict();
export const UserSelectObjectZodSchema = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  email: z.boolean().optional(),
  emailVerified: z.boolean().optional(),
  image: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  username: z.boolean().optional(),
  role: z.boolean().optional(),
  banned: z.boolean().optional(),
  banReason: z.boolean().optional(),
  banExpires: z.boolean().optional(),
  onboardingComplete: z.boolean().optional(),
  paymentsCustomerId: z.boolean().optional(),
  locale: z.boolean().optional(),
  twoFactorEnabled: z.boolean().optional(),
  sessions: z.union([z.boolean(), z.lazy(() => SessionFindManySchema)]).optional(),
  accounts: z.union([z.boolean(), z.lazy(() => AccountFindManySchema)]).optional(),
  passkeys: z.union([z.boolean(), z.lazy(() => PasskeyFindManySchema)]).optional(),
  invitations: z.union([z.boolean(), z.lazy(() => InvitationFindManySchema)]).optional(),
  purchases: z.union([z.boolean(), z.lazy(() => PurchaseFindManySchema)]).optional(),
  members: z.union([z.boolean(), z.lazy(() => MemberFindManySchema)]).optional(),
  twofactors: z.union([z.boolean(), z.lazy(() => TwoFactorFindManySchema)]).optional(),
  aiChats: z.union([z.boolean(), z.lazy(() => AiChatFindManySchema)]).optional(),
  _count: z.union([z.boolean(), z.lazy(() => UserCountOutputTypeArgsObjectSchema)]).optional()
}).strict();


// File: SessionSelect.schema.ts

export const SessionSelectObjectSchema: z.ZodType<Prisma.SessionSelect, Prisma.SessionSelect> = z.object({
  id: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  ipAddress: z.boolean().optional(),
  userAgent: z.boolean().optional(),
  userId: z.boolean().optional(),
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional(),
  impersonatedBy: z.boolean().optional(),
  activeOrganizationId: z.boolean().optional(),
  token: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional()
}).strict();
export const SessionSelectObjectZodSchema = z.object({
  id: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  ipAddress: z.boolean().optional(),
  userAgent: z.boolean().optional(),
  userId: z.boolean().optional(),
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional(),
  impersonatedBy: z.boolean().optional(),
  activeOrganizationId: z.boolean().optional(),
  token: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional()
}).strict();


// File: AccountSelect.schema.ts

export const AccountSelectObjectSchema: z.ZodType<Prisma.AccountSelect, Prisma.AccountSelect> = z.object({
  id: z.boolean().optional(),
  accountId: z.boolean().optional(),
  providerId: z.boolean().optional(),
  userId: z.boolean().optional(),
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional(),
  accessToken: z.boolean().optional(),
  refreshToken: z.boolean().optional(),
  idToken: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  password: z.boolean().optional(),
  accessTokenExpiresAt: z.boolean().optional(),
  refreshTokenExpiresAt: z.boolean().optional(),
  scope: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional()
}).strict();
export const AccountSelectObjectZodSchema = z.object({
  id: z.boolean().optional(),
  accountId: z.boolean().optional(),
  providerId: z.boolean().optional(),
  userId: z.boolean().optional(),
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional(),
  accessToken: z.boolean().optional(),
  refreshToken: z.boolean().optional(),
  idToken: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  password: z.boolean().optional(),
  accessTokenExpiresAt: z.boolean().optional(),
  refreshTokenExpiresAt: z.boolean().optional(),
  scope: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional()
}).strict();


// File: VerificationSelect.schema.ts


export const VerificationSelectObjectSchema: z.ZodType<Prisma.VerificationSelect, Prisma.VerificationSelect> = z.object({
  id: z.boolean().optional(),
  identifier: z.boolean().optional(),
  value: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional()
}).strict();
export const VerificationSelectObjectZodSchema = z.object({
  id: z.boolean().optional(),
  identifier: z.boolean().optional(),
  value: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional()
}).strict();


// File: PasskeySelect.schema.ts

export const PasskeySelectObjectSchema: z.ZodType<Prisma.PasskeySelect, Prisma.PasskeySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  publicKey: z.boolean().optional(),
  userId: z.boolean().optional(),
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional(),
  credentialID: z.boolean().optional(),
  counter: z.boolean().optional(),
  deviceType: z.boolean().optional(),
  backedUp: z.boolean().optional(),
  transports: z.boolean().optional(),
  createdAt: z.boolean().optional()
}).strict();
export const PasskeySelectObjectZodSchema = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  publicKey: z.boolean().optional(),
  userId: z.boolean().optional(),
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional(),
  credentialID: z.boolean().optional(),
  counter: z.boolean().optional(),
  deviceType: z.boolean().optional(),
  backedUp: z.boolean().optional(),
  transports: z.boolean().optional(),
  createdAt: z.boolean().optional()
}).strict();


// File: TwoFactorSelect.schema.ts

export const TwoFactorSelectObjectSchema: z.ZodType<Prisma.TwoFactorSelect, Prisma.TwoFactorSelect> = z.object({
  id: z.boolean().optional(),
  secret: z.boolean().optional(),
  backupCodes: z.boolean().optional(),
  userId: z.boolean().optional(),
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional()
}).strict();
export const TwoFactorSelectObjectZodSchema = z.object({
  id: z.boolean().optional(),
  secret: z.boolean().optional(),
  backupCodes: z.boolean().optional(),
  userId: z.boolean().optional(),
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional()
}).strict();


// File: OrganizationSelect.schema.ts

export const OrganizationSelectObjectSchema: z.ZodType<Prisma.OrganizationSelect, Prisma.OrganizationSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  slug: z.boolean().optional(),
  logo: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  metadata: z.boolean().optional(),
  paymentsCustomerId: z.boolean().optional(),
  members: z.union([z.boolean(), z.lazy(() => MemberFindManySchema)]).optional(),
  invitations: z.union([z.boolean(), z.lazy(() => InvitationFindManySchema)]).optional(),
  purchases: z.union([z.boolean(), z.lazy(() => PurchaseFindManySchema)]).optional(),
  aiChats: z.union([z.boolean(), z.lazy(() => AiChatFindManySchema)]).optional(),
  _count: z.union([z.boolean(), z.lazy(() => OrganizationCountOutputTypeArgsObjectSchema)]).optional()
}).strict();
export const OrganizationSelectObjectZodSchema = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  slug: z.boolean().optional(),
  logo: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  metadata: z.boolean().optional(),
  paymentsCustomerId: z.boolean().optional(),
  members: z.union([z.boolean(), z.lazy(() => MemberFindManySchema)]).optional(),
  invitations: z.union([z.boolean(), z.lazy(() => InvitationFindManySchema)]).optional(),
  purchases: z.union([z.boolean(), z.lazy(() => PurchaseFindManySchema)]).optional(),
  aiChats: z.union([z.boolean(), z.lazy(() => AiChatFindManySchema)]).optional(),
  _count: z.union([z.boolean(), z.lazy(() => OrganizationCountOutputTypeArgsObjectSchema)]).optional()
}).strict();


// File: MemberSelect.schema.ts

export const MemberSelectObjectSchema: z.ZodType<Prisma.MemberSelect, Prisma.MemberSelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  organization: z.union([z.boolean(), z.lazy(() => OrganizationArgsObjectSchema)]).optional(),
  userId: z.boolean().optional(),
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional(),
  role: z.boolean().optional(),
  createdAt: z.boolean().optional()
}).strict();
export const MemberSelectObjectZodSchema = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  organization: z.union([z.boolean(), z.lazy(() => OrganizationArgsObjectSchema)]).optional(),
  userId: z.boolean().optional(),
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional(),
  role: z.boolean().optional(),
  createdAt: z.boolean().optional()
}).strict();


// File: InvitationSelect.schema.ts

export const InvitationSelectObjectSchema: z.ZodType<Prisma.InvitationSelect, Prisma.InvitationSelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  organization: z.union([z.boolean(), z.lazy(() => OrganizationArgsObjectSchema)]).optional(),
  email: z.boolean().optional(),
  role: z.boolean().optional(),
  status: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  inviterId: z.boolean().optional(),
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional()
}).strict();
export const InvitationSelectObjectZodSchema = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  organization: z.union([z.boolean(), z.lazy(() => OrganizationArgsObjectSchema)]).optional(),
  email: z.boolean().optional(),
  role: z.boolean().optional(),
  status: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  inviterId: z.boolean().optional(),
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional()
}).strict();


// File: PurchaseSelect.schema.ts

export const PurchaseSelectObjectSchema: z.ZodType<Prisma.PurchaseSelect, Prisma.PurchaseSelect> = z.object({
  id: z.boolean().optional(),
  organization: z.union([z.boolean(), z.lazy(() => OrganizationArgsObjectSchema)]).optional(),
  organizationId: z.boolean().optional(),
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional(),
  userId: z.boolean().optional(),
  type: z.boolean().optional(),
  customerId: z.boolean().optional(),
  subscriptionId: z.boolean().optional(),
  productId: z.boolean().optional(),
  status: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional()
}).strict();
export const PurchaseSelectObjectZodSchema = z.object({
  id: z.boolean().optional(),
  organization: z.union([z.boolean(), z.lazy(() => OrganizationArgsObjectSchema)]).optional(),
  organizationId: z.boolean().optional(),
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional(),
  userId: z.boolean().optional(),
  type: z.boolean().optional(),
  customerId: z.boolean().optional(),
  subscriptionId: z.boolean().optional(),
  productId: z.boolean().optional(),
  status: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional()
}).strict();


// File: AiChatSelect.schema.ts

export const AiChatSelectObjectSchema: z.ZodType<Prisma.AiChatSelect, Prisma.AiChatSelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  organization: z.union([z.boolean(), z.lazy(() => OrganizationArgsObjectSchema)]).optional(),
  userId: z.boolean().optional(),
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional(),
  title: z.boolean().optional(),
  messages: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional()
}).strict();
export const AiChatSelectObjectZodSchema = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  organization: z.union([z.boolean(), z.lazy(() => OrganizationArgsObjectSchema)]).optional(),
  userId: z.boolean().optional(),
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional(),
  title: z.boolean().optional(),
  messages: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional()
}).strict();


// File: UserArgs.schema.ts

export const UserArgsObjectSchema = z.object({
  select: z.lazy(() => UserSelectObjectSchema).optional(),
  include: z.lazy(() => UserIncludeObjectSchema).optional()
}).strict();
export const UserArgsObjectZodSchema = z.object({
  select: z.lazy(() => UserSelectObjectSchema).optional(),
  include: z.lazy(() => UserIncludeObjectSchema).optional()
}).strict();


// File: SessionArgs.schema.ts

export const SessionArgsObjectSchema = z.object({
  select: z.lazy(() => SessionSelectObjectSchema).optional(),
  include: z.lazy(() => SessionIncludeObjectSchema).optional()
}).strict();
export const SessionArgsObjectZodSchema = z.object({
  select: z.lazy(() => SessionSelectObjectSchema).optional(),
  include: z.lazy(() => SessionIncludeObjectSchema).optional()
}).strict();


// File: AccountArgs.schema.ts

export const AccountArgsObjectSchema = z.object({
  select: z.lazy(() => AccountSelectObjectSchema).optional(),
  include: z.lazy(() => AccountIncludeObjectSchema).optional()
}).strict();
export const AccountArgsObjectZodSchema = z.object({
  select: z.lazy(() => AccountSelectObjectSchema).optional(),
  include: z.lazy(() => AccountIncludeObjectSchema).optional()
}).strict();


// File: VerificationArgs.schema.ts

export const VerificationArgsObjectSchema = z.object({
  select: z.lazy(() => VerificationSelectObjectSchema).optional()
}).strict();
export const VerificationArgsObjectZodSchema = z.object({
  select: z.lazy(() => VerificationSelectObjectSchema).optional()
}).strict();


// File: PasskeyArgs.schema.ts

export const PasskeyArgsObjectSchema = z.object({
  select: z.lazy(() => PasskeySelectObjectSchema).optional(),
  include: z.lazy(() => PasskeyIncludeObjectSchema).optional()
}).strict();
export const PasskeyArgsObjectZodSchema = z.object({
  select: z.lazy(() => PasskeySelectObjectSchema).optional(),
  include: z.lazy(() => PasskeyIncludeObjectSchema).optional()
}).strict();


// File: TwoFactorArgs.schema.ts

export const TwoFactorArgsObjectSchema = z.object({
  select: z.lazy(() => TwoFactorSelectObjectSchema).optional(),
  include: z.lazy(() => TwoFactorIncludeObjectSchema).optional()
}).strict();
export const TwoFactorArgsObjectZodSchema = z.object({
  select: z.lazy(() => TwoFactorSelectObjectSchema).optional(),
  include: z.lazy(() => TwoFactorIncludeObjectSchema).optional()
}).strict();


// File: OrganizationArgs.schema.ts

export const OrganizationArgsObjectSchema = z.object({
  select: z.lazy(() => OrganizationSelectObjectSchema).optional(),
  include: z.lazy(() => OrganizationIncludeObjectSchema).optional()
}).strict();
export const OrganizationArgsObjectZodSchema = z.object({
  select: z.lazy(() => OrganizationSelectObjectSchema).optional(),
  include: z.lazy(() => OrganizationIncludeObjectSchema).optional()
}).strict();


// File: MemberArgs.schema.ts

export const MemberArgsObjectSchema = z.object({
  select: z.lazy(() => MemberSelectObjectSchema).optional(),
  include: z.lazy(() => MemberIncludeObjectSchema).optional()
}).strict();
export const MemberArgsObjectZodSchema = z.object({
  select: z.lazy(() => MemberSelectObjectSchema).optional(),
  include: z.lazy(() => MemberIncludeObjectSchema).optional()
}).strict();


// File: InvitationArgs.schema.ts

export const InvitationArgsObjectSchema = z.object({
  select: z.lazy(() => InvitationSelectObjectSchema).optional(),
  include: z.lazy(() => InvitationIncludeObjectSchema).optional()
}).strict();
export const InvitationArgsObjectZodSchema = z.object({
  select: z.lazy(() => InvitationSelectObjectSchema).optional(),
  include: z.lazy(() => InvitationIncludeObjectSchema).optional()
}).strict();


// File: PurchaseArgs.schema.ts

export const PurchaseArgsObjectSchema = z.object({
  select: z.lazy(() => PurchaseSelectObjectSchema).optional(),
  include: z.lazy(() => PurchaseIncludeObjectSchema).optional()
}).strict();
export const PurchaseArgsObjectZodSchema = z.object({
  select: z.lazy(() => PurchaseSelectObjectSchema).optional(),
  include: z.lazy(() => PurchaseIncludeObjectSchema).optional()
}).strict();


// File: AiChatArgs.schema.ts

export const AiChatArgsObjectSchema = z.object({
  select: z.lazy(() => AiChatSelectObjectSchema).optional(),
  include: z.lazy(() => AiChatIncludeObjectSchema).optional()
}).strict();
export const AiChatArgsObjectZodSchema = z.object({
  select: z.lazy(() => AiChatSelectObjectSchema).optional(),
  include: z.lazy(() => AiChatIncludeObjectSchema).optional()
}).strict();


// File: UserInclude.schema.ts

export const UserIncludeObjectSchema: z.ZodType<Prisma.UserInclude, Prisma.UserInclude> = z.object({
  sessions: z.union([z.boolean(), z.lazy(() => SessionFindManySchema)]).optional(),
  accounts: z.union([z.boolean(), z.lazy(() => AccountFindManySchema)]).optional(),
  passkeys: z.union([z.boolean(), z.lazy(() => PasskeyFindManySchema)]).optional(),
  invitations: z.union([z.boolean(), z.lazy(() => InvitationFindManySchema)]).optional(),
  purchases: z.union([z.boolean(), z.lazy(() => PurchaseFindManySchema)]).optional(),
  members: z.union([z.boolean(), z.lazy(() => MemberFindManySchema)]).optional(),
  twofactors: z.union([z.boolean(), z.lazy(() => TwoFactorFindManySchema)]).optional(),
  aiChats: z.union([z.boolean(), z.lazy(() => AiChatFindManySchema)]).optional(),
  _count: z.union([z.boolean(), z.lazy(() => UserCountOutputTypeArgsObjectSchema)]).optional()
}).strict();
export const UserIncludeObjectZodSchema = z.object({
  sessions: z.union([z.boolean(), z.lazy(() => SessionFindManySchema)]).optional(),
  accounts: z.union([z.boolean(), z.lazy(() => AccountFindManySchema)]).optional(),
  passkeys: z.union([z.boolean(), z.lazy(() => PasskeyFindManySchema)]).optional(),
  invitations: z.union([z.boolean(), z.lazy(() => InvitationFindManySchema)]).optional(),
  purchases: z.union([z.boolean(), z.lazy(() => PurchaseFindManySchema)]).optional(),
  members: z.union([z.boolean(), z.lazy(() => MemberFindManySchema)]).optional(),
  twofactors: z.union([z.boolean(), z.lazy(() => TwoFactorFindManySchema)]).optional(),
  aiChats: z.union([z.boolean(), z.lazy(() => AiChatFindManySchema)]).optional(),
  _count: z.union([z.boolean(), z.lazy(() => UserCountOutputTypeArgsObjectSchema)]).optional()
}).strict();


// File: SessionInclude.schema.ts

export const SessionIncludeObjectSchema: z.ZodType<Prisma.SessionInclude, Prisma.SessionInclude> = z.object({
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional()
}).strict();
export const SessionIncludeObjectZodSchema = z.object({
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional()
}).strict();


// File: AccountInclude.schema.ts

export const AccountIncludeObjectSchema: z.ZodType<Prisma.AccountInclude, Prisma.AccountInclude> = z.object({
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional()
}).strict();
export const AccountIncludeObjectZodSchema = z.object({
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional()
}).strict();


// File: PasskeyInclude.schema.ts

export const PasskeyIncludeObjectSchema: z.ZodType<Prisma.PasskeyInclude, Prisma.PasskeyInclude> = z.object({
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional()
}).strict();
export const PasskeyIncludeObjectZodSchema = z.object({
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional()
}).strict();


// File: TwoFactorInclude.schema.ts

export const TwoFactorIncludeObjectSchema: z.ZodType<Prisma.TwoFactorInclude, Prisma.TwoFactorInclude> = z.object({
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional()
}).strict();
export const TwoFactorIncludeObjectZodSchema = z.object({
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional()
}).strict();


// File: OrganizationInclude.schema.ts

export const OrganizationIncludeObjectSchema: z.ZodType<Prisma.OrganizationInclude, Prisma.OrganizationInclude> = z.object({
  members: z.union([z.boolean(), z.lazy(() => MemberFindManySchema)]).optional(),
  invitations: z.union([z.boolean(), z.lazy(() => InvitationFindManySchema)]).optional(),
  purchases: z.union([z.boolean(), z.lazy(() => PurchaseFindManySchema)]).optional(),
  aiChats: z.union([z.boolean(), z.lazy(() => AiChatFindManySchema)]).optional(),
  _count: z.union([z.boolean(), z.lazy(() => OrganizationCountOutputTypeArgsObjectSchema)]).optional()
}).strict();
export const OrganizationIncludeObjectZodSchema = z.object({
  members: z.union([z.boolean(), z.lazy(() => MemberFindManySchema)]).optional(),
  invitations: z.union([z.boolean(), z.lazy(() => InvitationFindManySchema)]).optional(),
  purchases: z.union([z.boolean(), z.lazy(() => PurchaseFindManySchema)]).optional(),
  aiChats: z.union([z.boolean(), z.lazy(() => AiChatFindManySchema)]).optional(),
  _count: z.union([z.boolean(), z.lazy(() => OrganizationCountOutputTypeArgsObjectSchema)]).optional()
}).strict();


// File: MemberInclude.schema.ts

export const MemberIncludeObjectSchema: z.ZodType<Prisma.MemberInclude, Prisma.MemberInclude> = z.object({
  organization: z.union([z.boolean(), z.lazy(() => OrganizationArgsObjectSchema)]).optional(),
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional()
}).strict();
export const MemberIncludeObjectZodSchema = z.object({
  organization: z.union([z.boolean(), z.lazy(() => OrganizationArgsObjectSchema)]).optional(),
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional()
}).strict();


// File: InvitationInclude.schema.ts

export const InvitationIncludeObjectSchema: z.ZodType<Prisma.InvitationInclude, Prisma.InvitationInclude> = z.object({
  organization: z.union([z.boolean(), z.lazy(() => OrganizationArgsObjectSchema)]).optional(),
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional()
}).strict();
export const InvitationIncludeObjectZodSchema = z.object({
  organization: z.union([z.boolean(), z.lazy(() => OrganizationArgsObjectSchema)]).optional(),
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional()
}).strict();


// File: PurchaseInclude.schema.ts

export const PurchaseIncludeObjectSchema: z.ZodType<Prisma.PurchaseInclude, Prisma.PurchaseInclude> = z.object({
  organization: z.union([z.boolean(), z.lazy(() => OrganizationArgsObjectSchema)]).optional(),
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional()
}).strict();
export const PurchaseIncludeObjectZodSchema = z.object({
  organization: z.union([z.boolean(), z.lazy(() => OrganizationArgsObjectSchema)]).optional(),
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional()
}).strict();


// File: AiChatInclude.schema.ts

export const AiChatIncludeObjectSchema: z.ZodType<Prisma.AiChatInclude, Prisma.AiChatInclude> = z.object({
  organization: z.union([z.boolean(), z.lazy(() => OrganizationArgsObjectSchema)]).optional(),
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional()
}).strict();
export const AiChatIncludeObjectZodSchema = z.object({
  organization: z.union([z.boolean(), z.lazy(() => OrganizationArgsObjectSchema)]).optional(),
  user: z.union([z.boolean(), z.lazy(() => UserArgsObjectSchema)]).optional()
}).strict();


// File: findUniqueUser.schema.ts

export const UserFindUniqueSchema = z.object({ select: UserSelectObjectSchema.optional(), include: UserIncludeObjectSchema.optional(), where: UserWhereUniqueInputObjectSchema })

// File: findFirstUser.schema.ts

// Select schema needs to be in file to prevent circular imports
//------------------------------------------------------

export const UserFindFirstSelectSchema__findFirstUser_schema: z.ZodType<Prisma.UserSelect, Prisma.UserSelect> = z.object({
    id: z.boolean().optional(),
    name: z.boolean().optional(),
    email: z.boolean().optional(),
    emailVerified: z.boolean().optional(),
    image: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    updatedAt: z.boolean().optional(),
    username: z.boolean().optional(),
    role: z.boolean().optional(),
    banned: z.boolean().optional(),
    banReason: z.boolean().optional(),
    banExpires: z.boolean().optional(),
    onboardingComplete: z.boolean().optional(),
    paymentsCustomerId: z.boolean().optional(),
    locale: z.boolean().optional(),
    twoFactorEnabled: z.boolean().optional(),
    sessions: z.boolean().optional(),
    accounts: z.boolean().optional(),
    passkeys: z.boolean().optional(),
    invitations: z.boolean().optional(),
    purchases: z.boolean().optional(),
    members: z.boolean().optional(),
    twofactors: z.boolean().optional(),
    aiChats: z.boolean().optional(),
    _count: z.boolean().optional()
  }).strict();

export const UserFindFirstSelectZodSchema__findFirstUser_schema = z.object({
    id: z.boolean().optional(),
    name: z.boolean().optional(),
    email: z.boolean().optional(),
    emailVerified: z.boolean().optional(),
    image: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    updatedAt: z.boolean().optional(),
    username: z.boolean().optional(),
    role: z.boolean().optional(),
    banned: z.boolean().optional(),
    banReason: z.boolean().optional(),
    banExpires: z.boolean().optional(),
    onboardingComplete: z.boolean().optional(),
    paymentsCustomerId: z.boolean().optional(),
    locale: z.boolean().optional(),
    twoFactorEnabled: z.boolean().optional(),
    sessions: z.boolean().optional(),
    accounts: z.boolean().optional(),
    passkeys: z.boolean().optional(),
    invitations: z.boolean().optional(),
    purchases: z.boolean().optional(),
    members: z.boolean().optional(),
    twofactors: z.boolean().optional(),
    aiChats: z.boolean().optional(),
    _count: z.boolean().optional()
  }).strict();

export const UserFindFirstSchema: z.ZodType<Prisma.UserFindFirstArgs, Prisma.UserFindFirstArgs> = z.object({ select: UserFindFirstSelectSchema__findFirstUser_schema.optional(), include: z.lazy(() => UserIncludeObjectSchema.optional()), orderBy: z.union([UserOrderByWithRelationInputObjectSchema, UserOrderByWithRelationInputObjectSchema.array()]).optional(), where: UserWhereInputObjectSchema.optional(), cursor: UserWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([UserScalarFieldEnumSchema, UserScalarFieldEnumSchema.array()]).optional() }).strict();

export const UserFindFirstZodSchema = z.object({ select: UserFindFirstSelectSchema__findFirstUser_schema.optional(), include: z.lazy(() => UserIncludeObjectSchema.optional()), orderBy: z.union([UserOrderByWithRelationInputObjectSchema, UserOrderByWithRelationInputObjectSchema.array()]).optional(), where: UserWhereInputObjectSchema.optional(), cursor: UserWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([UserScalarFieldEnumSchema, UserScalarFieldEnumSchema.array()]).optional() }).strict();

// File: findManyUser.schema.ts

// Select schema needs to be in file to prevent circular imports
//------------------------------------------------------

export const UserFindManySelectSchema__findManyUser_schema: z.ZodType<Prisma.UserSelect, Prisma.UserSelect> = z.object({
    id: z.boolean().optional(),
    name: z.boolean().optional(),
    email: z.boolean().optional(),
    emailVerified: z.boolean().optional(),
    image: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    updatedAt: z.boolean().optional(),
    username: z.boolean().optional(),
    role: z.boolean().optional(),
    banned: z.boolean().optional(),
    banReason: z.boolean().optional(),
    banExpires: z.boolean().optional(),
    onboardingComplete: z.boolean().optional(),
    paymentsCustomerId: z.boolean().optional(),
    locale: z.boolean().optional(),
    twoFactorEnabled: z.boolean().optional(),
    sessions: z.boolean().optional(),
    accounts: z.boolean().optional(),
    passkeys: z.boolean().optional(),
    invitations: z.boolean().optional(),
    purchases: z.boolean().optional(),
    members: z.boolean().optional(),
    twofactors: z.boolean().optional(),
    aiChats: z.boolean().optional(),
    _count: z.boolean().optional()
  }).strict();

export const UserFindManySelectZodSchema__findManyUser_schema = z.object({
    id: z.boolean().optional(),
    name: z.boolean().optional(),
    email: z.boolean().optional(),
    emailVerified: z.boolean().optional(),
    image: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    updatedAt: z.boolean().optional(),
    username: z.boolean().optional(),
    role: z.boolean().optional(),
    banned: z.boolean().optional(),
    banReason: z.boolean().optional(),
    banExpires: z.boolean().optional(),
    onboardingComplete: z.boolean().optional(),
    paymentsCustomerId: z.boolean().optional(),
    locale: z.boolean().optional(),
    twoFactorEnabled: z.boolean().optional(),
    sessions: z.boolean().optional(),
    accounts: z.boolean().optional(),
    passkeys: z.boolean().optional(),
    invitations: z.boolean().optional(),
    purchases: z.boolean().optional(),
    members: z.boolean().optional(),
    twofactors: z.boolean().optional(),
    aiChats: z.boolean().optional(),
    _count: z.boolean().optional()
  }).strict();

export const UserFindManySchema: z.ZodType<Prisma.UserFindManyArgs, Prisma.UserFindManyArgs> = z.object({ select: UserFindManySelectSchema__findManyUser_schema.optional(), include: z.lazy(() => UserIncludeObjectSchema.optional()), orderBy: z.union([UserOrderByWithRelationInputObjectSchema, UserOrderByWithRelationInputObjectSchema.array()]).optional(), where: UserWhereInputObjectSchema.optional(), cursor: UserWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([UserScalarFieldEnumSchema, UserScalarFieldEnumSchema.array()]).optional() }).strict();

export const UserFindManyZodSchema = z.object({ select: UserFindManySelectSchema__findManyUser_schema.optional(), include: z.lazy(() => UserIncludeObjectSchema.optional()), orderBy: z.union([UserOrderByWithRelationInputObjectSchema, UserOrderByWithRelationInputObjectSchema.array()]).optional(), where: UserWhereInputObjectSchema.optional(), cursor: UserWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([UserScalarFieldEnumSchema, UserScalarFieldEnumSchema.array()]).optional() }).strict();

// File: createOneUser.schema.ts

export const UserCreateOneSchema = z.object({ select: UserSelectObjectSchema.optional(), include: UserIncludeObjectSchema.optional(), data: z.union([UserCreateInputObjectSchema, UserUncheckedCreateInputObjectSchema])  })

// File: createManyUser.schema.ts

export const UserCreateManySchema = z.object({ data: z.union([ UserCreateManyInputObjectSchema, z.array(UserCreateManyInputObjectSchema) ]), skipDuplicates: z.boolean().optional() })

// File: deleteOneUser.schema.ts

export const UserDeleteOneSchema = z.object({ select: UserSelectObjectSchema.optional(), include: UserIncludeObjectSchema.optional(), where: UserWhereUniqueInputObjectSchema  })

// File: deleteManyUser.schema.ts

export const UserDeleteManySchema = z.object({ where: UserWhereInputObjectSchema.optional()  })

// File: updateOneUser.schema.ts

export const UserUpdateOneSchema = z.object({ select: UserSelectObjectSchema.optional(), include: UserIncludeObjectSchema.optional(), data: z.union([UserUpdateInputObjectSchema, UserUncheckedUpdateInputObjectSchema]), where: UserWhereUniqueInputObjectSchema  })

// File: updateManyUser.schema.ts

export const UserUpdateManySchema = z.object({ data: UserUpdateManyMutationInputObjectSchema, where: UserWhereInputObjectSchema.optional()  })

// File: upsertOneUser.schema.ts

export const UserUpsertSchema = z.object({ select: UserSelectObjectSchema.optional(), include: UserIncludeObjectSchema.optional(), where: UserWhereUniqueInputObjectSchema, create: z.union([ UserCreateInputObjectSchema, UserUncheckedCreateInputObjectSchema ]), update: z.union([ UserUpdateInputObjectSchema, UserUncheckedUpdateInputObjectSchema ])  })

// File: aggregateUser.schema.ts

export const UserAggregateSchema = z.object({ orderBy: z.union([UserOrderByWithRelationInputObjectSchema, UserOrderByWithRelationInputObjectSchema.array()]).optional(), where: UserWhereInputObjectSchema.optional(), cursor: UserWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([ z.literal(true), UserCountAggregateInputObjectSchema ]).optional(), _min: UserMinAggregateInputObjectSchema.optional(), _max: UserMaxAggregateInputObjectSchema.optional() })

// File: groupByUser.schema.ts

export const UserGroupBySchema = z.object({ where: UserWhereInputObjectSchema.optional(), orderBy: z.union([UserOrderByWithAggregationInputObjectSchema, UserOrderByWithAggregationInputObjectSchema.array()]).optional(), having: UserScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(UserScalarFieldEnumSchema)  })

// File: findUniqueSession.schema.ts

export const SessionFindUniqueSchema = z.object({ select: SessionSelectObjectSchema.optional(), include: SessionIncludeObjectSchema.optional(), where: SessionWhereUniqueInputObjectSchema })

// File: findFirstSession.schema.ts

// Select schema needs to be in file to prevent circular imports
//------------------------------------------------------

export const SessionFindFirstSelectSchema__findFirstSession_schema: z.ZodType<Prisma.SessionSelect, Prisma.SessionSelect> = z.object({
    id: z.boolean().optional(),
    expiresAt: z.boolean().optional(),
    ipAddress: z.boolean().optional(),
    userAgent: z.boolean().optional(),
    userId: z.boolean().optional(),
    user: z.boolean().optional(),
    impersonatedBy: z.boolean().optional(),
    activeOrganizationId: z.boolean().optional(),
    token: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    updatedAt: z.boolean().optional()
  }).strict();

export const SessionFindFirstSelectZodSchema__findFirstSession_schema = z.object({
    id: z.boolean().optional(),
    expiresAt: z.boolean().optional(),
    ipAddress: z.boolean().optional(),
    userAgent: z.boolean().optional(),
    userId: z.boolean().optional(),
    user: z.boolean().optional(),
    impersonatedBy: z.boolean().optional(),
    activeOrganizationId: z.boolean().optional(),
    token: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    updatedAt: z.boolean().optional()
  }).strict();

export const SessionFindFirstSchema: z.ZodType<Prisma.SessionFindFirstArgs, Prisma.SessionFindFirstArgs> = z.object({ select: SessionFindFirstSelectSchema__findFirstSession_schema.optional(), include: z.lazy(() => SessionIncludeObjectSchema.optional()), orderBy: z.union([SessionOrderByWithRelationInputObjectSchema, SessionOrderByWithRelationInputObjectSchema.array()]).optional(), where: SessionWhereInputObjectSchema.optional(), cursor: SessionWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([SessionScalarFieldEnumSchema, SessionScalarFieldEnumSchema.array()]).optional() }).strict();

export const SessionFindFirstZodSchema = z.object({ select: SessionFindFirstSelectSchema__findFirstSession_schema.optional(), include: z.lazy(() => SessionIncludeObjectSchema.optional()), orderBy: z.union([SessionOrderByWithRelationInputObjectSchema, SessionOrderByWithRelationInputObjectSchema.array()]).optional(), where: SessionWhereInputObjectSchema.optional(), cursor: SessionWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([SessionScalarFieldEnumSchema, SessionScalarFieldEnumSchema.array()]).optional() }).strict();

// File: findManySession.schema.ts

// Select schema needs to be in file to prevent circular imports
//------------------------------------------------------

export const SessionFindManySelectSchema__findManySession_schema: z.ZodType<Prisma.SessionSelect, Prisma.SessionSelect> = z.object({
    id: z.boolean().optional(),
    expiresAt: z.boolean().optional(),
    ipAddress: z.boolean().optional(),
    userAgent: z.boolean().optional(),
    userId: z.boolean().optional(),
    user: z.boolean().optional(),
    impersonatedBy: z.boolean().optional(),
    activeOrganizationId: z.boolean().optional(),
    token: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    updatedAt: z.boolean().optional()
  }).strict();

export const SessionFindManySelectZodSchema__findManySession_schema = z.object({
    id: z.boolean().optional(),
    expiresAt: z.boolean().optional(),
    ipAddress: z.boolean().optional(),
    userAgent: z.boolean().optional(),
    userId: z.boolean().optional(),
    user: z.boolean().optional(),
    impersonatedBy: z.boolean().optional(),
    activeOrganizationId: z.boolean().optional(),
    token: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    updatedAt: z.boolean().optional()
  }).strict();

export const SessionFindManySchema: z.ZodType<Prisma.SessionFindManyArgs, Prisma.SessionFindManyArgs> = z.object({ select: SessionFindManySelectSchema__findManySession_schema.optional(), include: z.lazy(() => SessionIncludeObjectSchema.optional()), orderBy: z.union([SessionOrderByWithRelationInputObjectSchema, SessionOrderByWithRelationInputObjectSchema.array()]).optional(), where: SessionWhereInputObjectSchema.optional(), cursor: SessionWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([SessionScalarFieldEnumSchema, SessionScalarFieldEnumSchema.array()]).optional() }).strict();

export const SessionFindManyZodSchema = z.object({ select: SessionFindManySelectSchema__findManySession_schema.optional(), include: z.lazy(() => SessionIncludeObjectSchema.optional()), orderBy: z.union([SessionOrderByWithRelationInputObjectSchema, SessionOrderByWithRelationInputObjectSchema.array()]).optional(), where: SessionWhereInputObjectSchema.optional(), cursor: SessionWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([SessionScalarFieldEnumSchema, SessionScalarFieldEnumSchema.array()]).optional() }).strict();

// File: createOneSession.schema.ts

export const SessionCreateOneSchema = z.object({ select: SessionSelectObjectSchema.optional(), include: SessionIncludeObjectSchema.optional(), data: z.union([SessionCreateInputObjectSchema, SessionUncheckedCreateInputObjectSchema])  })

// File: createManySession.schema.ts

export const SessionCreateManySchema = z.object({ data: z.union([ SessionCreateManyInputObjectSchema, z.array(SessionCreateManyInputObjectSchema) ]), skipDuplicates: z.boolean().optional() })

// File: deleteOneSession.schema.ts

export const SessionDeleteOneSchema = z.object({ select: SessionSelectObjectSchema.optional(), include: SessionIncludeObjectSchema.optional(), where: SessionWhereUniqueInputObjectSchema  })

// File: deleteManySession.schema.ts

export const SessionDeleteManySchema = z.object({ where: SessionWhereInputObjectSchema.optional()  })

// File: updateOneSession.schema.ts

export const SessionUpdateOneSchema = z.object({ select: SessionSelectObjectSchema.optional(), include: SessionIncludeObjectSchema.optional(), data: z.union([SessionUpdateInputObjectSchema, SessionUncheckedUpdateInputObjectSchema]), where: SessionWhereUniqueInputObjectSchema  })

// File: updateManySession.schema.ts

export const SessionUpdateManySchema = z.object({ data: SessionUpdateManyMutationInputObjectSchema, where: SessionWhereInputObjectSchema.optional()  })

// File: upsertOneSession.schema.ts

export const SessionUpsertSchema = z.object({ select: SessionSelectObjectSchema.optional(), include: SessionIncludeObjectSchema.optional(), where: SessionWhereUniqueInputObjectSchema, create: z.union([ SessionCreateInputObjectSchema, SessionUncheckedCreateInputObjectSchema ]), update: z.union([ SessionUpdateInputObjectSchema, SessionUncheckedUpdateInputObjectSchema ])  })

// File: aggregateSession.schema.ts

export const SessionAggregateSchema = z.object({ orderBy: z.union([SessionOrderByWithRelationInputObjectSchema, SessionOrderByWithRelationInputObjectSchema.array()]).optional(), where: SessionWhereInputObjectSchema.optional(), cursor: SessionWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([ z.literal(true), SessionCountAggregateInputObjectSchema ]).optional(), _min: SessionMinAggregateInputObjectSchema.optional(), _max: SessionMaxAggregateInputObjectSchema.optional() })

// File: groupBySession.schema.ts

export const SessionGroupBySchema = z.object({ where: SessionWhereInputObjectSchema.optional(), orderBy: z.union([SessionOrderByWithAggregationInputObjectSchema, SessionOrderByWithAggregationInputObjectSchema.array()]).optional(), having: SessionScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(SessionScalarFieldEnumSchema)  })

// File: findUniqueAccount.schema.ts

export const AccountFindUniqueSchema = z.object({ select: AccountSelectObjectSchema.optional(), include: AccountIncludeObjectSchema.optional(), where: AccountWhereUniqueInputObjectSchema })

// File: findFirstAccount.schema.ts

// Select schema needs to be in file to prevent circular imports
//------------------------------------------------------

export const AccountFindFirstSelectSchema__findFirstAccount_schema: z.ZodType<Prisma.AccountSelect, Prisma.AccountSelect> = z.object({
    id: z.boolean().optional(),
    accountId: z.boolean().optional(),
    providerId: z.boolean().optional(),
    userId: z.boolean().optional(),
    user: z.boolean().optional(),
    accessToken: z.boolean().optional(),
    refreshToken: z.boolean().optional(),
    idToken: z.boolean().optional(),
    expiresAt: z.boolean().optional(),
    password: z.boolean().optional(),
    accessTokenExpiresAt: z.boolean().optional(),
    refreshTokenExpiresAt: z.boolean().optional(),
    scope: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    updatedAt: z.boolean().optional()
  }).strict();

export const AccountFindFirstSelectZodSchema__findFirstAccount_schema = z.object({
    id: z.boolean().optional(),
    accountId: z.boolean().optional(),
    providerId: z.boolean().optional(),
    userId: z.boolean().optional(),
    user: z.boolean().optional(),
    accessToken: z.boolean().optional(),
    refreshToken: z.boolean().optional(),
    idToken: z.boolean().optional(),
    expiresAt: z.boolean().optional(),
    password: z.boolean().optional(),
    accessTokenExpiresAt: z.boolean().optional(),
    refreshTokenExpiresAt: z.boolean().optional(),
    scope: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    updatedAt: z.boolean().optional()
  }).strict();

export const AccountFindFirstSchema: z.ZodType<Prisma.AccountFindFirstArgs, Prisma.AccountFindFirstArgs> = z.object({ select: AccountFindFirstSelectSchema__findFirstAccount_schema.optional(), include: z.lazy(() => AccountIncludeObjectSchema.optional()), orderBy: z.union([AccountOrderByWithRelationInputObjectSchema, AccountOrderByWithRelationInputObjectSchema.array()]).optional(), where: AccountWhereInputObjectSchema.optional(), cursor: AccountWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([AccountScalarFieldEnumSchema, AccountScalarFieldEnumSchema.array()]).optional() }).strict();

export const AccountFindFirstZodSchema = z.object({ select: AccountFindFirstSelectSchema__findFirstAccount_schema.optional(), include: z.lazy(() => AccountIncludeObjectSchema.optional()), orderBy: z.union([AccountOrderByWithRelationInputObjectSchema, AccountOrderByWithRelationInputObjectSchema.array()]).optional(), where: AccountWhereInputObjectSchema.optional(), cursor: AccountWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([AccountScalarFieldEnumSchema, AccountScalarFieldEnumSchema.array()]).optional() }).strict();

// File: findManyAccount.schema.ts

// Select schema needs to be in file to prevent circular imports
//------------------------------------------------------

export const AccountFindManySelectSchema__findManyAccount_schema: z.ZodType<Prisma.AccountSelect, Prisma.AccountSelect> = z.object({
    id: z.boolean().optional(),
    accountId: z.boolean().optional(),
    providerId: z.boolean().optional(),
    userId: z.boolean().optional(),
    user: z.boolean().optional(),
    accessToken: z.boolean().optional(),
    refreshToken: z.boolean().optional(),
    idToken: z.boolean().optional(),
    expiresAt: z.boolean().optional(),
    password: z.boolean().optional(),
    accessTokenExpiresAt: z.boolean().optional(),
    refreshTokenExpiresAt: z.boolean().optional(),
    scope: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    updatedAt: z.boolean().optional()
  }).strict();

export const AccountFindManySelectZodSchema__findManyAccount_schema = z.object({
    id: z.boolean().optional(),
    accountId: z.boolean().optional(),
    providerId: z.boolean().optional(),
    userId: z.boolean().optional(),
    user: z.boolean().optional(),
    accessToken: z.boolean().optional(),
    refreshToken: z.boolean().optional(),
    idToken: z.boolean().optional(),
    expiresAt: z.boolean().optional(),
    password: z.boolean().optional(),
    accessTokenExpiresAt: z.boolean().optional(),
    refreshTokenExpiresAt: z.boolean().optional(),
    scope: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    updatedAt: z.boolean().optional()
  }).strict();

export const AccountFindManySchema: z.ZodType<Prisma.AccountFindManyArgs, Prisma.AccountFindManyArgs> = z.object({ select: AccountFindManySelectSchema__findManyAccount_schema.optional(), include: z.lazy(() => AccountIncludeObjectSchema.optional()), orderBy: z.union([AccountOrderByWithRelationInputObjectSchema, AccountOrderByWithRelationInputObjectSchema.array()]).optional(), where: AccountWhereInputObjectSchema.optional(), cursor: AccountWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([AccountScalarFieldEnumSchema, AccountScalarFieldEnumSchema.array()]).optional() }).strict();

export const AccountFindManyZodSchema = z.object({ select: AccountFindManySelectSchema__findManyAccount_schema.optional(), include: z.lazy(() => AccountIncludeObjectSchema.optional()), orderBy: z.union([AccountOrderByWithRelationInputObjectSchema, AccountOrderByWithRelationInputObjectSchema.array()]).optional(), where: AccountWhereInputObjectSchema.optional(), cursor: AccountWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([AccountScalarFieldEnumSchema, AccountScalarFieldEnumSchema.array()]).optional() }).strict();

// File: createOneAccount.schema.ts

export const AccountCreateOneSchema = z.object({ select: AccountSelectObjectSchema.optional(), include: AccountIncludeObjectSchema.optional(), data: z.union([AccountCreateInputObjectSchema, AccountUncheckedCreateInputObjectSchema])  })

// File: createManyAccount.schema.ts

export const AccountCreateManySchema = z.object({ data: z.union([ AccountCreateManyInputObjectSchema, z.array(AccountCreateManyInputObjectSchema) ]), skipDuplicates: z.boolean().optional() })

// File: deleteOneAccount.schema.ts

export const AccountDeleteOneSchema = z.object({ select: AccountSelectObjectSchema.optional(), include: AccountIncludeObjectSchema.optional(), where: AccountWhereUniqueInputObjectSchema  })

// File: deleteManyAccount.schema.ts

export const AccountDeleteManySchema = z.object({ where: AccountWhereInputObjectSchema.optional()  })

// File: updateOneAccount.schema.ts

export const AccountUpdateOneSchema = z.object({ select: AccountSelectObjectSchema.optional(), include: AccountIncludeObjectSchema.optional(), data: z.union([AccountUpdateInputObjectSchema, AccountUncheckedUpdateInputObjectSchema]), where: AccountWhereUniqueInputObjectSchema  })

// File: updateManyAccount.schema.ts

export const AccountUpdateManySchema = z.object({ data: AccountUpdateManyMutationInputObjectSchema, where: AccountWhereInputObjectSchema.optional()  })

// File: upsertOneAccount.schema.ts

export const AccountUpsertSchema = z.object({ select: AccountSelectObjectSchema.optional(), include: AccountIncludeObjectSchema.optional(), where: AccountWhereUniqueInputObjectSchema, create: z.union([ AccountCreateInputObjectSchema, AccountUncheckedCreateInputObjectSchema ]), update: z.union([ AccountUpdateInputObjectSchema, AccountUncheckedUpdateInputObjectSchema ])  })

// File: aggregateAccount.schema.ts

export const AccountAggregateSchema = z.object({ orderBy: z.union([AccountOrderByWithRelationInputObjectSchema, AccountOrderByWithRelationInputObjectSchema.array()]).optional(), where: AccountWhereInputObjectSchema.optional(), cursor: AccountWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([ z.literal(true), AccountCountAggregateInputObjectSchema ]).optional(), _min: AccountMinAggregateInputObjectSchema.optional(), _max: AccountMaxAggregateInputObjectSchema.optional() })

// File: groupByAccount.schema.ts

export const AccountGroupBySchema = z.object({ where: AccountWhereInputObjectSchema.optional(), orderBy: z.union([AccountOrderByWithAggregationInputObjectSchema, AccountOrderByWithAggregationInputObjectSchema.array()]).optional(), having: AccountScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(AccountScalarFieldEnumSchema)  })

// File: findUniqueVerification.schema.ts

export const VerificationFindUniqueSchema = z.object({ select: VerificationSelectObjectSchema.optional(),  where: VerificationWhereUniqueInputObjectSchema })

// File: findFirstVerification.schema.ts

// Select schema needs to be in file to prevent circular imports
//------------------------------------------------------

export const VerificationFindFirstSelectSchema__findFirstVerification_schema: z.ZodType<Prisma.VerificationSelect, Prisma.VerificationSelect> = z.object({
    id: z.boolean().optional(),
    identifier: z.boolean().optional(),
    value: z.boolean().optional(),
    expiresAt: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    updatedAt: z.boolean().optional()
  }).strict();

export const VerificationFindFirstSelectZodSchema__findFirstVerification_schema = z.object({
    id: z.boolean().optional(),
    identifier: z.boolean().optional(),
    value: z.boolean().optional(),
    expiresAt: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    updatedAt: z.boolean().optional()
  }).strict();

export const VerificationFindFirstSchema: z.ZodType<Prisma.VerificationFindFirstArgs, Prisma.VerificationFindFirstArgs> = z.object({ select: VerificationFindFirstSelectSchema__findFirstVerification_schema.optional(),  orderBy: z.union([VerificationOrderByWithRelationInputObjectSchema, VerificationOrderByWithRelationInputObjectSchema.array()]).optional(), where: VerificationWhereInputObjectSchema.optional(), cursor: VerificationWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([VerificationScalarFieldEnumSchema, VerificationScalarFieldEnumSchema.array()]).optional() }).strict();

export const VerificationFindFirstZodSchema = z.object({ select: VerificationFindFirstSelectSchema__findFirstVerification_schema.optional(),  orderBy: z.union([VerificationOrderByWithRelationInputObjectSchema, VerificationOrderByWithRelationInputObjectSchema.array()]).optional(), where: VerificationWhereInputObjectSchema.optional(), cursor: VerificationWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([VerificationScalarFieldEnumSchema, VerificationScalarFieldEnumSchema.array()]).optional() }).strict();

// File: findManyVerification.schema.ts

// Select schema needs to be in file to prevent circular imports
//------------------------------------------------------

export const VerificationFindManySelectSchema__findManyVerification_schema: z.ZodType<Prisma.VerificationSelect, Prisma.VerificationSelect> = z.object({
    id: z.boolean().optional(),
    identifier: z.boolean().optional(),
    value: z.boolean().optional(),
    expiresAt: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    updatedAt: z.boolean().optional()
  }).strict();

export const VerificationFindManySelectZodSchema__findManyVerification_schema = z.object({
    id: z.boolean().optional(),
    identifier: z.boolean().optional(),
    value: z.boolean().optional(),
    expiresAt: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    updatedAt: z.boolean().optional()
  }).strict();

export const VerificationFindManySchema: z.ZodType<Prisma.VerificationFindManyArgs, Prisma.VerificationFindManyArgs> = z.object({ select: VerificationFindManySelectSchema__findManyVerification_schema.optional(),  orderBy: z.union([VerificationOrderByWithRelationInputObjectSchema, VerificationOrderByWithRelationInputObjectSchema.array()]).optional(), where: VerificationWhereInputObjectSchema.optional(), cursor: VerificationWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([VerificationScalarFieldEnumSchema, VerificationScalarFieldEnumSchema.array()]).optional() }).strict();

export const VerificationFindManyZodSchema = z.object({ select: VerificationFindManySelectSchema__findManyVerification_schema.optional(),  orderBy: z.union([VerificationOrderByWithRelationInputObjectSchema, VerificationOrderByWithRelationInputObjectSchema.array()]).optional(), where: VerificationWhereInputObjectSchema.optional(), cursor: VerificationWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([VerificationScalarFieldEnumSchema, VerificationScalarFieldEnumSchema.array()]).optional() }).strict();

// File: createOneVerification.schema.ts

export const VerificationCreateOneSchema = z.object({ select: VerificationSelectObjectSchema.optional(),  data: z.union([VerificationCreateInputObjectSchema, VerificationUncheckedCreateInputObjectSchema])  })

// File: createManyVerification.schema.ts

export const VerificationCreateManySchema = z.object({ data: z.union([ VerificationCreateManyInputObjectSchema, z.array(VerificationCreateManyInputObjectSchema) ]), skipDuplicates: z.boolean().optional() })

// File: deleteOneVerification.schema.ts

export const VerificationDeleteOneSchema = z.object({ select: VerificationSelectObjectSchema.optional(),  where: VerificationWhereUniqueInputObjectSchema  })

// File: deleteManyVerification.schema.ts

export const VerificationDeleteManySchema = z.object({ where: VerificationWhereInputObjectSchema.optional()  })

// File: updateOneVerification.schema.ts

export const VerificationUpdateOneSchema = z.object({ select: VerificationSelectObjectSchema.optional(),  data: z.union([VerificationUpdateInputObjectSchema, VerificationUncheckedUpdateInputObjectSchema]), where: VerificationWhereUniqueInputObjectSchema  })

// File: updateManyVerification.schema.ts

export const VerificationUpdateManySchema = z.object({ data: VerificationUpdateManyMutationInputObjectSchema, where: VerificationWhereInputObjectSchema.optional()  })

// File: upsertOneVerification.schema.ts

export const VerificationUpsertSchema = z.object({ select: VerificationSelectObjectSchema.optional(),  where: VerificationWhereUniqueInputObjectSchema, create: z.union([ VerificationCreateInputObjectSchema, VerificationUncheckedCreateInputObjectSchema ]), update: z.union([ VerificationUpdateInputObjectSchema, VerificationUncheckedUpdateInputObjectSchema ])  })

// File: aggregateVerification.schema.ts

export const VerificationAggregateSchema = z.object({ orderBy: z.union([VerificationOrderByWithRelationInputObjectSchema, VerificationOrderByWithRelationInputObjectSchema.array()]).optional(), where: VerificationWhereInputObjectSchema.optional(), cursor: VerificationWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([ z.literal(true), VerificationCountAggregateInputObjectSchema ]).optional(), _min: VerificationMinAggregateInputObjectSchema.optional(), _max: VerificationMaxAggregateInputObjectSchema.optional() })

// File: groupByVerification.schema.ts

export const VerificationGroupBySchema = z.object({ where: VerificationWhereInputObjectSchema.optional(), orderBy: z.union([VerificationOrderByWithAggregationInputObjectSchema, VerificationOrderByWithAggregationInputObjectSchema.array()]).optional(), having: VerificationScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(VerificationScalarFieldEnumSchema)  })

// File: findUniquePasskey.schema.ts

export const PasskeyFindUniqueSchema = z.object({ select: PasskeySelectObjectSchema.optional(), include: PasskeyIncludeObjectSchema.optional(), where: PasskeyWhereUniqueInputObjectSchema })

// File: findFirstPasskey.schema.ts

// Select schema needs to be in file to prevent circular imports
//------------------------------------------------------

export const PasskeyFindFirstSelectSchema__findFirstPasskey_schema: z.ZodType<Prisma.PasskeySelect, Prisma.PasskeySelect> = z.object({
    id: z.boolean().optional(),
    name: z.boolean().optional(),
    publicKey: z.boolean().optional(),
    userId: z.boolean().optional(),
    user: z.boolean().optional(),
    credentialID: z.boolean().optional(),
    counter: z.boolean().optional(),
    deviceType: z.boolean().optional(),
    backedUp: z.boolean().optional(),
    transports: z.boolean().optional(),
    createdAt: z.boolean().optional()
  }).strict();

export const PasskeyFindFirstSelectZodSchema__findFirstPasskey_schema = z.object({
    id: z.boolean().optional(),
    name: z.boolean().optional(),
    publicKey: z.boolean().optional(),
    userId: z.boolean().optional(),
    user: z.boolean().optional(),
    credentialID: z.boolean().optional(),
    counter: z.boolean().optional(),
    deviceType: z.boolean().optional(),
    backedUp: z.boolean().optional(),
    transports: z.boolean().optional(),
    createdAt: z.boolean().optional()
  }).strict();

export const PasskeyFindFirstSchema: z.ZodType<Prisma.PasskeyFindFirstArgs, Prisma.PasskeyFindFirstArgs> = z.object({ select: PasskeyFindFirstSelectSchema__findFirstPasskey_schema.optional(), include: z.lazy(() => PasskeyIncludeObjectSchema.optional()), orderBy: z.union([PasskeyOrderByWithRelationInputObjectSchema, PasskeyOrderByWithRelationInputObjectSchema.array()]).optional(), where: PasskeyWhereInputObjectSchema.optional(), cursor: PasskeyWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([PasskeyScalarFieldEnumSchema, PasskeyScalarFieldEnumSchema.array()]).optional() }).strict();

export const PasskeyFindFirstZodSchema = z.object({ select: PasskeyFindFirstSelectSchema__findFirstPasskey_schema.optional(), include: z.lazy(() => PasskeyIncludeObjectSchema.optional()), orderBy: z.union([PasskeyOrderByWithRelationInputObjectSchema, PasskeyOrderByWithRelationInputObjectSchema.array()]).optional(), where: PasskeyWhereInputObjectSchema.optional(), cursor: PasskeyWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([PasskeyScalarFieldEnumSchema, PasskeyScalarFieldEnumSchema.array()]).optional() }).strict();

// File: findManyPasskey.schema.ts

// Select schema needs to be in file to prevent circular imports
//------------------------------------------------------

export const PasskeyFindManySelectSchema__findManyPasskey_schema: z.ZodType<Prisma.PasskeySelect, Prisma.PasskeySelect> = z.object({
    id: z.boolean().optional(),
    name: z.boolean().optional(),
    publicKey: z.boolean().optional(),
    userId: z.boolean().optional(),
    user: z.boolean().optional(),
    credentialID: z.boolean().optional(),
    counter: z.boolean().optional(),
    deviceType: z.boolean().optional(),
    backedUp: z.boolean().optional(),
    transports: z.boolean().optional(),
    createdAt: z.boolean().optional()
  }).strict();

export const PasskeyFindManySelectZodSchema__findManyPasskey_schema = z.object({
    id: z.boolean().optional(),
    name: z.boolean().optional(),
    publicKey: z.boolean().optional(),
    userId: z.boolean().optional(),
    user: z.boolean().optional(),
    credentialID: z.boolean().optional(),
    counter: z.boolean().optional(),
    deviceType: z.boolean().optional(),
    backedUp: z.boolean().optional(),
    transports: z.boolean().optional(),
    createdAt: z.boolean().optional()
  }).strict();

export const PasskeyFindManySchema: z.ZodType<Prisma.PasskeyFindManyArgs, Prisma.PasskeyFindManyArgs> = z.object({ select: PasskeyFindManySelectSchema__findManyPasskey_schema.optional(), include: z.lazy(() => PasskeyIncludeObjectSchema.optional()), orderBy: z.union([PasskeyOrderByWithRelationInputObjectSchema, PasskeyOrderByWithRelationInputObjectSchema.array()]).optional(), where: PasskeyWhereInputObjectSchema.optional(), cursor: PasskeyWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([PasskeyScalarFieldEnumSchema, PasskeyScalarFieldEnumSchema.array()]).optional() }).strict();

export const PasskeyFindManyZodSchema = z.object({ select: PasskeyFindManySelectSchema__findManyPasskey_schema.optional(), include: z.lazy(() => PasskeyIncludeObjectSchema.optional()), orderBy: z.union([PasskeyOrderByWithRelationInputObjectSchema, PasskeyOrderByWithRelationInputObjectSchema.array()]).optional(), where: PasskeyWhereInputObjectSchema.optional(), cursor: PasskeyWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([PasskeyScalarFieldEnumSchema, PasskeyScalarFieldEnumSchema.array()]).optional() }).strict();

// File: createOnePasskey.schema.ts

export const PasskeyCreateOneSchema = z.object({ select: PasskeySelectObjectSchema.optional(), include: PasskeyIncludeObjectSchema.optional(), data: z.union([PasskeyCreateInputObjectSchema, PasskeyUncheckedCreateInputObjectSchema])  })

// File: createManyPasskey.schema.ts

export const PasskeyCreateManySchema = z.object({ data: z.union([ PasskeyCreateManyInputObjectSchema, z.array(PasskeyCreateManyInputObjectSchema) ]), skipDuplicates: z.boolean().optional() })

// File: deleteOnePasskey.schema.ts

export const PasskeyDeleteOneSchema = z.object({ select: PasskeySelectObjectSchema.optional(), include: PasskeyIncludeObjectSchema.optional(), where: PasskeyWhereUniqueInputObjectSchema  })

// File: deleteManyPasskey.schema.ts

export const PasskeyDeleteManySchema = z.object({ where: PasskeyWhereInputObjectSchema.optional()  })

// File: updateOnePasskey.schema.ts

export const PasskeyUpdateOneSchema = z.object({ select: PasskeySelectObjectSchema.optional(), include: PasskeyIncludeObjectSchema.optional(), data: z.union([PasskeyUpdateInputObjectSchema, PasskeyUncheckedUpdateInputObjectSchema]), where: PasskeyWhereUniqueInputObjectSchema  })

// File: updateManyPasskey.schema.ts

export const PasskeyUpdateManySchema = z.object({ data: PasskeyUpdateManyMutationInputObjectSchema, where: PasskeyWhereInputObjectSchema.optional()  })

// File: upsertOnePasskey.schema.ts

export const PasskeyUpsertSchema = z.object({ select: PasskeySelectObjectSchema.optional(), include: PasskeyIncludeObjectSchema.optional(), where: PasskeyWhereUniqueInputObjectSchema, create: z.union([ PasskeyCreateInputObjectSchema, PasskeyUncheckedCreateInputObjectSchema ]), update: z.union([ PasskeyUpdateInputObjectSchema, PasskeyUncheckedUpdateInputObjectSchema ])  })

// File: aggregatePasskey.schema.ts

export const PasskeyAggregateSchema = z.object({ orderBy: z.union([PasskeyOrderByWithRelationInputObjectSchema, PasskeyOrderByWithRelationInputObjectSchema.array()]).optional(), where: PasskeyWhereInputObjectSchema.optional(), cursor: PasskeyWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([ z.literal(true), PasskeyCountAggregateInputObjectSchema ]).optional(), _min: PasskeyMinAggregateInputObjectSchema.optional(), _max: PasskeyMaxAggregateInputObjectSchema.optional(), _avg: PasskeyAvgAggregateInputObjectSchema.optional(), _sum: PasskeySumAggregateInputObjectSchema.optional() })

// File: groupByPasskey.schema.ts

export const PasskeyGroupBySchema = z.object({ where: PasskeyWhereInputObjectSchema.optional(), orderBy: z.union([PasskeyOrderByWithAggregationInputObjectSchema, PasskeyOrderByWithAggregationInputObjectSchema.array()]).optional(), having: PasskeyScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(PasskeyScalarFieldEnumSchema)  })

// File: findUniqueTwoFactor.schema.ts

export const TwoFactorFindUniqueSchema = z.object({ select: TwoFactorSelectObjectSchema.optional(), include: TwoFactorIncludeObjectSchema.optional(), where: TwoFactorWhereUniqueInputObjectSchema })

// File: findFirstTwoFactor.schema.ts

// Select schema needs to be in file to prevent circular imports
//------------------------------------------------------

export const TwoFactorFindFirstSelectSchema__findFirstTwoFactor_schema: z.ZodType<Prisma.TwoFactorSelect, Prisma.TwoFactorSelect> = z.object({
    id: z.boolean().optional(),
    secret: z.boolean().optional(),
    backupCodes: z.boolean().optional(),
    userId: z.boolean().optional(),
    user: z.boolean().optional()
  }).strict();

export const TwoFactorFindFirstSelectZodSchema__findFirstTwoFactor_schema = z.object({
    id: z.boolean().optional(),
    secret: z.boolean().optional(),
    backupCodes: z.boolean().optional(),
    userId: z.boolean().optional(),
    user: z.boolean().optional()
  }).strict();

export const TwoFactorFindFirstSchema: z.ZodType<Prisma.TwoFactorFindFirstArgs, Prisma.TwoFactorFindFirstArgs> = z.object({ select: TwoFactorFindFirstSelectSchema__findFirstTwoFactor_schema.optional(), include: z.lazy(() => TwoFactorIncludeObjectSchema.optional()), orderBy: z.union([TwoFactorOrderByWithRelationInputObjectSchema, TwoFactorOrderByWithRelationInputObjectSchema.array()]).optional(), where: TwoFactorWhereInputObjectSchema.optional(), cursor: TwoFactorWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([TwoFactorScalarFieldEnumSchema, TwoFactorScalarFieldEnumSchema.array()]).optional() }).strict();

export const TwoFactorFindFirstZodSchema = z.object({ select: TwoFactorFindFirstSelectSchema__findFirstTwoFactor_schema.optional(), include: z.lazy(() => TwoFactorIncludeObjectSchema.optional()), orderBy: z.union([TwoFactorOrderByWithRelationInputObjectSchema, TwoFactorOrderByWithRelationInputObjectSchema.array()]).optional(), where: TwoFactorWhereInputObjectSchema.optional(), cursor: TwoFactorWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([TwoFactorScalarFieldEnumSchema, TwoFactorScalarFieldEnumSchema.array()]).optional() }).strict();

// File: findManyTwoFactor.schema.ts

// Select schema needs to be in file to prevent circular imports
//------------------------------------------------------

export const TwoFactorFindManySelectSchema__findManyTwoFactor_schema: z.ZodType<Prisma.TwoFactorSelect, Prisma.TwoFactorSelect> = z.object({
    id: z.boolean().optional(),
    secret: z.boolean().optional(),
    backupCodes: z.boolean().optional(),
    userId: z.boolean().optional(),
    user: z.boolean().optional()
  }).strict();

export const TwoFactorFindManySelectZodSchema__findManyTwoFactor_schema = z.object({
    id: z.boolean().optional(),
    secret: z.boolean().optional(),
    backupCodes: z.boolean().optional(),
    userId: z.boolean().optional(),
    user: z.boolean().optional()
  }).strict();

export const TwoFactorFindManySchema: z.ZodType<Prisma.TwoFactorFindManyArgs, Prisma.TwoFactorFindManyArgs> = z.object({ select: TwoFactorFindManySelectSchema__findManyTwoFactor_schema.optional(), include: z.lazy(() => TwoFactorIncludeObjectSchema.optional()), orderBy: z.union([TwoFactorOrderByWithRelationInputObjectSchema, TwoFactorOrderByWithRelationInputObjectSchema.array()]).optional(), where: TwoFactorWhereInputObjectSchema.optional(), cursor: TwoFactorWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([TwoFactorScalarFieldEnumSchema, TwoFactorScalarFieldEnumSchema.array()]).optional() }).strict();

export const TwoFactorFindManyZodSchema = z.object({ select: TwoFactorFindManySelectSchema__findManyTwoFactor_schema.optional(), include: z.lazy(() => TwoFactorIncludeObjectSchema.optional()), orderBy: z.union([TwoFactorOrderByWithRelationInputObjectSchema, TwoFactorOrderByWithRelationInputObjectSchema.array()]).optional(), where: TwoFactorWhereInputObjectSchema.optional(), cursor: TwoFactorWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([TwoFactorScalarFieldEnumSchema, TwoFactorScalarFieldEnumSchema.array()]).optional() }).strict();

// File: createOneTwoFactor.schema.ts

export const TwoFactorCreateOneSchema = z.object({ select: TwoFactorSelectObjectSchema.optional(), include: TwoFactorIncludeObjectSchema.optional(), data: z.union([TwoFactorCreateInputObjectSchema, TwoFactorUncheckedCreateInputObjectSchema])  })

// File: createManyTwoFactor.schema.ts

export const TwoFactorCreateManySchema = z.object({ data: z.union([ TwoFactorCreateManyInputObjectSchema, z.array(TwoFactorCreateManyInputObjectSchema) ]), skipDuplicates: z.boolean().optional() })

// File: deleteOneTwoFactor.schema.ts

export const TwoFactorDeleteOneSchema = z.object({ select: TwoFactorSelectObjectSchema.optional(), include: TwoFactorIncludeObjectSchema.optional(), where: TwoFactorWhereUniqueInputObjectSchema  })

// File: deleteManyTwoFactor.schema.ts

export const TwoFactorDeleteManySchema = z.object({ where: TwoFactorWhereInputObjectSchema.optional()  })

// File: updateOneTwoFactor.schema.ts

export const TwoFactorUpdateOneSchema = z.object({ select: TwoFactorSelectObjectSchema.optional(), include: TwoFactorIncludeObjectSchema.optional(), data: z.union([TwoFactorUpdateInputObjectSchema, TwoFactorUncheckedUpdateInputObjectSchema]), where: TwoFactorWhereUniqueInputObjectSchema  })

// File: updateManyTwoFactor.schema.ts

export const TwoFactorUpdateManySchema = z.object({ data: TwoFactorUpdateManyMutationInputObjectSchema, where: TwoFactorWhereInputObjectSchema.optional()  })

// File: upsertOneTwoFactor.schema.ts

export const TwoFactorUpsertSchema = z.object({ select: TwoFactorSelectObjectSchema.optional(), include: TwoFactorIncludeObjectSchema.optional(), where: TwoFactorWhereUniqueInputObjectSchema, create: z.union([ TwoFactorCreateInputObjectSchema, TwoFactorUncheckedCreateInputObjectSchema ]), update: z.union([ TwoFactorUpdateInputObjectSchema, TwoFactorUncheckedUpdateInputObjectSchema ])  })

// File: aggregateTwoFactor.schema.ts

export const TwoFactorAggregateSchema = z.object({ orderBy: z.union([TwoFactorOrderByWithRelationInputObjectSchema, TwoFactorOrderByWithRelationInputObjectSchema.array()]).optional(), where: TwoFactorWhereInputObjectSchema.optional(), cursor: TwoFactorWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([ z.literal(true), TwoFactorCountAggregateInputObjectSchema ]).optional(), _min: TwoFactorMinAggregateInputObjectSchema.optional(), _max: TwoFactorMaxAggregateInputObjectSchema.optional() })

// File: groupByTwoFactor.schema.ts

export const TwoFactorGroupBySchema = z.object({ where: TwoFactorWhereInputObjectSchema.optional(), orderBy: z.union([TwoFactorOrderByWithAggregationInputObjectSchema, TwoFactorOrderByWithAggregationInputObjectSchema.array()]).optional(), having: TwoFactorScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(TwoFactorScalarFieldEnumSchema)  })

// File: findUniqueOrganization.schema.ts

export const OrganizationFindUniqueSchema = z.object({ select: OrganizationSelectObjectSchema.optional(), include: OrganizationIncludeObjectSchema.optional(), where: OrganizationWhereUniqueInputObjectSchema })

// File: findFirstOrganization.schema.ts

// Select schema needs to be in file to prevent circular imports
//------------------------------------------------------

export const OrganizationFindFirstSelectSchema__findFirstOrganization_schema: z.ZodType<Prisma.OrganizationSelect, Prisma.OrganizationSelect> = z.object({
    id: z.boolean().optional(),
    name: z.boolean().optional(),
    slug: z.boolean().optional(),
    logo: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    metadata: z.boolean().optional(),
    paymentsCustomerId: z.boolean().optional(),
    members: z.boolean().optional(),
    invitations: z.boolean().optional(),
    purchases: z.boolean().optional(),
    aiChats: z.boolean().optional(),
    _count: z.boolean().optional()
  }).strict();

export const OrganizationFindFirstSelectZodSchema__findFirstOrganization_schema = z.object({
    id: z.boolean().optional(),
    name: z.boolean().optional(),
    slug: z.boolean().optional(),
    logo: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    metadata: z.boolean().optional(),
    paymentsCustomerId: z.boolean().optional(),
    members: z.boolean().optional(),
    invitations: z.boolean().optional(),
    purchases: z.boolean().optional(),
    aiChats: z.boolean().optional(),
    _count: z.boolean().optional()
  }).strict();

export const OrganizationFindFirstSchema: z.ZodType<Prisma.OrganizationFindFirstArgs, Prisma.OrganizationFindFirstArgs> = z.object({ select: OrganizationFindFirstSelectSchema__findFirstOrganization_schema.optional(), include: z.lazy(() => OrganizationIncludeObjectSchema.optional()), orderBy: z.union([OrganizationOrderByWithRelationInputObjectSchema, OrganizationOrderByWithRelationInputObjectSchema.array()]).optional(), where: OrganizationWhereInputObjectSchema.optional(), cursor: OrganizationWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([OrganizationScalarFieldEnumSchema, OrganizationScalarFieldEnumSchema.array()]).optional() }).strict();

export const OrganizationFindFirstZodSchema = z.object({ select: OrganizationFindFirstSelectSchema__findFirstOrganization_schema.optional(), include: z.lazy(() => OrganizationIncludeObjectSchema.optional()), orderBy: z.union([OrganizationOrderByWithRelationInputObjectSchema, OrganizationOrderByWithRelationInputObjectSchema.array()]).optional(), where: OrganizationWhereInputObjectSchema.optional(), cursor: OrganizationWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([OrganizationScalarFieldEnumSchema, OrganizationScalarFieldEnumSchema.array()]).optional() }).strict();

// File: findManyOrganization.schema.ts

// Select schema needs to be in file to prevent circular imports
//------------------------------------------------------

export const OrganizationFindManySelectSchema__findManyOrganization_schema: z.ZodType<Prisma.OrganizationSelect, Prisma.OrganizationSelect> = z.object({
    id: z.boolean().optional(),
    name: z.boolean().optional(),
    slug: z.boolean().optional(),
    logo: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    metadata: z.boolean().optional(),
    paymentsCustomerId: z.boolean().optional(),
    members: z.boolean().optional(),
    invitations: z.boolean().optional(),
    purchases: z.boolean().optional(),
    aiChats: z.boolean().optional(),
    _count: z.boolean().optional()
  }).strict();

export const OrganizationFindManySelectZodSchema__findManyOrganization_schema = z.object({
    id: z.boolean().optional(),
    name: z.boolean().optional(),
    slug: z.boolean().optional(),
    logo: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    metadata: z.boolean().optional(),
    paymentsCustomerId: z.boolean().optional(),
    members: z.boolean().optional(),
    invitations: z.boolean().optional(),
    purchases: z.boolean().optional(),
    aiChats: z.boolean().optional(),
    _count: z.boolean().optional()
  }).strict();

export const OrganizationFindManySchema: z.ZodType<Prisma.OrganizationFindManyArgs, Prisma.OrganizationFindManyArgs> = z.object({ select: OrganizationFindManySelectSchema__findManyOrganization_schema.optional(), include: z.lazy(() => OrganizationIncludeObjectSchema.optional()), orderBy: z.union([OrganizationOrderByWithRelationInputObjectSchema, OrganizationOrderByWithRelationInputObjectSchema.array()]).optional(), where: OrganizationWhereInputObjectSchema.optional(), cursor: OrganizationWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([OrganizationScalarFieldEnumSchema, OrganizationScalarFieldEnumSchema.array()]).optional() }).strict();

export const OrganizationFindManyZodSchema = z.object({ select: OrganizationFindManySelectSchema__findManyOrganization_schema.optional(), include: z.lazy(() => OrganizationIncludeObjectSchema.optional()), orderBy: z.union([OrganizationOrderByWithRelationInputObjectSchema, OrganizationOrderByWithRelationInputObjectSchema.array()]).optional(), where: OrganizationWhereInputObjectSchema.optional(), cursor: OrganizationWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([OrganizationScalarFieldEnumSchema, OrganizationScalarFieldEnumSchema.array()]).optional() }).strict();

// File: createOneOrganization.schema.ts

export const OrganizationCreateOneSchema = z.object({ select: OrganizationSelectObjectSchema.optional(), include: OrganizationIncludeObjectSchema.optional(), data: z.union([OrganizationCreateInputObjectSchema, OrganizationUncheckedCreateInputObjectSchema])  })

// File: createManyOrganization.schema.ts

export const OrganizationCreateManySchema = z.object({ data: z.union([ OrganizationCreateManyInputObjectSchema, z.array(OrganizationCreateManyInputObjectSchema) ]), skipDuplicates: z.boolean().optional() })

// File: deleteOneOrganization.schema.ts

export const OrganizationDeleteOneSchema = z.object({ select: OrganizationSelectObjectSchema.optional(), include: OrganizationIncludeObjectSchema.optional(), where: OrganizationWhereUniqueInputObjectSchema  })

// File: deleteManyOrganization.schema.ts

export const OrganizationDeleteManySchema = z.object({ where: OrganizationWhereInputObjectSchema.optional()  })

// File: updateOneOrganization.schema.ts

export const OrganizationUpdateOneSchema = z.object({ select: OrganizationSelectObjectSchema.optional(), include: OrganizationIncludeObjectSchema.optional(), data: z.union([OrganizationUpdateInputObjectSchema, OrganizationUncheckedUpdateInputObjectSchema]), where: OrganizationWhereUniqueInputObjectSchema  })

// File: updateManyOrganization.schema.ts

export const OrganizationUpdateManySchema = z.object({ data: OrganizationUpdateManyMutationInputObjectSchema, where: OrganizationWhereInputObjectSchema.optional()  })

// File: upsertOneOrganization.schema.ts

export const OrganizationUpsertSchema = z.object({ select: OrganizationSelectObjectSchema.optional(), include: OrganizationIncludeObjectSchema.optional(), where: OrganizationWhereUniqueInputObjectSchema, create: z.union([ OrganizationCreateInputObjectSchema, OrganizationUncheckedCreateInputObjectSchema ]), update: z.union([ OrganizationUpdateInputObjectSchema, OrganizationUncheckedUpdateInputObjectSchema ])  })

// File: aggregateOrganization.schema.ts

export const OrganizationAggregateSchema = z.object({ orderBy: z.union([OrganizationOrderByWithRelationInputObjectSchema, OrganizationOrderByWithRelationInputObjectSchema.array()]).optional(), where: OrganizationWhereInputObjectSchema.optional(), cursor: OrganizationWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([ z.literal(true), OrganizationCountAggregateInputObjectSchema ]).optional(), _min: OrganizationMinAggregateInputObjectSchema.optional(), _max: OrganizationMaxAggregateInputObjectSchema.optional() })

// File: groupByOrganization.schema.ts

export const OrganizationGroupBySchema = z.object({ where: OrganizationWhereInputObjectSchema.optional(), orderBy: z.union([OrganizationOrderByWithAggregationInputObjectSchema, OrganizationOrderByWithAggregationInputObjectSchema.array()]).optional(), having: OrganizationScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(OrganizationScalarFieldEnumSchema)  })

// File: findUniqueMember.schema.ts

export const MemberFindUniqueSchema = z.object({ select: MemberSelectObjectSchema.optional(), include: MemberIncludeObjectSchema.optional(), where: MemberWhereUniqueInputObjectSchema })

// File: findFirstMember.schema.ts

// Select schema needs to be in file to prevent circular imports
//------------------------------------------------------

export const MemberFindFirstSelectSchema__findFirstMember_schema: z.ZodType<Prisma.MemberSelect, Prisma.MemberSelect> = z.object({
    id: z.boolean().optional(),
    organizationId: z.boolean().optional(),
    organization: z.boolean().optional(),
    userId: z.boolean().optional(),
    user: z.boolean().optional(),
    role: z.boolean().optional(),
    createdAt: z.boolean().optional()
  }).strict();

export const MemberFindFirstSelectZodSchema__findFirstMember_schema = z.object({
    id: z.boolean().optional(),
    organizationId: z.boolean().optional(),
    organization: z.boolean().optional(),
    userId: z.boolean().optional(),
    user: z.boolean().optional(),
    role: z.boolean().optional(),
    createdAt: z.boolean().optional()
  }).strict();

export const MemberFindFirstSchema: z.ZodType<Prisma.MemberFindFirstArgs, Prisma.MemberFindFirstArgs> = z.object({ select: MemberFindFirstSelectSchema__findFirstMember_schema.optional(), include: z.lazy(() => MemberIncludeObjectSchema.optional()), orderBy: z.union([MemberOrderByWithRelationInputObjectSchema, MemberOrderByWithRelationInputObjectSchema.array()]).optional(), where: MemberWhereInputObjectSchema.optional(), cursor: MemberWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([MemberScalarFieldEnumSchema, MemberScalarFieldEnumSchema.array()]).optional() }).strict();

export const MemberFindFirstZodSchema = z.object({ select: MemberFindFirstSelectSchema__findFirstMember_schema.optional(), include: z.lazy(() => MemberIncludeObjectSchema.optional()), orderBy: z.union([MemberOrderByWithRelationInputObjectSchema, MemberOrderByWithRelationInputObjectSchema.array()]).optional(), where: MemberWhereInputObjectSchema.optional(), cursor: MemberWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([MemberScalarFieldEnumSchema, MemberScalarFieldEnumSchema.array()]).optional() }).strict();

// File: findManyMember.schema.ts

// Select schema needs to be in file to prevent circular imports
//------------------------------------------------------

export const MemberFindManySelectSchema__findManyMember_schema: z.ZodType<Prisma.MemberSelect, Prisma.MemberSelect> = z.object({
    id: z.boolean().optional(),
    organizationId: z.boolean().optional(),
    organization: z.boolean().optional(),
    userId: z.boolean().optional(),
    user: z.boolean().optional(),
    role: z.boolean().optional(),
    createdAt: z.boolean().optional()
  }).strict();

export const MemberFindManySelectZodSchema__findManyMember_schema = z.object({
    id: z.boolean().optional(),
    organizationId: z.boolean().optional(),
    organization: z.boolean().optional(),
    userId: z.boolean().optional(),
    user: z.boolean().optional(),
    role: z.boolean().optional(),
    createdAt: z.boolean().optional()
  }).strict();

export const MemberFindManySchema: z.ZodType<Prisma.MemberFindManyArgs, Prisma.MemberFindManyArgs> = z.object({ select: MemberFindManySelectSchema__findManyMember_schema.optional(), include: z.lazy(() => MemberIncludeObjectSchema.optional()), orderBy: z.union([MemberOrderByWithRelationInputObjectSchema, MemberOrderByWithRelationInputObjectSchema.array()]).optional(), where: MemberWhereInputObjectSchema.optional(), cursor: MemberWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([MemberScalarFieldEnumSchema, MemberScalarFieldEnumSchema.array()]).optional() }).strict();

export const MemberFindManyZodSchema = z.object({ select: MemberFindManySelectSchema__findManyMember_schema.optional(), include: z.lazy(() => MemberIncludeObjectSchema.optional()), orderBy: z.union([MemberOrderByWithRelationInputObjectSchema, MemberOrderByWithRelationInputObjectSchema.array()]).optional(), where: MemberWhereInputObjectSchema.optional(), cursor: MemberWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([MemberScalarFieldEnumSchema, MemberScalarFieldEnumSchema.array()]).optional() }).strict();

// File: createOneMember.schema.ts

export const MemberCreateOneSchema = z.object({ select: MemberSelectObjectSchema.optional(), include: MemberIncludeObjectSchema.optional(), data: z.union([MemberCreateInputObjectSchema, MemberUncheckedCreateInputObjectSchema])  })

// File: createManyMember.schema.ts

export const MemberCreateManySchema = z.object({ data: z.union([ MemberCreateManyInputObjectSchema, z.array(MemberCreateManyInputObjectSchema) ]), skipDuplicates: z.boolean().optional() })

// File: deleteOneMember.schema.ts

export const MemberDeleteOneSchema = z.object({ select: MemberSelectObjectSchema.optional(), include: MemberIncludeObjectSchema.optional(), where: MemberWhereUniqueInputObjectSchema  })

// File: deleteManyMember.schema.ts

export const MemberDeleteManySchema = z.object({ where: MemberWhereInputObjectSchema.optional()  })

// File: updateOneMember.schema.ts

export const MemberUpdateOneSchema = z.object({ select: MemberSelectObjectSchema.optional(), include: MemberIncludeObjectSchema.optional(), data: z.union([MemberUpdateInputObjectSchema, MemberUncheckedUpdateInputObjectSchema]), where: MemberWhereUniqueInputObjectSchema  })

// File: updateManyMember.schema.ts

export const MemberUpdateManySchema = z.object({ data: MemberUpdateManyMutationInputObjectSchema, where: MemberWhereInputObjectSchema.optional()  })

// File: upsertOneMember.schema.ts

export const MemberUpsertSchema = z.object({ select: MemberSelectObjectSchema.optional(), include: MemberIncludeObjectSchema.optional(), where: MemberWhereUniqueInputObjectSchema, create: z.union([ MemberCreateInputObjectSchema, MemberUncheckedCreateInputObjectSchema ]), update: z.union([ MemberUpdateInputObjectSchema, MemberUncheckedUpdateInputObjectSchema ])  })

// File: aggregateMember.schema.ts

export const MemberAggregateSchema = z.object({ orderBy: z.union([MemberOrderByWithRelationInputObjectSchema, MemberOrderByWithRelationInputObjectSchema.array()]).optional(), where: MemberWhereInputObjectSchema.optional(), cursor: MemberWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([ z.literal(true), MemberCountAggregateInputObjectSchema ]).optional(), _min: MemberMinAggregateInputObjectSchema.optional(), _max: MemberMaxAggregateInputObjectSchema.optional() })

// File: groupByMember.schema.ts

export const MemberGroupBySchema = z.object({ where: MemberWhereInputObjectSchema.optional(), orderBy: z.union([MemberOrderByWithAggregationInputObjectSchema, MemberOrderByWithAggregationInputObjectSchema.array()]).optional(), having: MemberScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(MemberScalarFieldEnumSchema)  })

// File: findUniqueInvitation.schema.ts

export const InvitationFindUniqueSchema = z.object({ select: InvitationSelectObjectSchema.optional(), include: InvitationIncludeObjectSchema.optional(), where: InvitationWhereUniqueInputObjectSchema })

// File: findFirstInvitation.schema.ts

// Select schema needs to be in file to prevent circular imports
//------------------------------------------------------

export const InvitationFindFirstSelectSchema__findFirstInvitation_schema: z.ZodType<Prisma.InvitationSelect, Prisma.InvitationSelect> = z.object({
    id: z.boolean().optional(),
    organizationId: z.boolean().optional(),
    organization: z.boolean().optional(),
    email: z.boolean().optional(),
    role: z.boolean().optional(),
    status: z.boolean().optional(),
    expiresAt: z.boolean().optional(),
    inviterId: z.boolean().optional(),
    user: z.boolean().optional()
  }).strict();

export const InvitationFindFirstSelectZodSchema__findFirstInvitation_schema = z.object({
    id: z.boolean().optional(),
    organizationId: z.boolean().optional(),
    organization: z.boolean().optional(),
    email: z.boolean().optional(),
    role: z.boolean().optional(),
    status: z.boolean().optional(),
    expiresAt: z.boolean().optional(),
    inviterId: z.boolean().optional(),
    user: z.boolean().optional()
  }).strict();

export const InvitationFindFirstSchema: z.ZodType<Prisma.InvitationFindFirstArgs, Prisma.InvitationFindFirstArgs> = z.object({ select: InvitationFindFirstSelectSchema__findFirstInvitation_schema.optional(), include: z.lazy(() => InvitationIncludeObjectSchema.optional()), orderBy: z.union([InvitationOrderByWithRelationInputObjectSchema, InvitationOrderByWithRelationInputObjectSchema.array()]).optional(), where: InvitationWhereInputObjectSchema.optional(), cursor: InvitationWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([InvitationScalarFieldEnumSchema, InvitationScalarFieldEnumSchema.array()]).optional() }).strict();

export const InvitationFindFirstZodSchema = z.object({ select: InvitationFindFirstSelectSchema__findFirstInvitation_schema.optional(), include: z.lazy(() => InvitationIncludeObjectSchema.optional()), orderBy: z.union([InvitationOrderByWithRelationInputObjectSchema, InvitationOrderByWithRelationInputObjectSchema.array()]).optional(), where: InvitationWhereInputObjectSchema.optional(), cursor: InvitationWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([InvitationScalarFieldEnumSchema, InvitationScalarFieldEnumSchema.array()]).optional() }).strict();

// File: findManyInvitation.schema.ts

// Select schema needs to be in file to prevent circular imports
//------------------------------------------------------

export const InvitationFindManySelectSchema__findManyInvitation_schema: z.ZodType<Prisma.InvitationSelect, Prisma.InvitationSelect> = z.object({
    id: z.boolean().optional(),
    organizationId: z.boolean().optional(),
    organization: z.boolean().optional(),
    email: z.boolean().optional(),
    role: z.boolean().optional(),
    status: z.boolean().optional(),
    expiresAt: z.boolean().optional(),
    inviterId: z.boolean().optional(),
    user: z.boolean().optional()
  }).strict();

export const InvitationFindManySelectZodSchema__findManyInvitation_schema = z.object({
    id: z.boolean().optional(),
    organizationId: z.boolean().optional(),
    organization: z.boolean().optional(),
    email: z.boolean().optional(),
    role: z.boolean().optional(),
    status: z.boolean().optional(),
    expiresAt: z.boolean().optional(),
    inviterId: z.boolean().optional(),
    user: z.boolean().optional()
  }).strict();

export const InvitationFindManySchema: z.ZodType<Prisma.InvitationFindManyArgs, Prisma.InvitationFindManyArgs> = z.object({ select: InvitationFindManySelectSchema__findManyInvitation_schema.optional(), include: z.lazy(() => InvitationIncludeObjectSchema.optional()), orderBy: z.union([InvitationOrderByWithRelationInputObjectSchema, InvitationOrderByWithRelationInputObjectSchema.array()]).optional(), where: InvitationWhereInputObjectSchema.optional(), cursor: InvitationWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([InvitationScalarFieldEnumSchema, InvitationScalarFieldEnumSchema.array()]).optional() }).strict();

export const InvitationFindManyZodSchema = z.object({ select: InvitationFindManySelectSchema__findManyInvitation_schema.optional(), include: z.lazy(() => InvitationIncludeObjectSchema.optional()), orderBy: z.union([InvitationOrderByWithRelationInputObjectSchema, InvitationOrderByWithRelationInputObjectSchema.array()]).optional(), where: InvitationWhereInputObjectSchema.optional(), cursor: InvitationWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([InvitationScalarFieldEnumSchema, InvitationScalarFieldEnumSchema.array()]).optional() }).strict();

// File: createOneInvitation.schema.ts

export const InvitationCreateOneSchema = z.object({ select: InvitationSelectObjectSchema.optional(), include: InvitationIncludeObjectSchema.optional(), data: z.union([InvitationCreateInputObjectSchema, InvitationUncheckedCreateInputObjectSchema])  })

// File: createManyInvitation.schema.ts

export const InvitationCreateManySchema = z.object({ data: z.union([ InvitationCreateManyInputObjectSchema, z.array(InvitationCreateManyInputObjectSchema) ]), skipDuplicates: z.boolean().optional() })

// File: deleteOneInvitation.schema.ts

export const InvitationDeleteOneSchema = z.object({ select: InvitationSelectObjectSchema.optional(), include: InvitationIncludeObjectSchema.optional(), where: InvitationWhereUniqueInputObjectSchema  })

// File: deleteManyInvitation.schema.ts

export const InvitationDeleteManySchema = z.object({ where: InvitationWhereInputObjectSchema.optional()  })

// File: updateOneInvitation.schema.ts

export const InvitationUpdateOneSchema = z.object({ select: InvitationSelectObjectSchema.optional(), include: InvitationIncludeObjectSchema.optional(), data: z.union([InvitationUpdateInputObjectSchema, InvitationUncheckedUpdateInputObjectSchema]), where: InvitationWhereUniqueInputObjectSchema  })

// File: updateManyInvitation.schema.ts

export const InvitationUpdateManySchema = z.object({ data: InvitationUpdateManyMutationInputObjectSchema, where: InvitationWhereInputObjectSchema.optional()  })

// File: upsertOneInvitation.schema.ts

export const InvitationUpsertSchema = z.object({ select: InvitationSelectObjectSchema.optional(), include: InvitationIncludeObjectSchema.optional(), where: InvitationWhereUniqueInputObjectSchema, create: z.union([ InvitationCreateInputObjectSchema, InvitationUncheckedCreateInputObjectSchema ]), update: z.union([ InvitationUpdateInputObjectSchema, InvitationUncheckedUpdateInputObjectSchema ])  })

// File: aggregateInvitation.schema.ts

export const InvitationAggregateSchema = z.object({ orderBy: z.union([InvitationOrderByWithRelationInputObjectSchema, InvitationOrderByWithRelationInputObjectSchema.array()]).optional(), where: InvitationWhereInputObjectSchema.optional(), cursor: InvitationWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([ z.literal(true), InvitationCountAggregateInputObjectSchema ]).optional(), _min: InvitationMinAggregateInputObjectSchema.optional(), _max: InvitationMaxAggregateInputObjectSchema.optional() })

// File: groupByInvitation.schema.ts

export const InvitationGroupBySchema = z.object({ where: InvitationWhereInputObjectSchema.optional(), orderBy: z.union([InvitationOrderByWithAggregationInputObjectSchema, InvitationOrderByWithAggregationInputObjectSchema.array()]).optional(), having: InvitationScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(InvitationScalarFieldEnumSchema)  })

// File: findUniquePurchase.schema.ts

export const PurchaseFindUniqueSchema = z.object({ select: PurchaseSelectObjectSchema.optional(), include: PurchaseIncludeObjectSchema.optional(), where: PurchaseWhereUniqueInputObjectSchema })

// File: findFirstPurchase.schema.ts

// Select schema needs to be in file to prevent circular imports
//------------------------------------------------------

export const PurchaseFindFirstSelectSchema__findFirstPurchase_schema: z.ZodType<Prisma.PurchaseSelect, Prisma.PurchaseSelect> = z.object({
    id: z.boolean().optional(),
    organization: z.boolean().optional(),
    organizationId: z.boolean().optional(),
    user: z.boolean().optional(),
    userId: z.boolean().optional(),
    type: z.boolean().optional(),
    customerId: z.boolean().optional(),
    subscriptionId: z.boolean().optional(),
    productId: z.boolean().optional(),
    status: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    updatedAt: z.boolean().optional()
  }).strict();

export const PurchaseFindFirstSelectZodSchema__findFirstPurchase_schema = z.object({
    id: z.boolean().optional(),
    organization: z.boolean().optional(),
    organizationId: z.boolean().optional(),
    user: z.boolean().optional(),
    userId: z.boolean().optional(),
    type: z.boolean().optional(),
    customerId: z.boolean().optional(),
    subscriptionId: z.boolean().optional(),
    productId: z.boolean().optional(),
    status: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    updatedAt: z.boolean().optional()
  }).strict();

export const PurchaseFindFirstSchema: z.ZodType<Prisma.PurchaseFindFirstArgs, Prisma.PurchaseFindFirstArgs> = z.object({ select: PurchaseFindFirstSelectSchema__findFirstPurchase_schema.optional(), include: z.lazy(() => PurchaseIncludeObjectSchema.optional()), orderBy: z.union([PurchaseOrderByWithRelationInputObjectSchema, PurchaseOrderByWithRelationInputObjectSchema.array()]).optional(), where: PurchaseWhereInputObjectSchema.optional(), cursor: PurchaseWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([PurchaseScalarFieldEnumSchema, PurchaseScalarFieldEnumSchema.array()]).optional() }).strict();

export const PurchaseFindFirstZodSchema = z.object({ select: PurchaseFindFirstSelectSchema__findFirstPurchase_schema.optional(), include: z.lazy(() => PurchaseIncludeObjectSchema.optional()), orderBy: z.union([PurchaseOrderByWithRelationInputObjectSchema, PurchaseOrderByWithRelationInputObjectSchema.array()]).optional(), where: PurchaseWhereInputObjectSchema.optional(), cursor: PurchaseWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([PurchaseScalarFieldEnumSchema, PurchaseScalarFieldEnumSchema.array()]).optional() }).strict();

// File: findManyPurchase.schema.ts

// Select schema needs to be in file to prevent circular imports
//------------------------------------------------------

export const PurchaseFindManySelectSchema__findManyPurchase_schema: z.ZodType<Prisma.PurchaseSelect, Prisma.PurchaseSelect> = z.object({
    id: z.boolean().optional(),
    organization: z.boolean().optional(),
    organizationId: z.boolean().optional(),
    user: z.boolean().optional(),
    userId: z.boolean().optional(),
    type: z.boolean().optional(),
    customerId: z.boolean().optional(),
    subscriptionId: z.boolean().optional(),
    productId: z.boolean().optional(),
    status: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    updatedAt: z.boolean().optional()
  }).strict();

export const PurchaseFindManySelectZodSchema__findManyPurchase_schema = z.object({
    id: z.boolean().optional(),
    organization: z.boolean().optional(),
    organizationId: z.boolean().optional(),
    user: z.boolean().optional(),
    userId: z.boolean().optional(),
    type: z.boolean().optional(),
    customerId: z.boolean().optional(),
    subscriptionId: z.boolean().optional(),
    productId: z.boolean().optional(),
    status: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    updatedAt: z.boolean().optional()
  }).strict();

export const PurchaseFindManySchema: z.ZodType<Prisma.PurchaseFindManyArgs, Prisma.PurchaseFindManyArgs> = z.object({ select: PurchaseFindManySelectSchema__findManyPurchase_schema.optional(), include: z.lazy(() => PurchaseIncludeObjectSchema.optional()), orderBy: z.union([PurchaseOrderByWithRelationInputObjectSchema, PurchaseOrderByWithRelationInputObjectSchema.array()]).optional(), where: PurchaseWhereInputObjectSchema.optional(), cursor: PurchaseWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([PurchaseScalarFieldEnumSchema, PurchaseScalarFieldEnumSchema.array()]).optional() }).strict();

export const PurchaseFindManyZodSchema = z.object({ select: PurchaseFindManySelectSchema__findManyPurchase_schema.optional(), include: z.lazy(() => PurchaseIncludeObjectSchema.optional()), orderBy: z.union([PurchaseOrderByWithRelationInputObjectSchema, PurchaseOrderByWithRelationInputObjectSchema.array()]).optional(), where: PurchaseWhereInputObjectSchema.optional(), cursor: PurchaseWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([PurchaseScalarFieldEnumSchema, PurchaseScalarFieldEnumSchema.array()]).optional() }).strict();

// File: createOnePurchase.schema.ts

export const PurchaseCreateOneSchema = z.object({ select: PurchaseSelectObjectSchema.optional(), include: PurchaseIncludeObjectSchema.optional(), data: z.union([PurchaseCreateInputObjectSchema, PurchaseUncheckedCreateInputObjectSchema])  })

// File: createManyPurchase.schema.ts

export const PurchaseCreateManySchema = z.object({ data: z.union([ PurchaseCreateManyInputObjectSchema, z.array(PurchaseCreateManyInputObjectSchema) ]), skipDuplicates: z.boolean().optional() })

// File: deleteOnePurchase.schema.ts

export const PurchaseDeleteOneSchema = z.object({ select: PurchaseSelectObjectSchema.optional(), include: PurchaseIncludeObjectSchema.optional(), where: PurchaseWhereUniqueInputObjectSchema  })

// File: deleteManyPurchase.schema.ts

export const PurchaseDeleteManySchema = z.object({ where: PurchaseWhereInputObjectSchema.optional()  })

// File: updateOnePurchase.schema.ts

export const PurchaseUpdateOneSchema = z.object({ select: PurchaseSelectObjectSchema.optional(), include: PurchaseIncludeObjectSchema.optional(), data: z.union([PurchaseUpdateInputObjectSchema, PurchaseUncheckedUpdateInputObjectSchema]), where: PurchaseWhereUniqueInputObjectSchema  })

// File: updateManyPurchase.schema.ts

export const PurchaseUpdateManySchema = z.object({ data: PurchaseUpdateManyMutationInputObjectSchema, where: PurchaseWhereInputObjectSchema.optional()  })

// File: upsertOnePurchase.schema.ts

export const PurchaseUpsertSchema = z.object({ select: PurchaseSelectObjectSchema.optional(), include: PurchaseIncludeObjectSchema.optional(), where: PurchaseWhereUniqueInputObjectSchema, create: z.union([ PurchaseCreateInputObjectSchema, PurchaseUncheckedCreateInputObjectSchema ]), update: z.union([ PurchaseUpdateInputObjectSchema, PurchaseUncheckedUpdateInputObjectSchema ])  })

// File: aggregatePurchase.schema.ts

export const PurchaseAggregateSchema = z.object({ orderBy: z.union([PurchaseOrderByWithRelationInputObjectSchema, PurchaseOrderByWithRelationInputObjectSchema.array()]).optional(), where: PurchaseWhereInputObjectSchema.optional(), cursor: PurchaseWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([ z.literal(true), PurchaseCountAggregateInputObjectSchema ]).optional(), _min: PurchaseMinAggregateInputObjectSchema.optional(), _max: PurchaseMaxAggregateInputObjectSchema.optional() })

// File: groupByPurchase.schema.ts

export const PurchaseGroupBySchema = z.object({ where: PurchaseWhereInputObjectSchema.optional(), orderBy: z.union([PurchaseOrderByWithAggregationInputObjectSchema, PurchaseOrderByWithAggregationInputObjectSchema.array()]).optional(), having: PurchaseScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(PurchaseScalarFieldEnumSchema)  })

// File: findUniqueAiChat.schema.ts

export const AiChatFindUniqueSchema = z.object({ select: AiChatSelectObjectSchema.optional(), include: AiChatIncludeObjectSchema.optional(), where: AiChatWhereUniqueInputObjectSchema })

// File: findFirstAiChat.schema.ts

// Select schema needs to be in file to prevent circular imports
//------------------------------------------------------

export const AiChatFindFirstSelectSchema__findFirstAiChat_schema: z.ZodType<Prisma.AiChatSelect, Prisma.AiChatSelect> = z.object({
    id: z.boolean().optional(),
    organizationId: z.boolean().optional(),
    organization: z.boolean().optional(),
    userId: z.boolean().optional(),
    user: z.boolean().optional(),
    title: z.boolean().optional(),
    messages: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    updatedAt: z.boolean().optional()
  }).strict();

export const AiChatFindFirstSelectZodSchema__findFirstAiChat_schema = z.object({
    id: z.boolean().optional(),
    organizationId: z.boolean().optional(),
    organization: z.boolean().optional(),
    userId: z.boolean().optional(),
    user: z.boolean().optional(),
    title: z.boolean().optional(),
    messages: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    updatedAt: z.boolean().optional()
  }).strict();

export const AiChatFindFirstSchema: z.ZodType<Prisma.AiChatFindFirstArgs, Prisma.AiChatFindFirstArgs> = z.object({ select: AiChatFindFirstSelectSchema__findFirstAiChat_schema.optional(), include: z.lazy(() => AiChatIncludeObjectSchema.optional()), orderBy: z.union([AiChatOrderByWithRelationInputObjectSchema, AiChatOrderByWithRelationInputObjectSchema.array()]).optional(), where: AiChatWhereInputObjectSchema.optional(), cursor: AiChatWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([AiChatScalarFieldEnumSchema, AiChatScalarFieldEnumSchema.array()]).optional() }).strict();

export const AiChatFindFirstZodSchema = z.object({ select: AiChatFindFirstSelectSchema__findFirstAiChat_schema.optional(), include: z.lazy(() => AiChatIncludeObjectSchema.optional()), orderBy: z.union([AiChatOrderByWithRelationInputObjectSchema, AiChatOrderByWithRelationInputObjectSchema.array()]).optional(), where: AiChatWhereInputObjectSchema.optional(), cursor: AiChatWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([AiChatScalarFieldEnumSchema, AiChatScalarFieldEnumSchema.array()]).optional() }).strict();

// File: findManyAiChat.schema.ts

// Select schema needs to be in file to prevent circular imports
//------------------------------------------------------

export const AiChatFindManySelectSchema__findManyAiChat_schema: z.ZodType<Prisma.AiChatSelect, Prisma.AiChatSelect> = z.object({
    id: z.boolean().optional(),
    organizationId: z.boolean().optional(),
    organization: z.boolean().optional(),
    userId: z.boolean().optional(),
    user: z.boolean().optional(),
    title: z.boolean().optional(),
    messages: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    updatedAt: z.boolean().optional()
  }).strict();

export const AiChatFindManySelectZodSchema__findManyAiChat_schema = z.object({
    id: z.boolean().optional(),
    organizationId: z.boolean().optional(),
    organization: z.boolean().optional(),
    userId: z.boolean().optional(),
    user: z.boolean().optional(),
    title: z.boolean().optional(),
    messages: z.boolean().optional(),
    createdAt: z.boolean().optional(),
    updatedAt: z.boolean().optional()
  }).strict();

export const AiChatFindManySchema: z.ZodType<Prisma.AiChatFindManyArgs, Prisma.AiChatFindManyArgs> = z.object({ select: AiChatFindManySelectSchema__findManyAiChat_schema.optional(), include: z.lazy(() => AiChatIncludeObjectSchema.optional()), orderBy: z.union([AiChatOrderByWithRelationInputObjectSchema, AiChatOrderByWithRelationInputObjectSchema.array()]).optional(), where: AiChatWhereInputObjectSchema.optional(), cursor: AiChatWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([AiChatScalarFieldEnumSchema, AiChatScalarFieldEnumSchema.array()]).optional() }).strict();

export const AiChatFindManyZodSchema = z.object({ select: AiChatFindManySelectSchema__findManyAiChat_schema.optional(), include: z.lazy(() => AiChatIncludeObjectSchema.optional()), orderBy: z.union([AiChatOrderByWithRelationInputObjectSchema, AiChatOrderByWithRelationInputObjectSchema.array()]).optional(), where: AiChatWhereInputObjectSchema.optional(), cursor: AiChatWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.union([AiChatScalarFieldEnumSchema, AiChatScalarFieldEnumSchema.array()]).optional() }).strict();

// File: createOneAiChat.schema.ts

export const AiChatCreateOneSchema = z.object({ select: AiChatSelectObjectSchema.optional(), include: AiChatIncludeObjectSchema.optional(), data: z.union([AiChatCreateInputObjectSchema, AiChatUncheckedCreateInputObjectSchema])  })

// File: createManyAiChat.schema.ts

export const AiChatCreateManySchema = z.object({ data: z.union([ AiChatCreateManyInputObjectSchema, z.array(AiChatCreateManyInputObjectSchema) ]), skipDuplicates: z.boolean().optional() })

// File: deleteOneAiChat.schema.ts

export const AiChatDeleteOneSchema = z.object({ select: AiChatSelectObjectSchema.optional(), include: AiChatIncludeObjectSchema.optional(), where: AiChatWhereUniqueInputObjectSchema  })

// File: deleteManyAiChat.schema.ts

export const AiChatDeleteManySchema = z.object({ where: AiChatWhereInputObjectSchema.optional()  })

// File: updateOneAiChat.schema.ts

export const AiChatUpdateOneSchema = z.object({ select: AiChatSelectObjectSchema.optional(), include: AiChatIncludeObjectSchema.optional(), data: z.union([AiChatUpdateInputObjectSchema, AiChatUncheckedUpdateInputObjectSchema]), where: AiChatWhereUniqueInputObjectSchema  })

// File: updateManyAiChat.schema.ts

export const AiChatUpdateManySchema = z.object({ data: AiChatUpdateManyMutationInputObjectSchema, where: AiChatWhereInputObjectSchema.optional()  })

// File: upsertOneAiChat.schema.ts

export const AiChatUpsertSchema = z.object({ select: AiChatSelectObjectSchema.optional(), include: AiChatIncludeObjectSchema.optional(), where: AiChatWhereUniqueInputObjectSchema, create: z.union([ AiChatCreateInputObjectSchema, AiChatUncheckedCreateInputObjectSchema ]), update: z.union([ AiChatUpdateInputObjectSchema, AiChatUncheckedUpdateInputObjectSchema ])  })

// File: aggregateAiChat.schema.ts

export const AiChatAggregateSchema = z.object({ orderBy: z.union([AiChatOrderByWithRelationInputObjectSchema, AiChatOrderByWithRelationInputObjectSchema.array()]).optional(), where: AiChatWhereInputObjectSchema.optional(), cursor: AiChatWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([ z.literal(true), AiChatCountAggregateInputObjectSchema ]).optional(), _min: AiChatMinAggregateInputObjectSchema.optional(), _max: AiChatMaxAggregateInputObjectSchema.optional() })

// File: groupByAiChat.schema.ts

export const AiChatGroupBySchema = z.object({ where: AiChatWhereInputObjectSchema.optional(), orderBy: z.union([AiChatOrderByWithAggregationInputObjectSchema, AiChatOrderByWithAggregationInputObjectSchema.array()]).optional(), having: AiChatScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(AiChatScalarFieldEnumSchema)  })

// File: index.ts

